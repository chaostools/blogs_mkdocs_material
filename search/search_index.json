{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hello. This is Ansh Sachdeva (aka root-ansh ) , a 21 year old B.tech Engineering Student from New Delhi,India. I have deep passions for Android App Development, Programming in python, and Data Analysis/Deep Learning. I recently received Google certification as an Associate Android Developer . Motto Full of curiosities and ambitions, I am here to leave a mark in the world, by building something bigger than myself, for the betterment of humanity My resume can be found here . Contact details Resume","title":"About Me"},{"location":"#hello","text":"This is Ansh Sachdeva (aka root-ansh ) , a 21 year old B.tech Engineering Student from New Delhi,India. I have deep passions for Android App Development, Programming in python, and Data Analysis/Deep Learning. I recently received Google certification as an Associate Android Developer . Motto Full of curiosities and ambitions, I am here to leave a mark in the world, by building something bigger than myself, for the betterment of humanity My resume can be found here .","title":"Hello."},{"location":"#contact-details","text":"Resume","title":"Contact details"},{"location":"tab_blogs/blog_summary/","text":"Welcome! Here you would find somethings that i wanna write about. Since the day I came into College(and maybe even before that, but then it was school and I was more focussed towards the non tech subjects), I have been trying to learn something new in tech world everyday. I am a fan of everything techy : be it be new smartphones, new games, new webseries on Startups or Tech or just a new technology. Up till now, I think I have learned a decent amount of stuff related to java, python, android , data analysis, a little about IOT,cloud computing, google assistant, animations, designing, gamedev , interactive content, Advertsisements and some web dev. I even earned a few bucks in internships from these. But let me tell you, 99% of my knowledge comes from this blessed internet.Youtube videos, Github, StackOverflow(its a God site, i tell you) , forums, medium, developer docs... you name it. I am eternally grateful to this worldwide connection of anonymous and non-anonymous people who makes technology and resources available to every human. So, my aim of creating this site was to open source everything that I have learned so far. It would be beneficial in 2 ways : 1)this would create a digital record of my learnings so I won't worry if i forget about them and 2) you might find this content useful. Note that This may contain content from proprietary sources and i don't take credits for any such work -- Ansh . PS: These blogs are intended to be private and might contain mix of hindi,english/klingon,high valyrian,dothraki and binary. For better articles , visit my public blog account . There is also a hidden link on this page having some extra content that i would like to keep hidden, but kudos if you find it :)","title":"Introduction"},{"location":"tab_blogs/blog_summary/#welcome","text":"Here you would find somethings that i wanna write about. Since the day I came into College(and maybe even before that, but then it was school and I was more focussed towards the non tech subjects), I have been trying to learn something new in tech world everyday. I am a fan of everything techy : be it be new smartphones, new games, new webseries on Startups or Tech or just a new technology. Up till now, I think I have learned a decent amount of stuff related to java, python, android , data analysis, a little about IOT,cloud computing, google assistant, animations, designing, gamedev , interactive content, Advertsisements and some web dev. I even earned a few bucks in internships from these. But let me tell you, 99% of my knowledge comes from this blessed internet.Youtube videos, Github, StackOverflow(its a God site, i tell you) , forums, medium, developer docs... you name it. I am eternally grateful to this worldwide connection of anonymous and non-anonymous people who makes technology and resources available to every human. So, my aim of creating this site was to open source everything that I have learned so far. It would be beneficial in 2 ways : 1)this would create a digital record of my learnings so I won't worry if i forget about them and 2) you might find this content useful. Note that This may contain content from proprietary sources and i don't take credits for any such work -- Ansh . PS: These blogs are intended to be private and might contain mix of hindi,english/klingon,high valyrian,dothraki and binary. For better articles , visit my public blog account . There is also a hidden link on this page having some extra content that i would like to keep hidden, but kudos if you find it :)","title":"Welcome!"},{"location":"tab_blogs/android/android_studio_settings/","text":"Fasting Up Android Studio 1. Disabling plugins . This article says to disable the following plugins via settings/plugins: Android APK Support Android Games Android NDK App Links Assistant Copyright Coverage CVS Integeration Editor Config Fabric for Android Studio Firebase (App Indexing, Services, Testing) Github Google (Cloud Tools Core, Cloud Tools for Android, Developer Samples, - Login, Services) Markdown Support Mercurial integration hg4idea Settings repository Subversion integration Task management Test recorder TestNG-J YAML 2. Adding exclusions to firewall As Per dev site here, add these to the windows defender exclusions: C:\\Program Files\\Android\\Android Studio C:\\Users\\anshs.android C:Wsers\\anshA.AndroidStudio3.5 C:\\Users\\anshs.gradle C:\\Users\\anshs\\AppData\\Local\\Android\\Sdk P:\\ java.exe studio64.exe 3. custom VM Options These are working for me as of october 2019: -Xms1024m -Xmx4096m -XX : MaxPermSize = 1024m -XX : ReservedCodeCacheSize = 256m -XX :+ UseCompressedOops","title":"Fasting Up Android Studio"},{"location":"tab_blogs/android/android_studio_settings/#fasting-up-android-studio","text":"","title":"Fasting Up Android Studio"},{"location":"tab_blogs/android/android_studio_settings/#1-disabling-plugins","text":"This article says to disable the following plugins via settings/plugins: Android APK Support Android Games Android NDK App Links Assistant Copyright Coverage CVS Integeration Editor Config Fabric for Android Studio Firebase (App Indexing, Services, Testing) Github Google (Cloud Tools Core, Cloud Tools for Android, Developer Samples, - Login, Services) Markdown Support Mercurial integration hg4idea Settings repository Subversion integration Task management Test recorder TestNG-J YAML","title":"1. Disabling plugins ."},{"location":"tab_blogs/android/android_studio_settings/#2-adding-exclusions-to-firewall","text":"As Per dev site here, add these to the windows defender exclusions: C:\\Program Files\\Android\\Android Studio C:\\Users\\anshs.android C:Wsers\\anshA.AndroidStudio3.5 C:\\Users\\anshs.gradle C:\\Users\\anshs\\AppData\\Local\\Android\\Sdk P:\\ java.exe studio64.exe","title":"2. Adding exclusions to firewall"},{"location":"tab_blogs/android/android_studio_settings/#3-custom-vm-options","text":"These are working for me as of october 2019: -Xms1024m -Xmx4096m -XX : MaxPermSize = 1024m -XX : ReservedCodeCacheSize = 256m -XX :+ UseCompressedOops","title":"3. custom VM Options"},{"location":"tab_blogs/android/enums_and_intDefs/","text":"Enums and @IntDefs Enumerations serve the purpose of representing a group of named constants in a programming language We often use Enums to make our cool, restricted group of values tht a function or statement could take. But they are usually considered a bad practise in android because Enums often require more than twice as much memory as static constants. Enter IntDef @IntDef is a way of replacing an integer enum where there's a parameter that should only accept explicit int values.We can use IntDef to ensure that the value is one of the expected values by adding this annotation. For eg: public class example { @IntDef ( { Type . TYPE_MUSIC , Type . TYPE_PHOTO , Type . TYPE_TEXT }) public @interface Type { int TYPE_MUSIC = 0 ; int TYPE_PHOTO = 21 ; int TYPE_TEXT = 42 ; } // Mark the argument as restricted to these enumerated types public void getItemType ( @Type int itemType ) { int res = itemType ; } } The function will allow user to pass any integer value, but will give a lint warning if value is not Type.TYPE_MUSIC , Type.TYPE_PHOTO or Type.TYPE_TEXT (yes, even if 0,21 or 42 are passed directly too ).","title":"Enums and @IntDefs"},{"location":"tab_blogs/android/enums_and_intDefs/#enums-and-intdefs","text":"Enumerations serve the purpose of representing a group of named constants in a programming language We often use Enums to make our cool, restricted group of values tht a function or statement could take. But they are usually considered a bad practise in android because Enums often require more than twice as much memory as static constants.","title":"Enums and @IntDefs"},{"location":"tab_blogs/android/enums_and_intDefs/#enter-intdef","text":"@IntDef is a way of replacing an integer enum where there's a parameter that should only accept explicit int values.We can use IntDef to ensure that the value is one of the expected values by adding this annotation. For eg: public class example { @IntDef ( { Type . TYPE_MUSIC , Type . TYPE_PHOTO , Type . TYPE_TEXT }) public @interface Type { int TYPE_MUSIC = 0 ; int TYPE_PHOTO = 21 ; int TYPE_TEXT = 42 ; } // Mark the argument as restricted to these enumerated types public void getItemType ( @Type int itemType ) { int res = itemType ; } } The function will allow user to pass any integer value, but will give a lint warning if value is not Type.TYPE_MUSIC , Type.TYPE_PHOTO or Type.TYPE_TEXT (yes, even if 0,21 or 42 are passed directly too ).","title":"Enter IntDef"},{"location":"tab_blogs/android/exoplayer_classes/","text":"Ac3Extractor,Ac3Reader,Ac3Util,Ac3Util.SyncFrameInfo,Ac3Util.SyncFrameInfo.StreamType,Ac4Extractor, Ac4Reader,Ac4Util,Ac4Util.SyncFrameInfo,ActionFileUpgradeUtil,ActionFileUpgradeUtil.DownloadIdProvider, AdaptationSet,AdaptiveMediaSourceEventListener,AdaptiveTrackSelection,AdaptiveTrackSelection.Factory,AdPlaybackState,AdPlaybackState.AdGroup, AdPlaybackState.AdState,AdsLoader,AdsLoader.AdViewProvider,AdsLoader.EventListener,AdsMediaSource,AdsMediaSource.AdLoadException, AdsMediaSource.AdLoadException.Type,AdsMediaSource.MediaSourceFactory,AdtsExtractor,AdtsExtractor.Flags,AdtsReader,AesCipherDataSink,AesCipherDataSource,AesFlushingCipher,Allocation,Allocator,AmrExtractor,AmrExtractor.Flags,AnalyticsCollector,AnalyticsCollector.Factory,AnalyticsListener,AnalyticsListener.EventTime,ApicFrame,AspectRatioFrameLayout,AspectRatioFrameLayout.AspectRatioListener,AspectRatioFrameLayout.ResizeMode,Assertions,AssetDataSource,AssetDataSource.AssetDataSourceException,AtomicFile, AudioAttributes,AudioAttributes.Builder,AudioCapabilities,AudioCapabilitiesReceiver,AudioCapabilitiesReceiver.Listener,AudioDecoderException,AudioFocusManager,AudioFocusManager.PlayerCommand,AudioFocusManager.PlayerControl,AudioListener,AudioProcessor,AudioProcessor.UnhandledFormatException,AudioRendererEventListener,AudioRendererEventListener.EventDispatcher,AudioSink,AudioSink.ConfigurationException,AudioSink.InitializationException,AudioSink.Listener,AudioSink.WriteException,AuxEffectInfo,AvcConfig,BandwidthMeter,BandwidthMeter.EventListener,BaseAudioProcessor,BaseDataSource,BaseMediaChunk,BaseMediaChunkIterator,BaseMediaChunkOutput,BaseMediaSource,BasePlayer,BasePlayer.ListenerHolder,BasePlayer.ListenerInvocation,BaseRenderer,BaseTrackSelection, BehindLiveWindowException,BinaryFrame,BinarySearchSeeker,BinarySearchSeeker.BinarySearchSeekMap,BinarySearchSeeker.DefaultSeekTimestampConverter,BinarySearchSeeker.OutputFrameHolder,BinarySearchSeeker.SeekOperationParams,BinarySearchSeeker.SeekTimestampConverter,BinarySearchSeeker.TimestampSearchResult,BinarySearchSeeker.TimestampSeeker,Buffer,BufferSizeAdaptationBuilder,BufferSizeAdaptationBuilder.DynamicFormatFilter,ByteArrayDataSink,ByteArrayDataSource,C,C.AudioContentType,C.AudioFlags,C.AudioFocusGain,C.AudioUsage,C.BufferFlags,C.ColorRange,C.ColorSpace,C.ColorTransfer,C.ContentType,C.CryptoMode,C.Encoding,C.NetworkType, C.PcmEncoding,C.Projection,C.RoleFlags,C.SelectionFlags,C.StereoMode,C.StreamType,C.VideoScalingMode,Cache,Cache.CacheException,Cache.Listener,CacheDataSink,CacheDataSink.CacheDataSinkException,CacheDataSinkFactory,CacheDataSource,CacheDataSource.CacheIgnoredReason,CacheDataSource.EventListener,CacheDataSource.Flags,CacheDataSourceFactory,CachedRegionTracker,CacheEvictor,CacheKeyFactory,CacheSpan,CacheUtil,CacheUtil.ProgressListener,CameraMotionListener,CameraMotionRenderer,CanvasRenderer,CaptionStyleCompat,CaptionStyleCompat.EdgeType,CastPlayer,Cea608Decoder,Cea708Decoder,Cea708InitializationData,CeaUtil,ChapterFrame,ChapterTocFrame,Chunk,ChunkExtractorWrapper,ChunkExtractorWrapper.TrackOutputProvider,ChunkHolder,ChunkIndex,ChunkSampleStream,ChunkSampleStream.ReleaseCallback,ChunkSource,ClippingMediaPeriod,ClippingMediaSource,ClippingMediaSource.IllegalClippingException, ClippingMediaSource.IllegalClippingException.Reason,Clock,CodecSpecificDataUtil,ColorInfo,ColorParser,CommentFrame,CompositeMediaSource,CompositeSequenceableLoader,CompositeSequenceableLoaderFactory,ConcatenatingMediaSource,ConditionVariable,ConstantBitrateSeekMap,ContainerMediaChunk,ContentDataSource,ContentDataSource.ContentDataSourceException,ContentMetadata,ContentMetadataMutations,ControlDispatcher,CronetDataSource,CronetDataSource.InterruptedIOException,CronetDataSource.OpenException,CronetDataSourceFactory,CronetEngineWrapper,CronetEngineWrapper.CronetEngineSource,CryptoInfo,Cue,Cue.AnchorType,Cue.LineType,Cue.TextSizeType,DashChunkSource,DashChunkSource.Factory,DashDownloader,DashManifest,DashManifestParser,DashManifestParser.RepresentationInfo,DashManifestStaleException,DashMediaSource,DashMediaSource.Factory,DashSegmentIndex,DashUtil,DashWrappingSegmentIndex,DatabaseIOException,DatabaseProvider,DataChunk,DataSchemeDataSource,DataSink,DataSink.Factory,DataSource,DataSource.Factory,DataSourceException,DataSourceInputStream,DataSpec,DataSpec.Flags,DataSpec.HttpMethod,DebugTextViewHelper,Decoder,DecoderCounters, DecoderInputBuffer,DecoderInputBuffer.BufferReplacementMode,DecryptionException,DecryptionResource,DecryptionResource.Owner,DefaultAllocator,DefaultAnalyticsListener,DefaultAudioSink,DefaultAudioSink.AudioProcessorChain,DefaultAudioSink.DefaultAudioProcessorChain,DefaultAudioSink.InvalidAudioTrackTimestampException,DefaultBandwidthMeter,DefaultBandwidthMeter.Builder,DefaultCastOptionsProvider,DefaultCompositeSequenceableLoaderFactory,DefaultContentMetadata,DefaultControlDispatcher,DefaultDashChunkSource,DefaultDashChunkSource.Factory,DefaultDashChunkSource.RepresentationHolder,DefaultDashChunkSource.RepresentationSegmentIterator,DefaultDatabaseProvider,DefaultDataSource,DefaultDataSourceFactory,DefaultDownloaderFactory,DefaultDownloadIndex,DefaultDrmSessionEventListener,DefaultDrmSessionManager,DefaultDrmSessionManager.MissingSchemeDataException,DefaultDrmSessionManager.Mode,DefaultExtractorInput,DefaultExtractorsFactory,DefaultHlsDataSourceFactory,DefaultHlsExtractorFactory,DefaultHlsPlaylistParserFactory,DefaultHlsPlaylistTracker,DefaultHttpDataSource,DefaultHttpDataSourceFactory,DefaultLoadControl,DefaultLoadControl.Builder,DefaultLoadErrorHandlingPolicy,DefaultMediaSourceEventListener,DefaultRenderersFactory,DefaultRenderersFactory.ExtensionRendererMode,DefaultSsChunkSource,DefaultSsChunkSource.Factory,DefaultTimeBar,DefaultTrackNameProvider,DefaultTrackSelector, DefaultTrackSelector.AudioTrackScore,DefaultTrackSelector.Parameters,DefaultTrackSelector.ParametersBuilder,DefaultTrackSelector.SelectionOverride,DefaultTsPayloadReaderFactory,DefaultTsPayloadReaderFactory.Flags,DeferredMediaPeriod,DeferredMediaPeriod.PrepareErrorListener,Descriptor,DolbyVisionConfig,Download,Download.FailureReason,Download.State,DownloadCursor,Downloader,Downloader.ProgressListener,DownloaderConstructorHelper,DownloaderFactory,DownloadException,DownloadHelper,DownloadHelper.Callback,DownloadIndex,DownloadManager,DownloadManager.Listener,DownloadNotificationHelper,DownloadNotificationUtil,DownloadProgress, DownloadRequest,DownloadRequest.UnsupportedRequestException,DownloadService,DrmInitData,DrmInitData.SchemeData,DrmSession,DrmSession.DrmSessionException,DrmSession.State,DrmSessionManager,DtsReader,DtsUtil,DummyDataSource,DummyExtractorOutput,DummySurface,DummyTrackOutput,DvbDecoder,DvbSubtitleReader,DynamicConcatenatingMediaSource,EbmlProcessor,EbmlProcessor.ElementType,EGLSurfaceTexture,EGLSurfaceTexture.GlException,EGLSurfaceTexture.SecureMode,EGLSurfaceTexture.TextureImageListener,ElementaryStreamReader,EmptySampleStream,ErrorMessageProvider,ErrorStateDrmSession,EventDispatcher,EventDispatcher.Event,EventLogger,EventMessage,EventMessageDecoder,EventMessageEncoder,EventStream,ExoDatabaseProvider,ExoMediaCrypto,ExoMediaDrm,ExoMediaDrm.KeyRequest, ExoMediaDrm.KeyStatus,ExoMediaDrm.OnEventListener,ExoMediaDrm.OnKeyStatusChangeListener,ExoMediaDrm.ProvisionRequest,ExoPlaybackException,ExoPlaybackException.Type,ExoPlayer,ExoPlayer.ExoPlayerComponent,ExoPlayer.ExoPlayerMessage,ExoPlayerFactory,ExoPlayerLibraryInfo,Extractor,Extractor.ReadResult,ExtractorInput,ExtractorMediaSource,ExtractorMediaSource.EventListener,ExtractorMediaSource.Factory,ExtractorOutput,ExtractorsFactory,FfmpegAudioRenderer,FfmpegDecoderException,FfmpegLibrary,FileDataSource, FileDataSource.FileDataSourceException,FileDataSourceFactory,FilterableManifest,FilteringHlsPlaylistParserFactory,FilteringManifestParser,FixedTrackSelection,FixedTrackSelection.Factory,FlacDecoderException,FlacExtractor,FlacExtractor.Flags,FlacLibrary, FlacStreamMetadata,FlvExtractor,Format,FormatHolder,ForwardingTimeline,FragmentedMp4Extractor,FragmentedMp4Extractor.Flags,FrameRotationQueue,FrameworkMediaCrypto,FrameworkMediaDrm,GaplessInfoHolder,GeobFrame,GlUtil,GlViewGroup,GvrAudioProcessor,GvrPlayerActivity,H262Reader,H264Reader,H265Reader,HandlerWrapper,HevcConfig,HlsDataSourceFactory,HlsDownloader,HlsExtractorFactory,HlsExtractorFactory.Result,HlsManifest,HlsMasterPlaylist,HlsMasterPlaylist.Rendition,HlsMasterPlaylist.Variant,HlsMediaPeriod,HlsMediaPlaylist,HlsMediaPlaylist.PlaylistType,HlsMediaPlaylist.Segment,HlsMediaSource,HlsMediaSource.Factory,HlsPlaylist,HlsPlaylistParser,HlsPlaylistParserFactory,HlsPlaylistTracker,HlsPlaylistTracker.Factory,HlsPlaylistTracker.PlaylistEventListener,HlsPlaylistTracker.PlaylistResetException,HlsPlaylistTracker.PlaylistStuckException,HlsPlaylistTracker.PrimaryPlaylistListener, HlsTrackMetadataEntry,HlsTrackMetadataEntry.VariantInfo,HttpDataSource,HttpDataSource.BaseFactory,HttpDataSource.Factory,HttpDataSource.HttpDataSourceException,HttpDataSource.HttpDataSourceException.Type,HttpDataSource.InvalidContentTypeException,HttpDataSource.InvalidResponseCodeException,HttpDataSource.RequestProperties,HttpMediaDrmCallback,IcyDecoder,IcyHeaders,IcyInfo,Id3Decoder,Id3Decoder.FramePredicate,Id3Frame,Id3Peeker,Id3Reader,IllegalSeekPositionException,ImaAdsLoader,ImaAdsLoader.Builder,InitializationChunk,InternalFrame,JobDispatcherScheduler,JobDispatcherScheduler.JobDispatcherSchedulerService,KeysExpiredException,LatmReader,LeanbackPlayerAdapter,LeastRecentlyUsedCacheEvictor,LibflacAudioRenderer,LibopusAudioRenderer,LibraryLoader,LibvpxVideoRenderer,LoadControl,Loader,Loader.Callback,Loader.Loadable,Loader.LoadErrorAction,Loader.ReleaseCallback,Loader.UnexpectedLoaderException,LoaderErrorThrower,LoaderErrorThrower.Dummy,LoadErrorHandlingPolicy,LocalMediaDrmCallback,Log,LongArray,LoopingMediaSource,MappingTrackSelector,MappingTrackSelector.MappedTrackInfo,MatroskaExtractor,MatroskaExtractor.Flags,MdtaMetadataEntry,MediaChunk,MediaChunkIterator,MediaChunkListIterator,MediaClock,MediaCodecAudioRenderer,MediaCodecInfo,MediaCodecRenderer, MediaCodecRenderer.DecoderInitializationException,MediaCodecRenderer.KeepCodecResult,MediaCodecSelector,MediaCodecUtil,MediaCodecUtil.DecoderQueryException,MediaCodecVideoRenderer,MediaCodecVideoRenderer.CodecMaxValues,MediaDrmCallback,MediaFormatUtil,MediaItem,MediaItem.Builder,MediaItem.DrmScheme,MediaItem.UriBundle,MediaItemQueue,MediaPeriod,MediaPeriod.Callback,MediaSessionConnector,MediaSessionConnector.CommandReceiver,MediaSessionConnector.CustomActionProvider,MediaSessionConnector.DefaultMediaMetadataProvider,MediaSessionConnector.MediaButtonEventHandler,MediaSessionConnector.MediaMetadataProvider,MediaSessionConnector.PlaybackActions,MediaSessionConnector.PlaybackPreparer,MediaSessionConnector.QueueEditor,MediaSessionConnector.QueueNavigator,MediaSessionConnector.RatingCallback,MediaSource,MediaSource.MediaPeriodId,MediaSource.SourceInfoRefreshListener,MediaSourceEventListener,MediaSourceEventListener.EventDispatcher,MediaSourceEventListener.LoadEventInfo,MediaSourceEventListener.MediaLoadData,MergingMediaSource,MergingMediaSource.IllegalMergeException,MergingMediaSource.IllegalMergeException.Reason,Metadata,Metadata.Entry,MetadataDecoder,MetadataDecoderFactory,MetadataInputBuffer,MetadataOutput,MetadataRenderer,MetadataRenderer.Output, MimeTypes,MlltFrame,Mp3Extractor,Mp3Extractor.Flags,Mp4Extractor,Mp4Extractor.Flags,Mp4WebvttDecoder,MpegAudioHeader,MpegAudioReader,NalUnitUtil,NalUnitUtil.PpsData,NalUnitUtil.SpsData,NoOpCacheEvictor,NoSampleRenderer,NotificationUtil,NotificationUtil.Importance,OfflineLicenseHelper,OggExtractor,OkHttpDataSource,OkHttpDataSourceFactory,OpusDecoderException,OpusLibrary,OutputBuffer,ParsableBitArray,ParsableByteArray,ParsableNalUnitBitArray,ParserException,ParsingLoadable,ParsingLoadable.Parser,Period, PesReader,PgsDecoder,PictureFrame,PlatformScheduler,PlatformScheduler.PlatformSchedulerService,PlaybackControlView,PlaybackControlView.ControlDispatcher,PlaybackParameters,PlaybackPreparer,Player,Player.AudioComponent,Player.DefaultEventListener,Player.DiscontinuityReason,Player.EventListener,Player.MetadataComponent,Player.RepeatMode,Player.TextComponent,Player.TimelineChangeReason,Player.VideoComponent,PlayerControlView,PlayerControlView.ProgressUpdateListener,PlayerControlView.VisibilityListener,PlayerEmsgHandler,PlayerEmsgHandler.PlayerEmsgCallback,PlayerMessage,PlayerMessage.Sender,PlayerMessage.Target,PlayerNotificationManager,PlayerNotificationManager.CustomActionReceiver,PlayerNotificationManager.MediaDescriptionAdapter,PlayerNotificationManager.NotificationListener,PlayerNotificationManager.Priority,PlayerNotificationManager.Visibility,PlayerView,PlayerView.ShowBuffering,PointerRenderer,PositionHolder,Predicate,PriorityDataSource,PriorityDataSourceFactory,PriorityTaskManager,PriorityTaskManager.PriorityTooLowException,PrivateCommand,PrivFrame,ProgramInformation,ProgressiveDownloader,ProgressiveMediaSource,ProgressiveMediaSource.Factory,Projection,Projection.DrawMode,Projection.Mesh,Projection.SubMesh,ProjectionDecoder,PsExtractor,PsshAtomUtil, RandomTrackSelection,RandomTrackSelection.Factory,RangedUri,RawCcExtractor,RawResourceDataSource,RawResourceDataSource.RawResourceDataSourceException,Renderer,Renderer.State,RendererCapabilities,RendererConfiguration,RenderersFactory,RepeatModeActionProvider, RepeatModeUtil,RepeatModeUtil.RepeatToggleModes,Representation,Representation.MultiSegmentRepresentation,Representation.SingleSegmentRepresentation,Requirements,Requirements.RequirementFlags,RequirementsWatcher,RequirementsWatcher.Listener,ResolvingDataSource,ResolvingDataSource.Factory,ResolvingDataSource.Resolver,ReusableBufferedOutputStream,RtmpDataSource,RtmpDataSourceFactory, SampleQueue,SampleQueue.UpstreamFormatChangedListener,SampleQueueMappingException,SampleStream,SceneRenderer,Scheduler,SectionPayloadReader,SectionReader,SeekMap,SeekMap.SeekPoints,SeekMap.Unseekable,SeekParameters,SeekPoint,SegmentBase,SegmentBase.MultiSegmentBase,SegmentBase.SegmentList,SegmentBase.SegmentTemplate,SegmentBase.SegmentTimelineElement,SegmentBase.SingleSegmentBase, SegmentDownloader,SegmentDownloader.Segment,SequenceableLoader,SequenceableLoader.Callback,SessionAvailabilityListener,ShuffleOrder,ShuffleOrder.DefaultShuffleOrder,ShuffleOrder.UnshuffledShuffleOrder,SilenceMediaSource,SilenceSkippingAudioProcessor,SimpleCache,SimpleDecoder,SimpleDecoderAudioRenderer,SimpleExoPlayer,SimpleExoPlayer.VideoListener,SimpleExoPlayerView,SimpleOutputBuffer,SimpleSubtitleDecoder,SinglePeriodAdTimeline,SinglePeriodTimeline,SingleSampleMediaChunk,SingleSampleMediaSource,SingleSampleMediaSource.EventListener,SingleSampleMediaSource.Factory,SingleTapListener,SlidingPercentile,SonicAudioProcessor,SphericalSurfaceView,SpliceCommand,SpliceInfoDecoder,SpliceInfoSectionReader,SpliceInsertCommand,SpliceInsertCommand.ComponentSplice, SpliceNullCommand,SpliceScheduleCommand,SpliceScheduleCommand.ComponentSplice,SpliceScheduleCommand.Event,SsaDecoder,SsChunkSource, SsChunkSource.Factory,SsDownloader,SsManifest,SsManifest.ProtectionElement,SsManifest.StreamElement,SsManifestParser,SsManifestParser.MissingFieldException,SsMediaSource,SsMediaSource.Factory,SsUtil,StandaloneMediaClock,StatsDataSource,StreamKey,SubripDecoder, Subtitle,SubtitleDecoder,SubtitleDecoderException,SubtitleDecoderFactory,SubtitleInputBuffer,SubtitleOutputBuffer,SubtitleView, TeeAudioProcessor,TeeAudioProcessor.AudioBufferSink,TeeAudioProcessor.WavFileAudioBufferSink,TeeDataSource,TextInformationFrame, TextOutput,TextRenderer,TextRenderer.Output,TimeBar,TimeBar.OnScrubListener,TimedValueQueue,Timeline,Timeline.Period,Timeline.Window,TimelineQueueEditor,TimelineQueueEditor.MediaIdEqualityChecker,TimelineQueueEditor.MediaSourceFactory,TimelineQueueEditor.QueueDataAdapter,TimelineQueueNavigator,TimeSignalCommand,TimestampAdjuster,TimestampAdjusterProvider,TraceUtil,Track,Track.Transformation,TrackBitrateEstimator,TrackEncryptionBox,TrackGroup,TrackGroupArray,TrackNameProvider,TrackOutput,TrackOutput.CryptoData,TrackSelection,TrackSelection.Definition,TrackSelection.Factory,TrackSelectionArray,TrackSelectionDialogBuilder,TrackSelectionDialogBuilder.DialogCallback,TrackSelectionParameters,TrackSelectionParameters.Builder,TrackSelectionUtil,TrackSelectionUtil.AdaptiveTrackSelectionFactory,TrackSelectionView,TrackSelectionView.TrackSelectionListener,TrackSelector,TrackSelector.InvalidationListener, TrackSelectorResult,TransferListener,TsExtractor,TsExtractor.Mode,TsPayloadReader,TsPayloadReader.DvbSubtitleInfo,TsPayloadReader.EsInfo,TsPayloadReader.Factory,TsPayloadReader.Flags,TsPayloadReader.TrackIdGenerator,TsUtil,TtmlDecoder,Tx3gDecoder,UdpDataSource,UdpDataSource.UdpDataSourceException,UnrecognizedInputFormatException,UnsupportedDrmException,UnsupportedDrmException.Reason, UriUtil,UrlLinkFrame,UrlTemplate,UtcTimingElement,Util,VersionTable,VideoFrameMetadataListener,VideoFrameReleaseTimeHelper,VideoListener,VideoRendererEventListener,VideoRendererEventListener.EventDispatcher,VorbisComment,VpxDecoderException,VpxLibrary,VpxOutputBuffer, VpxOutputBufferRenderer,VpxVideoSurfaceView,WavExtractor,WavUtil,WebvttCssStyle,WebvttCssStyle.FontSizeUnit,WebvttCssStyle.StyleFlags,WebvttCue,WebvttCue.Builder,WebvttCueParser,WebvttDecoder,WebvttExtractor,WebvttParserUtil,WidevineUtil,WindowedTrackBitrateEstimator,WorkManagerScheduler,WorkManagerScheduler.SchedulerWorker,WritableDownloadIndex,XmlPullParserUtil","title":"Exoplayer classes"},{"location":"tab_blogs/android/exoplayer_p1/","text":"Exoplayer 17/9/19 A good video player library for implementing A decent video player in your app, coz the other option of video_view from the default android sdk is less useful Steps to implement Add Exoplayer library : Which is actually a group of 6-7 individual libraries having a jillion files. implementation 'com.google.android.exoplayer:exoplayer:2.10.4' adding this would add fucking 800 classes of this massive library. So let us see what it has to offer. Some basic Details. The library has the following modules. Adding a dependency to the full ExoPlayer library is equivalent to adding dependencies on all of the library modules individually: - exoplayer-core: Core functionality (required). - exoplayer-dash: Support for DASH content. - exoplayer-hls: Support for HLS content. - exoplayer-smoothstreaming: Support for SmoothStreaming content. - exoplayer-ui: UI components and resources for use with ExoPlayer. In addition to library modules, ExoPlayer has multiple extension modules that depend on external libraries to provide additional functionality. Browse the extensions directory(https://github.com/google/ExoPlayer/tree/release-v2/extensions/) and their individual READMEs for details. Also java 8 support is compulsory for this library. the Bare Minimmums. The smallest code that we need to implement would be: protected void onCreate ( Bundle savedInstanceState ) { ... Context ctx = this ; String CONTENT_URL = \"https://www.radiantmediaplayer.com/media/bbb-360p.mp4\" ; int playerID = R . id . pv_main ; int appNameStringRes = R . string . app_name ; startPlayingVideo ( this , CONTENT_URL , playerID , appNameStringRes ); } // private void startPlayingVideo ( Context ctx , String CONTENT_URL , int playerID , String appNameRes ) { PlayerView pvMain = ctx . findViewById ( playerID ); //BandwidthMeter bandwidthMeter = new DefaultBandwidthMeter(); //TrackSelection.Factory videoTrackSelectionFactory = new AdaptiveTrackSelection.Factory(bandwidthMeter); //TrackSelector trackSelectorDef = new DefaultTrackSelector(videoTrackSelectionFactory); TrackSelector trackSelectorDef = new DefaultTrackSelector (); SimpleExoPlayer absPlayerInternal = ExoPlayerFactory . newSimpleInstance ( ctx , trackSelectorDef ); String userAgent = Util . getUserAgent ( ctx , ctx . getString ( appNameRes )); DefaultDataSourceFactory defdataSourceFactory = new DefaultDataSourceFactory ( ctx , userAgent ); Uri uriOfContentUrl = Uri . parse ( CONTENT_URL ); MediaSource mediaSource = new ProgressiveMediaSource . Factory ( defdataSourceFactory ). createMediaSource ( uriOfContentUrl ); absPlayerInternal . prepare ( mediaSource ); absPlayerInternal . setPlayWhenReady ( true ); pvMain . setPlayer ( absPlayerInternal ); } private void stopPlayer ( PlayerView pv , SimpleExoPlayer absPlayer ){ pv . setPlayer ( null ); absPlayer . release (); absPlayer = null ; } How this works? We add a PlayerView widget in our xml and refer its instance in java. Then we attach an instance of SimpleExoPlayer to it , which will handle all downloading, decoding and rendering of video. In More Details, but with a tiny off topic context: Suppose I am the creator of baby shark video song. I have made this large 48 mb sized HD, bluray video and uploaded it to my fast, responsive,hypothetical aws server. I want the an app which is able to fetch this video into user's mobile without downloading it on their mobiles. This is what I call static streaming* . The video player is supposed to download some small chunks(Say, 2-12 second of a video at a time) of video one by one, at real time and show it to the users on the spot.*** But The biggest problem with streaming is connectivity. Their are mobile users with super fast internet speeds, users with fluctuating speeds and users with terribly ugly internet speeds. Even though a 6 sec HD video would be just 700-800 KB data, it might take 4-5 seconds for a user with poor connection. So exo player has this TrackSelector class, that is responsible for choosing which file chunks to download based on perceived bandwidth changes. So, for eg, if a high quality chunk would take too long to download, the TrackSelector will choose something of lower quality to show the user. And since each chunk is usually about 2 to 12 seconds long, it\u2019s not bad if the user gets a lower quality chunk of media once in while for the benefit of a smooth experience. It Uses BandwidthMeter class to get user's current bandwidth speeds and a bunch of other classes nd factories to create different tracks of video stream chuncks or packets of different sizes and qualities. (Later we will expand more on this: what are tracks, how tracks are created, track selection and creators, How it interacts with absPlayerInstance etc ). So, to summarise, TrackSelector basically makes a setting in our exoplayer environment to download either high quality HD packets(i.e a complete packet) or low quality 144p or 360p packets(or optimised/compressed/low quality version of a packet) from a stream usually on the basis of user's Internet Connection Bandwidth and/or other factors. Using this track selector we can create an almost ready to run ExoPlayer instance. Let's look into SimpleExoPlayer . At the core of the ExoPlayer library is the Player interface. This is the most powerful interface as it has definations for functions like: isPlayingAd() : weather the player is playing an ad or not. getCurrentAdGroupIndex() : index of current ad group(if ad is being played) getCurrentAdIndexInAdGroup() : index of current ad in current ad group(if ad is being played) getContentDuration() : returns either the total duration of contents(+ the ads) or C.TIME_UNSET (a constant indicating remaining time is unknown) getContentPosition() : position of content from where it will be resumed playing after ads are finished. (if ads aren't playing, will simply return same as getPosition() ) getContentBufferedPosition() : returns an estimate of the content position in the current content window up to which data is buffered, in milliseconds.(if ads aren't playing, will simply return same as getBufferedPosition() ) get/setVolume() getAudioComponent(),getVideoComponent(),MetaDataComponent() // not exactly what you are thinking add/remove audio/videoListener addEventListener(),addErrorListener setPlayWhenRead()/ setRepeatMode()/ seekTo()/ stop()/reset()/ isLoading()/release() getCurrentTrackGroups/getTrackSelections()/geTCurrentManifest() setPlayBackParams() //like speed/pith Instances can be created through ExoPlayerFactory class. SimpleExoPlayer instance is a class which implements Player functions. ExoPlayer exposes traditional high-level media player functionality such as getAudioFormat, getCurrentPositon, getDuration, setVolume, seekTo, setPlayWhenReady, stop and much more. Just like I have mentioned before ExoPlayer uses many components to achieve its modularity and customizability. It delegates work to components which have to be injected when we create and prepare an ExoPlayer instance. The next part is specifying a MediaSource . We have assumed that their will be a video on some server that will be continuously sending us data some large chunks of data packages and our track selector and other libs will download small chuncks of it based on user bandwidth. But there is something missing, something incomplete. How is this continuous stream coming?Where is it coming from? why is it coming automatically and continuously?When and how did it started coming? How is it forever running?Why isn't data getting wasted if packet downloading speed is so fast while streaming speed is slow?Can I listen to the packets being received/decoded/...(whatever are the stages before player starts to render it and user sees it)...? These are good questions that will be obviously answered. But let's first work on our assumptions. Our first assumption is very correct: There IS some server that has our video loaded in it. So our first task would be to inform our app's video handling environment, i.e the exoplayer about it. A {@link Factory} that produces {@link DefaultDataSource} instances that delegate to * {@link DefaultHttpDataSource} s for non-file/asset/content URIs. Your choice of MediaSource is going to depend on the type of media you're trying to play.In this example, we're going to be playing an MP4, so we're going to use an ProgressiveMediaSource which supports formats like MP4, MP3, Matroska, and so on. If you wanted to play Dash or HLS or smooth streaming streams, then you would use the corresponding MediaSources for those different formats. Extras Why exoplayer does not support progress listener: Link According to them, it's the \"client that knows the points at which it wants a position update\". What if the client just wants to listen to the video current position updates? Constantly checking getCurrentPosition (e.g. with the help of Timer().scheduleAtFixedRate) is a very inefficient solution. IMHO, it would be great if ExoPlayer had a specialized method for this, somethings like setCurrentPositionListener which the developers could use to get notified about the video position changes. Since the player manages its own getCurrentPosition property it already knows when to emit onPositionChanged events. The client can only use the polling technique for this: /** // TrackSelector class * The component of an {@link ExoPlayer} responsible for selecting tracks to be consumed by each of * the player's {@link Renderer}s. The {@link DefaultTrackSelector} implementation should be * suitable for most use cases. * * <h3>Interactions with the player</h3> * * The following interactions occur between the player and its track selector during playback. * * <p> * * <ul> * <li>When the player is created it will initialize the track selector by calling {@link * #init(InvalidationListener, BandwidthMeter)}. * <li>When the player needs to make a track selection it will call {@link * #selectTracks(RendererCapabilities[], TrackGroupArray, MediaPeriodId, Timeline)}. This * typically occurs at the start of playback, when the player starts to buffer a new period of * the media being played, and when the track selector invalidates its previous selections. * <li>The player may perform a track selection well in advance of the selected tracks becoming * active, where active is defined to mean that the renderers are actually consuming media * corresponding to the selection that was made. For example when playing media containing * multiple periods, the track selection for a period is made when the player starts to buffer * that period. Hence if the player's buffering policy is to maintain a 30 second buffer, the * selection will occur approximately 30 seconds in advance of it becoming active. In fact the * selection may never become active, for example if the user seeks to some other period of * the media during the 30 second gap. The player indicates to the track selector when a * selection it has previously made becomes active by calling {@link * #onSelectionActivated(Object)}. * <li>If the track selector wishes to indicate to the player that selections it has previously * made are invalid, it can do so by calling {@link * InvalidationListener#onTrackSelectionsInvalidated()} on the {@link InvalidationListener} * that was passed to {@link #init(InvalidationListener, BandwidthMeter)}. A track selector * may wish to do this if its configuration has changed, for example if it now wishes to * prefer audio tracks in a particular language. This will trigger the player to make new * track selections. Note that the player will have to re-buffer in the case that the new * track selection for the currently playing period differs from the one that was invalidated. * </ul> * * <h3>Renderer configuration</h3> * * The {@link TrackSelectorResult} returned by {@link #selectTracks(RendererCapabilities[], * TrackGroupArray, MediaPeriodId, Timeline)} contains not only {@link TrackSelection}s for each * renderer, but also {@link RendererConfiguration}s defining configuration parameters that the * renderers should apply when consuming the corresponding media. Whilst it may seem counter- * intuitive for a track selector to also specify renderer configuration information, in practice * the two are tightly bound together. It may only be possible to play a certain combination tracks * if the renderers are configured in a particular way. Equally, it may only be possible to * configure renderers in a particular way if certain tracks are selected. Hence it makes sense to * determined the track selection and corresponding renderer configurations in a single step. * * <h3>Threading model</h3> * * All calls made by the player into the track selector are on the player's internal playback * thread. The track selector may call {@link InvalidationListener#onTrackSelectionsInvalidated()} * from any thread. */ public abstract class TrackSelector { } ProgressiveMediaSource(a class) extends BaseMediaSource(a class) extends Media Source(an interface) Some code: /** * Provides one period that loads data from a {@link Uri} and extracted using an {@link Extractor}. * * <p>If the possible input stream container formats are known, pass a factory that instantiates * extractors for them to the constructor. Otherwise, pass a {@link DefaultExtractorsFactory} to use * the default extractors. When reading a new stream, the first {@link Extractor} in the array of * extractors created by the factory that returns {@code true} from {@link Extractor#sniff} will be * used to extract samples from the input stream. * * <p>Note that the built-in extractor for FLV streams does not support seeking. */ public final class ProgressiveMediaSource extends BaseMediaSource implements ProgressiveMediaPeriod . Listener { /* Factory for creating instances of ProgressiveMediaSource class, using the extractors provided by {DefaultExtractorsFactory} (OR something else too, idk). */ public static final class Factory implements AdsMediaSource . MediaSourceFactory { ... ... public Factory ( DataSource . Factory dataSourceFactory ) { this ( dataSourceFactory , new DefaultExtractorsFactory ()); } .... } Some more code: /** * Base {@link MediaSource} implementation to handle parallel reuse and to keep a list of {@link * MediaSourceEventListener}s. * * <p>Whenever an implementing subclass needs to provide a new timeline and/or manifest, it must * call {@link #refreshSourceInfo(Timeline, Object)} to notify all listeners. */ public abstract class BaseMediaSource implements MediaSource { private final ArrayList < SourceInfoRefreshListener > sourceInfoListeners ; private final MediaSourceEventListener . EventDispatcher eventDispatcher ; @Nullable private Looper looper ; @Nullable private Timeline timeline ; @Nullable private Object manifest ; public BaseMediaSource () { sourceInfoListeners = new ArrayList <> ( /* initialCapacity= */ 1 ); eventDispatcher = new MediaSourceEventListener . EventDispatcher (); } Even more code: /** * Defines and provides media to be played by an {@link com.google.android.exoplayer2.ExoPlayer}. A * MediaSource has two main responsibilities: * * <ul> * <li>To provide the player with a {@link Timeline} defining the structure of its media, and to * provide a new timeline whenever the structure of the media changes. The MediaSource * provides these timelines by calling {@link SourceInfoRefreshListener#onSourceInfoRefreshed} * on the {@link SourceInfoRefreshListener}s passed to {@link * #prepareSource(SourceInfoRefreshListener, TransferListener)}. * <li>To provide {@link MediaPeriod} instances for the periods in its timeline. MediaPeriods are * obtained by calling {@link #createPeriod(MediaPeriodId, Allocator, long)}, and provide a * way for the player to load and read the media. * </ul> * * All methods are called on the player's internal playback thread, as described in the {@link * com.google.android.exoplayer2.ExoPlayer} Javadoc. They should not be called directly from * application code. Instances can be re-used, but only for one {@link * com.google.android.exoplayer2.ExoPlayer} instance simultaneously. */ public interface MediaSource { /** Listener for source events. */ interface SourceInfoRefreshListener { /** ... } exo resources : https://android.jlelse.eu/streaming-video-on-android-using-exoplayer-3087d604095 This guy implements basic streaming but has some content that i haven't yet read. https://medium.com/@pawankgupta.se/live-video-streaming-using-exoplayer-2-x-41cc7f9301d6 basic video rendering using HLS http://www.tothenew.com/blog/playing-different-videos-with-exo-player-in-android-tv/ basic exoplayer. might have something new. https://blog.hotstar.com/when-hotstar-met-exoplayer-5b9ea500bd0 : good theory regarding exo https://github.com/Tubitv/TubiPlayer : tubi player : a player build around exoplayer non exo player resources Good article on how video straming woks : 1. https://www.swipetips.com/android-video-streaming-videoview-tutorial/ video view streaming https://instagram-engineering.com/improving-video-playback-on-android-2f6c6a0058d https://medium.com/@onix_systems/rtmp-protocol-enable-instant-video-streaming-for-android-apps-44cd9de6f339 http://www.tothenew.com/blog/adaptive-video-streaming-hls/ very good theory https://medium.com/p/cddc0b1bf764/responses/show (bad , promotional content, but good theory) https://medium.com/@judeosby/creating-a-video-streaming-app-in-android-using-mvvm-rxjava-pagination-library-and-the-normal-e7b120653d19 (good, practical one with github/open source use cases uses deprecated bvp player ) https://www.streamingmedia.com/Default.aspx website on streaming. https://imagen.io/resources/what-are-svod-tvod-avod/ : VOD business jw player : they have implemented everything we want.","title":"Exoplayer"},{"location":"tab_blogs/android/exoplayer_p1/#exoplayer","text":"17/9/19 A good video player library for implementing A decent video player in your app, coz the other option of video_view from the default android sdk is less useful","title":"Exoplayer"},{"location":"tab_blogs/android/exoplayer_p1/#steps-to-implement","text":"Add Exoplayer library : Which is actually a group of 6-7 individual libraries having a jillion files. implementation 'com.google.android.exoplayer:exoplayer:2.10.4' adding this would add fucking 800 classes of this massive library. So let us see what it has to offer. Some basic Details. The library has the following modules. Adding a dependency to the full ExoPlayer library is equivalent to adding dependencies on all of the library modules individually: - exoplayer-core: Core functionality (required). - exoplayer-dash: Support for DASH content. - exoplayer-hls: Support for HLS content. - exoplayer-smoothstreaming: Support for SmoothStreaming content. - exoplayer-ui: UI components and resources for use with ExoPlayer. In addition to library modules, ExoPlayer has multiple extension modules that depend on external libraries to provide additional functionality. Browse the extensions directory(https://github.com/google/ExoPlayer/tree/release-v2/extensions/) and their individual READMEs for details. Also java 8 support is compulsory for this library.","title":"Steps to implement"},{"location":"tab_blogs/android/exoplayer_p1/#the-bare-minimmums","text":"The smallest code that we need to implement would be: protected void onCreate ( Bundle savedInstanceState ) { ... Context ctx = this ; String CONTENT_URL = \"https://www.radiantmediaplayer.com/media/bbb-360p.mp4\" ; int playerID = R . id . pv_main ; int appNameStringRes = R . string . app_name ; startPlayingVideo ( this , CONTENT_URL , playerID , appNameStringRes ); } // private void startPlayingVideo ( Context ctx , String CONTENT_URL , int playerID , String appNameRes ) { PlayerView pvMain = ctx . findViewById ( playerID ); //BandwidthMeter bandwidthMeter = new DefaultBandwidthMeter(); //TrackSelection.Factory videoTrackSelectionFactory = new AdaptiveTrackSelection.Factory(bandwidthMeter); //TrackSelector trackSelectorDef = new DefaultTrackSelector(videoTrackSelectionFactory); TrackSelector trackSelectorDef = new DefaultTrackSelector (); SimpleExoPlayer absPlayerInternal = ExoPlayerFactory . newSimpleInstance ( ctx , trackSelectorDef ); String userAgent = Util . getUserAgent ( ctx , ctx . getString ( appNameRes )); DefaultDataSourceFactory defdataSourceFactory = new DefaultDataSourceFactory ( ctx , userAgent ); Uri uriOfContentUrl = Uri . parse ( CONTENT_URL ); MediaSource mediaSource = new ProgressiveMediaSource . Factory ( defdataSourceFactory ). createMediaSource ( uriOfContentUrl ); absPlayerInternal . prepare ( mediaSource ); absPlayerInternal . setPlayWhenReady ( true ); pvMain . setPlayer ( absPlayerInternal ); } private void stopPlayer ( PlayerView pv , SimpleExoPlayer absPlayer ){ pv . setPlayer ( null ); absPlayer . release (); absPlayer = null ; } How this works? We add a PlayerView widget in our xml and refer its instance in java. Then we attach an instance of SimpleExoPlayer to it , which will handle all downloading, decoding and rendering of video. In More Details, but with a tiny off topic context: Suppose I am the creator of baby shark video song. I have made this large 48 mb sized HD, bluray video and uploaded it to my fast, responsive,hypothetical aws server. I want the an app which is able to fetch this video into user's mobile without downloading it on their mobiles. This is what I call static streaming* . The video player is supposed to download some small chunks(Say, 2-12 second of a video at a time) of video one by one, at real time and show it to the users on the spot.*** But The biggest problem with streaming is connectivity. Their are mobile users with super fast internet speeds, users with fluctuating speeds and users with terribly ugly internet speeds. Even though a 6 sec HD video would be just 700-800 KB data, it might take 4-5 seconds for a user with poor connection. So exo player has this TrackSelector class, that is responsible for choosing which file chunks to download based on perceived bandwidth changes. So, for eg, if a high quality chunk would take too long to download, the TrackSelector will choose something of lower quality to show the user. And since each chunk is usually about 2 to 12 seconds long, it\u2019s not bad if the user gets a lower quality chunk of media once in while for the benefit of a smooth experience. It Uses BandwidthMeter class to get user's current bandwidth speeds and a bunch of other classes nd factories to create different tracks of video stream chuncks or packets of different sizes and qualities. (Later we will expand more on this: what are tracks, how tracks are created, track selection and creators, How it interacts with absPlayerInstance etc ). So, to summarise, TrackSelector basically makes a setting in our exoplayer environment to download either high quality HD packets(i.e a complete packet) or low quality 144p or 360p packets(or optimised/compressed/low quality version of a packet) from a stream usually on the basis of user's Internet Connection Bandwidth and/or other factors. Using this track selector we can create an almost ready to run ExoPlayer instance. Let's look into SimpleExoPlayer . At the core of the ExoPlayer library is the Player interface. This is the most powerful interface as it has definations for functions like: isPlayingAd() : weather the player is playing an ad or not. getCurrentAdGroupIndex() : index of current ad group(if ad is being played) getCurrentAdIndexInAdGroup() : index of current ad in current ad group(if ad is being played) getContentDuration() : returns either the total duration of contents(+ the ads) or C.TIME_UNSET (a constant indicating remaining time is unknown) getContentPosition() : position of content from where it will be resumed playing after ads are finished. (if ads aren't playing, will simply return same as getPosition() ) getContentBufferedPosition() : returns an estimate of the content position in the current content window up to which data is buffered, in milliseconds.(if ads aren't playing, will simply return same as getBufferedPosition() ) get/setVolume() getAudioComponent(),getVideoComponent(),MetaDataComponent() // not exactly what you are thinking add/remove audio/videoListener addEventListener(),addErrorListener setPlayWhenRead()/ setRepeatMode()/ seekTo()/ stop()/reset()/ isLoading()/release() getCurrentTrackGroups/getTrackSelections()/geTCurrentManifest() setPlayBackParams() //like speed/pith Instances can be created through ExoPlayerFactory class. SimpleExoPlayer instance is a class which implements Player functions. ExoPlayer exposes traditional high-level media player functionality such as getAudioFormat, getCurrentPositon, getDuration, setVolume, seekTo, setPlayWhenReady, stop and much more. Just like I have mentioned before ExoPlayer uses many components to achieve its modularity and customizability. It delegates work to components which have to be injected when we create and prepare an ExoPlayer instance. The next part is specifying a MediaSource . We have assumed that their will be a video on some server that will be continuously sending us data some large chunks of data packages and our track selector and other libs will download small chuncks of it based on user bandwidth. But there is something missing, something incomplete. How is this continuous stream coming?Where is it coming from? why is it coming automatically and continuously?When and how did it started coming? How is it forever running?Why isn't data getting wasted if packet downloading speed is so fast while streaming speed is slow?Can I listen to the packets being received/decoded/...(whatever are the stages before player starts to render it and user sees it)...? These are good questions that will be obviously answered. But let's first work on our assumptions. Our first assumption is very correct: There IS some server that has our video loaded in it. So our first task would be to inform our app's video handling environment, i.e the exoplayer about it. A {@link Factory} that produces {@link DefaultDataSource} instances that delegate to * {@link DefaultHttpDataSource} s for non-file/asset/content URIs. Your choice of MediaSource is going to depend on the type of media you're trying to play.In this example, we're going to be playing an MP4, so we're going to use an ProgressiveMediaSource which supports formats like MP4, MP3, Matroska, and so on. If you wanted to play Dash or HLS or smooth streaming streams, then you would use the corresponding MediaSources for those different formats.","title":"the Bare Minimmums."},{"location":"tab_blogs/android/exoplayer_p1/#extras","text":"Why exoplayer does not support progress listener: Link According to them, it's the \"client that knows the points at which it wants a position update\". What if the client just wants to listen to the video current position updates? Constantly checking getCurrentPosition (e.g. with the help of Timer().scheduleAtFixedRate) is a very inefficient solution. IMHO, it would be great if ExoPlayer had a specialized method for this, somethings like setCurrentPositionListener which the developers could use to get notified about the video position changes. Since the player manages its own getCurrentPosition property it already knows when to emit onPositionChanged events. The client can only use the polling technique for this: /** // TrackSelector class * The component of an {@link ExoPlayer} responsible for selecting tracks to be consumed by each of * the player's {@link Renderer}s. The {@link DefaultTrackSelector} implementation should be * suitable for most use cases. * * <h3>Interactions with the player</h3> * * The following interactions occur between the player and its track selector during playback. * * <p> * * <ul> * <li>When the player is created it will initialize the track selector by calling {@link * #init(InvalidationListener, BandwidthMeter)}. * <li>When the player needs to make a track selection it will call {@link * #selectTracks(RendererCapabilities[], TrackGroupArray, MediaPeriodId, Timeline)}. This * typically occurs at the start of playback, when the player starts to buffer a new period of * the media being played, and when the track selector invalidates its previous selections. * <li>The player may perform a track selection well in advance of the selected tracks becoming * active, where active is defined to mean that the renderers are actually consuming media * corresponding to the selection that was made. For example when playing media containing * multiple periods, the track selection for a period is made when the player starts to buffer * that period. Hence if the player's buffering policy is to maintain a 30 second buffer, the * selection will occur approximately 30 seconds in advance of it becoming active. In fact the * selection may never become active, for example if the user seeks to some other period of * the media during the 30 second gap. The player indicates to the track selector when a * selection it has previously made becomes active by calling {@link * #onSelectionActivated(Object)}. * <li>If the track selector wishes to indicate to the player that selections it has previously * made are invalid, it can do so by calling {@link * InvalidationListener#onTrackSelectionsInvalidated()} on the {@link InvalidationListener} * that was passed to {@link #init(InvalidationListener, BandwidthMeter)}. A track selector * may wish to do this if its configuration has changed, for example if it now wishes to * prefer audio tracks in a particular language. This will trigger the player to make new * track selections. Note that the player will have to re-buffer in the case that the new * track selection for the currently playing period differs from the one that was invalidated. * </ul> * * <h3>Renderer configuration</h3> * * The {@link TrackSelectorResult} returned by {@link #selectTracks(RendererCapabilities[], * TrackGroupArray, MediaPeriodId, Timeline)} contains not only {@link TrackSelection}s for each * renderer, but also {@link RendererConfiguration}s defining configuration parameters that the * renderers should apply when consuming the corresponding media. Whilst it may seem counter- * intuitive for a track selector to also specify renderer configuration information, in practice * the two are tightly bound together. It may only be possible to play a certain combination tracks * if the renderers are configured in a particular way. Equally, it may only be possible to * configure renderers in a particular way if certain tracks are selected. Hence it makes sense to * determined the track selection and corresponding renderer configurations in a single step. * * <h3>Threading model</h3> * * All calls made by the player into the track selector are on the player's internal playback * thread. The track selector may call {@link InvalidationListener#onTrackSelectionsInvalidated()} * from any thread. */ public abstract class TrackSelector { } ProgressiveMediaSource(a class) extends BaseMediaSource(a class) extends Media Source(an interface) Some code: /** * Provides one period that loads data from a {@link Uri} and extracted using an {@link Extractor}. * * <p>If the possible input stream container formats are known, pass a factory that instantiates * extractors for them to the constructor. Otherwise, pass a {@link DefaultExtractorsFactory} to use * the default extractors. When reading a new stream, the first {@link Extractor} in the array of * extractors created by the factory that returns {@code true} from {@link Extractor#sniff} will be * used to extract samples from the input stream. * * <p>Note that the built-in extractor for FLV streams does not support seeking. */ public final class ProgressiveMediaSource extends BaseMediaSource implements ProgressiveMediaPeriod . Listener { /* Factory for creating instances of ProgressiveMediaSource class, using the extractors provided by {DefaultExtractorsFactory} (OR something else too, idk). */ public static final class Factory implements AdsMediaSource . MediaSourceFactory { ... ... public Factory ( DataSource . Factory dataSourceFactory ) { this ( dataSourceFactory , new DefaultExtractorsFactory ()); } .... } Some more code: /** * Base {@link MediaSource} implementation to handle parallel reuse and to keep a list of {@link * MediaSourceEventListener}s. * * <p>Whenever an implementing subclass needs to provide a new timeline and/or manifest, it must * call {@link #refreshSourceInfo(Timeline, Object)} to notify all listeners. */ public abstract class BaseMediaSource implements MediaSource { private final ArrayList < SourceInfoRefreshListener > sourceInfoListeners ; private final MediaSourceEventListener . EventDispatcher eventDispatcher ; @Nullable private Looper looper ; @Nullable private Timeline timeline ; @Nullable private Object manifest ; public BaseMediaSource () { sourceInfoListeners = new ArrayList <> ( /* initialCapacity= */ 1 ); eventDispatcher = new MediaSourceEventListener . EventDispatcher (); } Even more code: /** * Defines and provides media to be played by an {@link com.google.android.exoplayer2.ExoPlayer}. A * MediaSource has two main responsibilities: * * <ul> * <li>To provide the player with a {@link Timeline} defining the structure of its media, and to * provide a new timeline whenever the structure of the media changes. The MediaSource * provides these timelines by calling {@link SourceInfoRefreshListener#onSourceInfoRefreshed} * on the {@link SourceInfoRefreshListener}s passed to {@link * #prepareSource(SourceInfoRefreshListener, TransferListener)}. * <li>To provide {@link MediaPeriod} instances for the periods in its timeline. MediaPeriods are * obtained by calling {@link #createPeriod(MediaPeriodId, Allocator, long)}, and provide a * way for the player to load and read the media. * </ul> * * All methods are called on the player's internal playback thread, as described in the {@link * com.google.android.exoplayer2.ExoPlayer} Javadoc. They should not be called directly from * application code. Instances can be re-used, but only for one {@link * com.google.android.exoplayer2.ExoPlayer} instance simultaneously. */ public interface MediaSource { /** Listener for source events. */ interface SourceInfoRefreshListener { /** ... }","title":"Extras"},{"location":"tab_blogs/android/exoplayer_p1/#exo-resources","text":"https://android.jlelse.eu/streaming-video-on-android-using-exoplayer-3087d604095 This guy implements basic streaming but has some content that i haven't yet read. https://medium.com/@pawankgupta.se/live-video-streaming-using-exoplayer-2-x-41cc7f9301d6 basic video rendering using HLS http://www.tothenew.com/blog/playing-different-videos-with-exo-player-in-android-tv/ basic exoplayer. might have something new. https://blog.hotstar.com/when-hotstar-met-exoplayer-5b9ea500bd0 : good theory regarding exo https://github.com/Tubitv/TubiPlayer : tubi player : a player build around exoplayer","title":"exo resources :"},{"location":"tab_blogs/android/exoplayer_p1/#non-exo-player-resources","text":"Good article on how video straming woks : 1. https://www.swipetips.com/android-video-streaming-videoview-tutorial/ video view streaming https://instagram-engineering.com/improving-video-playback-on-android-2f6c6a0058d https://medium.com/@onix_systems/rtmp-protocol-enable-instant-video-streaming-for-android-apps-44cd9de6f339 http://www.tothenew.com/blog/adaptive-video-streaming-hls/ very good theory https://medium.com/p/cddc0b1bf764/responses/show (bad , promotional content, but good theory) https://medium.com/@judeosby/creating-a-video-streaming-app-in-android-using-mvvm-rxjava-pagination-library-and-the-normal-e7b120653d19 (good, practical one with github/open source use cases uses deprecated bvp player ) https://www.streamingmedia.com/Default.aspx website on streaming. https://imagen.io/resources/what-are-svod-tvod-avod/ : VOD business jw player : they have implemented everything we want.","title":"non exo player resources"},{"location":"tab_blogs/android/misc_random_learnings/","text":"Miscallanous : Random learnings in android https://android-developers.googleblog.com/2011/11/android-40-graphics-and-animations.html https://source.android.com/devices/graphics/arch-tv.html#surface_or_texture Choosing SurfaceView or TextureView Note: In API 24 and higher, it's recommended to implement SurfaceView instead of TextureView. SurfaceView and TextureView fill similar roles and are both citizens of the view hierarchy. However, SurfaceView and TextureView have different implementations. A SurfaceView takes the same parameters as other views, but SurfaceView contents are transparent when rendered. A TextureView has better alpha and rotation handling than a SurfaceView, but a SurfaceView has performance advantages when compositing UI elements layered over videos. When a client renders with a SurfaceView, the SurfaceView provides the client with a separate composition layer. SurfaceFlinger composes the separate layer as a hardware overlay if supported by the device. When a client renders with a TextureView, the UI toolkit composites the TextureView's content into the view hierarchy with the GPU. Updates to the content may cause other view elements to redraw, for example, if the other views are positioned on top of a TextureView. After view rendering completes, SurfaceFlinger composites the app UI layer and all other layers, so that every visible pixel is composited twice. Note: DRM-protected video can be presented only on an overlay plane. Video players that support protected content must be implemented with SurfaceView https://stackoverflow.com/search?q=%5Bexoplayer%5D+ads An application level media player for Android that supports features not currently provided by MediaPlayer including Dynamic adaptive streaming over HTTP (DASH), SmoothStreaming, and persistent caching. So apparently, media player DOES NOT support dash, smooth streaming, etc","title":"Miscallanous : Random learnings in android"},{"location":"tab_blogs/android/misc_random_learnings/#miscallanous-random-learnings-in-android","text":"https://android-developers.googleblog.com/2011/11/android-40-graphics-and-animations.html https://source.android.com/devices/graphics/arch-tv.html#surface_or_texture Choosing SurfaceView or TextureView Note: In API 24 and higher, it's recommended to implement SurfaceView instead of TextureView. SurfaceView and TextureView fill similar roles and are both citizens of the view hierarchy. However, SurfaceView and TextureView have different implementations. A SurfaceView takes the same parameters as other views, but SurfaceView contents are transparent when rendered. A TextureView has better alpha and rotation handling than a SurfaceView, but a SurfaceView has performance advantages when compositing UI elements layered over videos. When a client renders with a SurfaceView, the SurfaceView provides the client with a separate composition layer. SurfaceFlinger composes the separate layer as a hardware overlay if supported by the device. When a client renders with a TextureView, the UI toolkit composites the TextureView's content into the view hierarchy with the GPU. Updates to the content may cause other view elements to redraw, for example, if the other views are positioned on top of a TextureView. After view rendering completes, SurfaceFlinger composites the app UI layer and all other layers, so that every visible pixel is composited twice. Note: DRM-protected video can be presented only on an overlay plane. Video players that support protected content must be implemented with SurfaceView https://stackoverflow.com/search?q=%5Bexoplayer%5D+ads An application level media player for Android that supports features not currently provided by MediaPlayer including Dynamic adaptive streaming over HTTP (DASH), SmoothStreaming, and persistent caching. So apparently, media player DOES NOT support dash, smooth streaming, etc","title":"Miscallanous : Random learnings in android"},{"location":"tab_blogs/android/mobile_ads_1/","text":"The World of mobile ads (Part1) Disclaimer: The below article is very crude and mostly a collection of ideas and intutions. I might formalise and verify my guesses someday, but until then, its just a collection of thoughts i felt during working with IMA Ads SDK and some non verified internet comments . After working as an intern for a month, i can't tell you how much am excited to write about this stuff, its so cool! I can't write the whole article right now, but here are some parts of it. data is a trillion doller indusry and ads are the no. 1 source of data, and therefore ads are the source of revenue for 80% of the businesses. But mobile industry has seen a particular downfall of Ads. people don't like clicking on ads now. the banner ads in android have been found out to be least clickable areas of an app in numerous studies . Native ads are the future. Native ads are.. todo ................. How IMA works with a video player? First we should talk about videos and video view in android . We know that in Android, a VideoView is a component that plays video. how it plays videos? well there are 4 types of video rendering, as i see them : Static Offline Video Rendering : There is a video on user's device,the player simply opens an input stream and starts rendering bitstream on a view Static Online Video Rendering : there is a video present on some server, the player downloads data in small chunks, stores them in cache, play them accordingly and then clears cache. It includes many type of fetching and caching techniques and these techniques are applied to offline static video rendering too, for better results.(Although none of those optimisation settings are provided by the VideoView in default) Dynamic Offline Video Rendering(or video recording) : video is being rendered as soon as input is received from a camera sensor. This would not be technically called a video \"rendering\", because it is not controllable to start/pause/forward/reverse the playback. we just press the button to start recording the rendered bits, i.e at the press of a button, the rendered bits will also start getting saved to a file. Dynamic online video rendering(or video streaming) : A camera app or software is present somewhere in a user's mobile that is uploading image bits at runtime to some server, which passes it as response to millions of user devices in a fraction of second, and which these device render immediately . Most video streamer apps provide a rewind option like youtube, but some do not, like instagram. There are a lot of components involved in there too : infact, the whole \"renderer\" called Media Player is a different thing which sends bitmaps to a view called surface view . other things are buffers and buffer sizes, adaptive downloading, network loss handling, cache cleaning,etc. i will cover these ina seperate article on video_view and exoplayer respectively. Back to ads So where were we? yeah, video ads .video Ads are rendered in a unique mechanism : the most famous video ad sdk is the ima sdk , which will work alongside your video player to play ads like those you see on youtube: startroll ads: small ads that plays before the content plays midroll ads : small ads that play in between the content playback endroll ads : small ads that play at the end of content playback. ad-list : group of small ads in which consequtive ads starts as soon as the previous ad ended. can be start/mid/endroll skippable/non skippable ads : long ads, but with/without a skip button, can be startroll/midroll/enndroll/ad-list. The playing of an ad on paper looks simple : there is an advideo/ list of advideos, simply when the video reaches a particular time, pause the video, start playing ads & then resume the video. But here is when the real stuff begins: Question 1 how can a video player be able to change its playing stream in between? suppose it was previously playing a video for 60 seconds and then you wanna show an ad. How can you change its bitstream that is already loading(as i explained in the point about video players above)? Solution So that's either not possible or i couldn't find it, but what i found a solution to this was that Ads are actually displayed over a video_view, not inside it . yes!, the parent view of your video player view will becomea kind of video player itself and the surface would use to play ad videos, while your content video remains hidden and paused into background Question 2 <some question i had but forgot> Solution <some answer i might but forgot> Question 3 How will streaming of ad work? Will we be loading ads just like we load content video? Solution. Well, yes, and no. let's look at some ad based terms: VAST(Video Ad Serving Template) TAG is standard response from any server with an ad video. Sending a req to this vast based server will send you an xml response with url to the advideo. And your video player can then simply start showing ads immediately or at a particular time instance of your choice(that is ofcourse if you have a client side code for creating and rendering an ad above current player and fortunely most of it is done by ima sdk, you just need to implement their partially visible code for that) VMAP (Video Multiple Ad Playlist) : are list of vast ads but with even more information like at whatt time each vast ad/ vast ad-group will run. A VMAP based server will also return an xml having urls of vast tag along with timestamps about which url to load ad from and at what time. This is also handled by ima sdk and its extensions and we just need to integrate it VPAID ads are based on a small lie of mine: a VAST ad does not always necessarily contain video urls but sometimes a js function called vpaid is also present. in web dev, this function is suppose to run directly on the clients machine and shows ads but it does not seem to work in mobile version of the ima sdk. So let me come to the topic that should be a little above current content: what are adevrtisements? what is google ads? why google has so many ad services ? what is the category of people that interact with what part of each service? what is IMA? what part from the company that wants to show ads to a particular app to the company that actually makes those ads to the rendering handling components to the aapps/websites that will be showing ads to the users wathing and clicking ads to the trackers to everyone , who benefit from this. So here , IMA sdk for android fails in mysterious ways: \"ima sdk exoplayer-extension for android\" fails because it is very limited and black boxed. It only works with vmap, handles all the stuff on its own and not even sends any callbacks.(As per my knowledge) \"ima sdk (library) for android\" is a little flexible, allowing both vast tags and handling of vmap but it still won't allow vpaid ads. these vpaid ads are officially not supported for android sdk, but supported for html 5 sdk. plus we loose all those optimisation features of exoplayer if that's acceptable.","title":"The World of mobile ads (Part1)"},{"location":"tab_blogs/android/mobile_ads_1/#the-world-of-mobile-ads-part1","text":"Disclaimer: The below article is very crude and mostly a collection of ideas and intutions. I might formalise and verify my guesses someday, but until then, its just a collection of thoughts i felt during working with IMA Ads SDK and some non verified internet comments . After working as an intern for a month, i can't tell you how much am excited to write about this stuff, its so cool! I can't write the whole article right now, but here are some parts of it. data is a trillion doller indusry and ads are the no. 1 source of data, and therefore ads are the source of revenue for 80% of the businesses. But mobile industry has seen a particular downfall of Ads. people don't like clicking on ads now. the banner ads in android have been found out to be least clickable areas of an app in numerous studies . Native ads are the future. Native ads are.. todo .................","title":"The World of mobile ads (Part1)"},{"location":"tab_blogs/android/mobile_ads_1/#how-ima-works-with-a-video-player","text":"First we should talk about videos and video view in android . We know that in Android, a VideoView is a component that plays video. how it plays videos? well there are 4 types of video rendering, as i see them : Static Offline Video Rendering : There is a video on user's device,the player simply opens an input stream and starts rendering bitstream on a view Static Online Video Rendering : there is a video present on some server, the player downloads data in small chunks, stores them in cache, play them accordingly and then clears cache. It includes many type of fetching and caching techniques and these techniques are applied to offline static video rendering too, for better results.(Although none of those optimisation settings are provided by the VideoView in default) Dynamic Offline Video Rendering(or video recording) : video is being rendered as soon as input is received from a camera sensor. This would not be technically called a video \"rendering\", because it is not controllable to start/pause/forward/reverse the playback. we just press the button to start recording the rendered bits, i.e at the press of a button, the rendered bits will also start getting saved to a file. Dynamic online video rendering(or video streaming) : A camera app or software is present somewhere in a user's mobile that is uploading image bits at runtime to some server, which passes it as response to millions of user devices in a fraction of second, and which these device render immediately . Most video streamer apps provide a rewind option like youtube, but some do not, like instagram. There are a lot of components involved in there too : infact, the whole \"renderer\" called Media Player is a different thing which sends bitmaps to a view called surface view . other things are buffers and buffer sizes, adaptive downloading, network loss handling, cache cleaning,etc. i will cover these ina seperate article on video_view and exoplayer respectively.","title":"How IMA works with a video player?"},{"location":"tab_blogs/android/mobile_ads_1/#back-to-ads","text":"So where were we? yeah, video ads .video Ads are rendered in a unique mechanism : the most famous video ad sdk is the ima sdk , which will work alongside your video player to play ads like those you see on youtube: startroll ads: small ads that plays before the content plays midroll ads : small ads that play in between the content playback endroll ads : small ads that play at the end of content playback. ad-list : group of small ads in which consequtive ads starts as soon as the previous ad ended. can be start/mid/endroll skippable/non skippable ads : long ads, but with/without a skip button, can be startroll/midroll/enndroll/ad-list. The playing of an ad on paper looks simple : there is an advideo/ list of advideos, simply when the video reaches a particular time, pause the video, start playing ads & then resume the video. But here is when the real stuff begins:","title":"Back to ads"},{"location":"tab_blogs/android/mobile_ads_1/#question-1","text":"how can a video player be able to change its playing stream in between? suppose it was previously playing a video for 60 seconds and then you wanna show an ad. How can you change its bitstream that is already loading(as i explained in the point about video players above)?","title":"Question 1"},{"location":"tab_blogs/android/mobile_ads_1/#solution","text":"So that's either not possible or i couldn't find it, but what i found a solution to this was that Ads are actually displayed over a video_view, not inside it . yes!, the parent view of your video player view will becomea kind of video player itself and the surface would use to play ad videos, while your content video remains hidden and paused into background","title":"Solution"},{"location":"tab_blogs/android/mobile_ads_1/#question-2","text":"<some question i had but forgot>","title":"Question 2"},{"location":"tab_blogs/android/mobile_ads_1/#solution_1","text":"<some answer i might but forgot>","title":"Solution"},{"location":"tab_blogs/android/mobile_ads_1/#question-3","text":"How will streaming of ad work? Will we be loading ads just like we load content video?","title":"Question 3"},{"location":"tab_blogs/android/mobile_ads_1/#solution_2","text":"Well, yes, and no. let's look at some ad based terms: VAST(Video Ad Serving Template) TAG is standard response from any server with an ad video. Sending a req to this vast based server will send you an xml response with url to the advideo. And your video player can then simply start showing ads immediately or at a particular time instance of your choice(that is ofcourse if you have a client side code for creating and rendering an ad above current player and fortunely most of it is done by ima sdk, you just need to implement their partially visible code for that) VMAP (Video Multiple Ad Playlist) : are list of vast ads but with even more information like at whatt time each vast ad/ vast ad-group will run. A VMAP based server will also return an xml having urls of vast tag along with timestamps about which url to load ad from and at what time. This is also handled by ima sdk and its extensions and we just need to integrate it VPAID ads are based on a small lie of mine: a VAST ad does not always necessarily contain video urls but sometimes a js function called vpaid is also present. in web dev, this function is suppose to run directly on the clients machine and shows ads but it does not seem to work in mobile version of the ima sdk. So let me come to the topic that should be a little above current content: what are adevrtisements? what is google ads? why google has so many ad services ? what is the category of people that interact with what part of each service? what is IMA? what part from the company that wants to show ads to a particular app to the company that actually makes those ads to the rendering handling components to the aapps/websites that will be showing ads to the users wathing and clicking ads to the trackers to everyone , who benefit from this. So here , IMA sdk for android fails in mysterious ways: \"ima sdk exoplayer-extension for android\" fails because it is very limited and black boxed. It only works with vmap, handles all the stuff on its own and not even sends any callbacks.(As per my knowledge) \"ima sdk (library) for android\" is a little flexible, allowing both vast tags and handling of vmap but it still won't allow vpaid ads. these vpaid ads are officially not supported for android sdk, but supported for html 5 sdk. plus we loose all those optimisation features of exoplayer if that's acceptable.","title":"Solution."},{"location":"tab_blogs/android/pia_intro/","text":"Patterns in android : Introduction Okay, I have had enough of this! Since last 2 years of Android dev life , I have been hearing stuff like \"this repo uses MVVM architecture, observer pattern, MVP ,MVC, CLEAN, architecture pattern, repository pattern, pattern,pattern....\" and it goes on and on. I have to work on this someday coz people consider an app's code without these \"Patterns\" as bad, coupled and non expandable. And they are right i considering that, These patterns are iportant if we wanna right professional softwares. So let's get started. I am going to follow straight wikipedia for learning about these patterns in general, and then relating them with how much is used in android. I was hoping to write a single all in one article for everything about patterns, but looks like there are a lot of them , so i already changed this article's title to \"Patterns in android : Introduction\" (indicating a possible sequel) from \"All about Patterns\"(\"indicating an overview\"). For each \"pattern\", i don't know what am going to write, but i would possiby try to add summarized information regarding how could it be addded in an app, possible advantages/disadvantages and use cases. I am also thiking of dedicating seperate articles for adavnce usages,best practises, optimisations and more examples for each pattern, but let's see how long it goes. Introduction wiki. In software engineering, a Software design pattern or simply a Pattern is a general,reusable solution to a common problem.Note that by defination, design patterns are not direct code but just a description/template , a set of best practises on how to solve a problem that can be used in many different situations. wiki Architectural patterns are similar to software design patterns but have a broader scope. The architectural patterns address various issues in software engineering, such as computer hardware performance limitations, high availability and minimization of a business risk. Some architectural patterns have been implemented within software frameworks. github link with lots of books Patterns were first defined by Christopher Alexander in 1977-78. These Design patterns were originally grouped into the categories: - creational patterns, - structural patterns, and - behavioral patterns, and described using the concepts of delegation, aggregation, and consultation. Creational Design Patterns Name Description Abstract factory Pattern Provide an interface for creating families of related or dependent objects without specifying their concrete classes. Builder Pattern Separate the construction of a complex object from its representation, allowing the same construction process to create various representations. Dependency Injection A class accepts the objects it requires from an injector instead of creating(and handling??) the objects directly. Factory method Define an interface for creating a single object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses Lazy initialization Tactic of delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed. This pattern appears in the GoF catalog as \"virtual proxy\", an implementation strategy for the Proxy pattern. Multiton Ensure a class has only named instances, and provide a global point of access to them Object pool Avoid expensive acquisition and release of resources by recycling objects that are no longer in use. Can be considered a generalisation of connection pool and thread pool patterns. Prototype Specify the kinds of objects to create using a prototypical instance, and create new objects from the 'skeleton' of an existing object, thus boosting performance and keeping memory footprints to a minimum. Resource acquisition is initialization (RAII) Ensure that resources are properly released by tying them to the lifespan of suitable objects. Singleton Ensure a class has only one instance, and provide a global point of access to it Structural patterns Name Description Adapter, Wrapper, or Translator Convert the interface of a class into another interface clients expect. An adapter lets classes work together that could not otherwise because of incompatible interfaces. The enterprise integration pattern equivalent is the translator Bridge Decouple an abstraction from its implementation allowing the two to vary independently. Composite Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly. Decorator Attach additional responsibilities to an object dynamically keeping the same interface. Decorators provide a flexible alternative to subclassing for extending functionality. Extension Object Adding functionality to a hierarchy without changing the hierarchy. Facade Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use. Flyweight Use sharing to support large numbers of similar objects efficiently Front Controller The pattern relates to the design of Web applications. It provides a centralized entry point for handling requests. Marker Empty interface to associate metadata with a class. Module Group several related elements, such as classes, singletons, methods, globally used, into a single conceptual entity Proxy Provide a surrogate or placeholder for another object to control access to it. Twin Twin allows modeling of multiple inheritance in programming languages that do not support this feature. Behavioral Patterns Name Description Blackboard/Blackboard System Artificial intelligence pattern for combining disparate sources of data (see blackboard system) Chain of responsibility Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it. Command Encapsulate a request as an object, thereby allowing for the parameterization of clients with different requests, and the queuing or logging of requests. It also allows for the support of undoable operations. Interpreter Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language. Iterator Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation Mediator Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it allows their interaction to vary independently. Memento Without violating encapsulation, capture and externalize an object's internal state allowing the object to be restored to this state later. Null Object Avoid null references by providing a default object. Observer or Publisher-Subscriber pattern Define a one-to-many dependency between objects where a state change in one object results in all its dependents being notified and updated automatically Servant/Utility class Pattern Define common functionality for a group of classes. The servant pattern is also frequently called helper class or utility class implementation for a given set of classes. The helper classes generally have no objects hence they have all static methods that act upon different kinds of class objects Specification Recombinable business logic in a Boolean fashion. State Allow an object to alter its behavior when its internal state changes. The object will appear to change its class. Strategy Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it Template method Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure Visitor Represent an operation to be performed on the elements of an object structure. Visitor lets a new operation be defined without changing the classes of the elements on which it operates Concurrency Patterns Name Description Active Object Decouples method execution from method invocation that reside in their own thread of control. The goal is to introduce concurrency, by using asynchronous method invocation and a scheduler for handling requests Balking Only execute an action on an object when the object is in a particular state. Binding Properties Combining multiple observers to force properties in different objects to be synchronized or coordinated in some way. Compute kernel The same calculation many times in parallel, differing by integer parameters used with non-branching pointer math into shared arrays, such as GPU-optimized Matrix multiplication or Convolutional neural network. Double-checked locking Reduce the overhead of acquiring a lock by first testing the locking criterion (the 'lock hint') in an unsafe manner; only if that succeeds does the actual locking logic proceed. Can be unsafe when implemented in some language/hardware combinations. It can therefore sometimes be considered an anti-pattern. Event-based Asynchronous Addresses problems with the asynchronous pattern that occur in multithreaded programs Guarded Suspension Manages operations that require both a lock to be acquired and a precondition to be satisfied before the operation can be executed Join Join-pattern provides a way to write concurrent, parallel and distributed programs by message passing. Compared to the use of threads and locks, this is a high-level programming model. Lock One thread puts a \"lock\" on a resource, preventing other threads from accessing or modifying it Messaging design Pattern(MDP) Allows the interchange of information (i.e. messages) between components and applications. Monitor Object An object whose methods are subject to mutual exclusion, thus preventing multiple objects from erroneously trying to use it at the same time. Reactor A reactor object provides an asynchronous interface to resources that must be handled synchronously. Read-Write Lock Allows concurrent read access to an object, but requires exclusive access for write operations. Scheduler Explicitly control when threads may execute single-threaded code. Thread Pool A number of threads are created to perform a number of tasks, which are usually organized in a queue. Typically, there are many more tasks than threads. Can be considered a special case of the object pool pattern. Thread speciefic storage Static or \"global\" memory local to a thread. Other than these design pattern, there are architeture patterns, which, as we said earlier cover a broader scope than a design pattern. They are meant to be best practises for whole product or module, So they often encapsulates multiple design patterns. Their are many architecture patterns out there based onthe domains it is being used, wiki covers them in great detail . Personally I would rather have a new entry being added to this table in Domain named \"Application Design and Development\" with Architecture patterns like: - MV* Family(MVP/MVC/MVVM/MVI/CLEAN) - JetPack's Navigation Architecture And lifecycle classes - Kotlin's coroutie pattern - The Repository pattern - Reactive, offline first app pattern The same book documents patterns based on following nomenclature: Pattern Name and Classification : A descriptive and unique name that helps in identifying and referring to the pattern. Intent : A description of the goal behind the pattern and the reason for using it. Also Known As : Other names for the pattern. Motivation (Forces) : A scenario consisting of a problem and a context in which this pattern can be used. Applicability : Situations in which this pattern is usable; the context for the pattern. Structure : A graphical representation of the pattern. Class diagrams and Interaction diagrams may be used for this purpose. Participants : A listing of the classes and objects used in the pattern and their roles in the design. Collaboration : A description of how classes and objects used in the pattern interact with each other. Consequences : A description of the results, side effects, and trade offs caused by using the pattern. Implementation : A description of an implementation of the pattern; the solution part of the pattern. Sample Code : An illustration of how the pattern can be used in a programming language. Known Uses : Examples of real usages of the pattern. Related Patterns : Other patterns that have some relationship with the pattern; discussion of the differences between the pattern and similar patterns. So i will be covering them in this manner only. Ciao","title":"Patterns  in android : Introduction"},{"location":"tab_blogs/android/pia_intro/#patterns-in-android-introduction","text":"Okay, I have had enough of this! Since last 2 years of Android dev life , I have been hearing stuff like \"this repo uses MVVM architecture, observer pattern, MVP ,MVC, CLEAN, architecture pattern, repository pattern, pattern,pattern....\" and it goes on and on. I have to work on this someday coz people consider an app's code without these \"Patterns\" as bad, coupled and non expandable. And they are right i considering that, These patterns are iportant if we wanna right professional softwares. So let's get started. I am going to follow straight wikipedia for learning about these patterns in general, and then relating them with how much is used in android. I was hoping to write a single all in one article for everything about patterns, but looks like there are a lot of them , so i already changed this article's title to \"Patterns in android : Introduction\" (indicating a possible sequel) from \"All about Patterns\"(\"indicating an overview\"). For each \"pattern\", i don't know what am going to write, but i would possiby try to add summarized information regarding how could it be addded in an app, possible advantages/disadvantages and use cases. I am also thiking of dedicating seperate articles for adavnce usages,best practises, optimisations and more examples for each pattern, but let's see how long it goes.","title":"Patterns  in android : Introduction"},{"location":"tab_blogs/android/pia_intro/#introduction","text":"wiki. In software engineering, a Software design pattern or simply a Pattern is a general,reusable solution to a common problem.Note that by defination, design patterns are not direct code but just a description/template , a set of best practises on how to solve a problem that can be used in many different situations. wiki Architectural patterns are similar to software design patterns but have a broader scope. The architectural patterns address various issues in software engineering, such as computer hardware performance limitations, high availability and minimization of a business risk. Some architectural patterns have been implemented within software frameworks. github link with lots of books Patterns were first defined by Christopher Alexander in 1977-78. These Design patterns were originally grouped into the categories: - creational patterns, - structural patterns, and - behavioral patterns, and described using the concepts of delegation, aggregation, and consultation.","title":"Introduction"},{"location":"tab_blogs/android/pia_intro/#creational-design-patterns","text":"Name Description Abstract factory Pattern Provide an interface for creating families of related or dependent objects without specifying their concrete classes. Builder Pattern Separate the construction of a complex object from its representation, allowing the same construction process to create various representations. Dependency Injection A class accepts the objects it requires from an injector instead of creating(and handling??) the objects directly. Factory method Define an interface for creating a single object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses Lazy initialization Tactic of delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed. This pattern appears in the GoF catalog as \"virtual proxy\", an implementation strategy for the Proxy pattern. Multiton Ensure a class has only named instances, and provide a global point of access to them Object pool Avoid expensive acquisition and release of resources by recycling objects that are no longer in use. Can be considered a generalisation of connection pool and thread pool patterns. Prototype Specify the kinds of objects to create using a prototypical instance, and create new objects from the 'skeleton' of an existing object, thus boosting performance and keeping memory footprints to a minimum. Resource acquisition is initialization (RAII) Ensure that resources are properly released by tying them to the lifespan of suitable objects. Singleton Ensure a class has only one instance, and provide a global point of access to it","title":"Creational Design Patterns"},{"location":"tab_blogs/android/pia_intro/#structural-patterns","text":"Name Description Adapter, Wrapper, or Translator Convert the interface of a class into another interface clients expect. An adapter lets classes work together that could not otherwise because of incompatible interfaces. The enterprise integration pattern equivalent is the translator Bridge Decouple an abstraction from its implementation allowing the two to vary independently. Composite Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly. Decorator Attach additional responsibilities to an object dynamically keeping the same interface. Decorators provide a flexible alternative to subclassing for extending functionality. Extension Object Adding functionality to a hierarchy without changing the hierarchy. Facade Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use. Flyweight Use sharing to support large numbers of similar objects efficiently Front Controller The pattern relates to the design of Web applications. It provides a centralized entry point for handling requests. Marker Empty interface to associate metadata with a class. Module Group several related elements, such as classes, singletons, methods, globally used, into a single conceptual entity Proxy Provide a surrogate or placeholder for another object to control access to it. Twin Twin allows modeling of multiple inheritance in programming languages that do not support this feature.","title":"Structural patterns"},{"location":"tab_blogs/android/pia_intro/#behavioral-patterns","text":"Name Description Blackboard/Blackboard System Artificial intelligence pattern for combining disparate sources of data (see blackboard system) Chain of responsibility Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it. Command Encapsulate a request as an object, thereby allowing for the parameterization of clients with different requests, and the queuing or logging of requests. It also allows for the support of undoable operations. Interpreter Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language. Iterator Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation Mediator Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it allows their interaction to vary independently. Memento Without violating encapsulation, capture and externalize an object's internal state allowing the object to be restored to this state later. Null Object Avoid null references by providing a default object. Observer or Publisher-Subscriber pattern Define a one-to-many dependency between objects where a state change in one object results in all its dependents being notified and updated automatically Servant/Utility class Pattern Define common functionality for a group of classes. The servant pattern is also frequently called helper class or utility class implementation for a given set of classes. The helper classes generally have no objects hence they have all static methods that act upon different kinds of class objects Specification Recombinable business logic in a Boolean fashion. State Allow an object to alter its behavior when its internal state changes. The object will appear to change its class. Strategy Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it Template method Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure Visitor Represent an operation to be performed on the elements of an object structure. Visitor lets a new operation be defined without changing the classes of the elements on which it operates","title":"Behavioral Patterns"},{"location":"tab_blogs/android/pia_intro/#concurrency-patterns","text":"Name Description Active Object Decouples method execution from method invocation that reside in their own thread of control. The goal is to introduce concurrency, by using asynchronous method invocation and a scheduler for handling requests Balking Only execute an action on an object when the object is in a particular state. Binding Properties Combining multiple observers to force properties in different objects to be synchronized or coordinated in some way. Compute kernel The same calculation many times in parallel, differing by integer parameters used with non-branching pointer math into shared arrays, such as GPU-optimized Matrix multiplication or Convolutional neural network. Double-checked locking Reduce the overhead of acquiring a lock by first testing the locking criterion (the 'lock hint') in an unsafe manner; only if that succeeds does the actual locking logic proceed. Can be unsafe when implemented in some language/hardware combinations. It can therefore sometimes be considered an anti-pattern. Event-based Asynchronous Addresses problems with the asynchronous pattern that occur in multithreaded programs Guarded Suspension Manages operations that require both a lock to be acquired and a precondition to be satisfied before the operation can be executed Join Join-pattern provides a way to write concurrent, parallel and distributed programs by message passing. Compared to the use of threads and locks, this is a high-level programming model. Lock One thread puts a \"lock\" on a resource, preventing other threads from accessing or modifying it Messaging design Pattern(MDP) Allows the interchange of information (i.e. messages) between components and applications. Monitor Object An object whose methods are subject to mutual exclusion, thus preventing multiple objects from erroneously trying to use it at the same time. Reactor A reactor object provides an asynchronous interface to resources that must be handled synchronously. Read-Write Lock Allows concurrent read access to an object, but requires exclusive access for write operations. Scheduler Explicitly control when threads may execute single-threaded code. Thread Pool A number of threads are created to perform a number of tasks, which are usually organized in a queue. Typically, there are many more tasks than threads. Can be considered a special case of the object pool pattern. Thread speciefic storage Static or \"global\" memory local to a thread. Other than these design pattern, there are architeture patterns, which, as we said earlier cover a broader scope than a design pattern. They are meant to be best practises for whole product or module, So they often encapsulates multiple design patterns. Their are many architecture patterns out there based onthe domains it is being used, wiki covers them in great detail . Personally I would rather have a new entry being added to this table in Domain named \"Application Design and Development\" with Architecture patterns like: - MV* Family(MVP/MVC/MVVM/MVI/CLEAN) - JetPack's Navigation Architecture And lifecycle classes - Kotlin's coroutie pattern - The Repository pattern - Reactive, offline first app pattern The same book documents patterns based on following nomenclature: Pattern Name and Classification : A descriptive and unique name that helps in identifying and referring to the pattern. Intent : A description of the goal behind the pattern and the reason for using it. Also Known As : Other names for the pattern. Motivation (Forces) : A scenario consisting of a problem and a context in which this pattern can be used. Applicability : Situations in which this pattern is usable; the context for the pattern. Structure : A graphical representation of the pattern. Class diagrams and Interaction diagrams may be used for this purpose. Participants : A listing of the classes and objects used in the pattern and their roles in the design. Collaboration : A description of how classes and objects used in the pattern interact with each other. Consequences : A description of the results, side effects, and trade offs caused by using the pattern. Implementation : A description of an implementation of the pattern; the solution part of the pattern. Sample Code : An illustration of how the pattern can be used in a programming language. Known Uses : Examples of real usages of the pattern. Related Patterns : Other patterns that have some relationship with the pattern; discussion of the differences between the pattern and similar patterns. So i will be covering them in this manner only. Ciao","title":"Concurrency Patterns"},{"location":"tab_blogs/android/basics/af1_the_architecture/","text":"Android Fundamentals : Part 1 ,The architecture # Android Fundamentals : Part 2 ,The application components So Before getting into advance stuff, i need to get my mind off the basics . These were done by me so long ago, that i have forgotten most of the theory part of it and have got the practical part of it as unconsious reflexes reflex. We write apps in java,kotlin,dart,..etc in many languages. But before even writing, when we create a new project, a lot of stuff gets automatically generated. So what are these things ? Why are they created? which of those files are necessary? What is their use? why I get an Appcompat- extended Activity class when beginning an app? Why so many xml folders ? what is gradle? How are they all combining to make an apk that file? how is this apk being run by my system? how are these apk apps able to interact with my hardware, like camera and stuff? How do android maintains contacts, sms , media files and other stuff that can be viewed by so many apps? where is the security in it? Whe- phew! Take a break mr curious! They are a hell lot of questions which we will be covering in detail. Let's try covering them part by part. Architecture. If you ask me How a mobile works, then the most crude defination will simply be \"Power is connected to hardware, firmwares and switches. when pressed a hardware button, the battery starts giving power to firmware having a software bootloader. The bootloader loads the software and then the software controls everything\" ( That's pretty much defination of every OS based device system ). So, aside from a little stuff about hardware, bootloader, firmware and circuits, the Software is pretty much the main thing. And that's what Android is: the OS for mobiles. To know more about How this single thing , \"Android OS\" is able to handle everything so gracefully, We have to first learn about its architecture. A simple analogy will be that of a human: \"How Newton is able to think about gravity?\". Well, his heart pumbed blood to his brain and eyes, his eyes saw apple falling,his nerves send that stimulus to brain, his brain proceeded ...\"and that's how he thought of gravity\" . Even though this is not the right answer, it is technically correct: this was the actual procedure on how any human would think. Te correct answer would be \"He was a skilled man with a great ackquired knowledge, he got tinto a correct interesting environment and automatically got an idea\" . This is so much like an app! You are not required to understand a deep architecture of OS to make an app, infact you could just have a comfortable environment setup completely by android studio, build everything by modules , generators and libraries and you just pressing the build button. But of you do, you might make a better more optimised app. So let\u2019s start with this only, What is an architecture? (Note: This entire article(after the tldr) below is copied from deepam goel's amazing article , which i cannot explain any better. ) So any software or system is based on some set of components that work together to accomplish some certain task or to perform some specific function. This is a vast topic and without discussing much about it lets see what components Android is made up of and how they all work together to make things happen. What are Android OS Components? Android OS is based on the stack of 5 main components, viz: 1. System Applications 2. Application Framework 3. Libraries 4. Android Runtime 5. Hardware Abstraction Layer (HAL) 6. Linux Kernel Application ( more info ) These are the application that we all make and use. They reside on the topmost layer of Android Architecture. Application Framework ( more info ) The Application Framework layer provides many higher-level services to applications in the form of Java classes and also contains other APIs. Application developers are allowed to make use of these services in their applications. Libraries ( more info ) Above Linux kernel, there is a set of libraries including open-source Web browser engine WebKit, well-known library libc, SQLite database, libraries to play and record audio and video, SSL libraries responsible for Internet security etc. All Java based libraries that are needed for building Android app also resides here. Android Runtime ( more info ) This portion contains one of the most important components Dalvik Virtual Machine, DVM. This is a kind of JVM that is specially optimized and made for Android. It enables every android app to run its own process which enables us to run many applications at same time. It basically converts .java file into .Dex format. Hardware Abstraction Layer (HAL) ( more info ) A HAL defines a standard interface for hardware vendors to implement, which enables Android to be agnostic about lower-level driver implementations. Using a HAL allows you to implement functionality without affecting or modifying the higher level system. HAL implementations are packaged into modules and loaded by the Android system at the appropriate time. Linux Kernel ( more info ) Kernel is core of any OS. The Linux Kernel sits at the bottom of Android architecture. The Android platform is built on top of the Linux 2.6 Kernel. The Linux Kernel provides support for many features like memory management, security management, process management, and device management etc. It also contains all the driver that helps Android device to communicate with other hardware devices. Note DVM was officially replaced by Android Run Time, ART in Lollipop version. It has many advantages over DVM. To know more about ART, Check this post . Other references - Ref1 : good look at linux architecture on which android architecture is based upon. Ref2 : good link with similar content but in more detail(i also downloaded a pdf of it with name [Android] android_architecture.pdf ) Ref3 : same content in a video. Ref4 : HAL, Ref5 : ART Ref6 General info about android(added this link because it has got specific more info on other aspects of android like apk, bundles, system updates, etc) Ref7 : video on android Security Ref8 : Linus torvalds on linux","title":"Part1, The Architecture"},{"location":"tab_blogs/android/basics/af1_the_architecture/#android-fundamentals-part-1-the-architecture","text":"# Android Fundamentals : Part 2 ,The application components So Before getting into advance stuff, i need to get my mind off the basics . These were done by me so long ago, that i have forgotten most of the theory part of it and have got the practical part of it as unconsious reflexes reflex. We write apps in java,kotlin,dart,..etc in many languages. But before even writing, when we create a new project, a lot of stuff gets automatically generated. So what are these things ? Why are they created? which of those files are necessary? What is their use? why I get an Appcompat- extended Activity class when beginning an app? Why so many xml folders ? what is gradle? How are they all combining to make an apk that file? how is this apk being run by my system? how are these apk apps able to interact with my hardware, like camera and stuff? How do android maintains contacts, sms , media files and other stuff that can be viewed by so many apps? where is the security in it? Whe- phew! Take a break mr curious! They are a hell lot of questions which we will be covering in detail. Let's try covering them part by part.","title":"Android Fundamentals : Part 1 ,The architecture"},{"location":"tab_blogs/android/basics/af1_the_architecture/#architecture","text":"If you ask me How a mobile works, then the most crude defination will simply be \"Power is connected to hardware, firmwares and switches. when pressed a hardware button, the battery starts giving power to firmware having a software bootloader. The bootloader loads the software and then the software controls everything\" ( That's pretty much defination of every OS based device system ). So, aside from a little stuff about hardware, bootloader, firmware and circuits, the Software is pretty much the main thing. And that's what Android is: the OS for mobiles. To know more about How this single thing , \"Android OS\" is able to handle everything so gracefully, We have to first learn about its architecture. A simple analogy will be that of a human: \"How Newton is able to think about gravity?\". Well, his heart pumbed blood to his brain and eyes, his eyes saw apple falling,his nerves send that stimulus to brain, his brain proceeded ...\"and that's how he thought of gravity\" . Even though this is not the right answer, it is technically correct: this was the actual procedure on how any human would think. Te correct answer would be \"He was a skilled man with a great ackquired knowledge, he got tinto a correct interesting environment and automatically got an idea\" . This is so much like an app! You are not required to understand a deep architecture of OS to make an app, infact you could just have a comfortable environment setup completely by android studio, build everything by modules , generators and libraries and you just pressing the build button. But of you do, you might make a better more optimised app. So let\u2019s start with this only, What is an architecture? (Note: This entire article(after the tldr) below is copied from deepam goel's amazing article , which i cannot explain any better. ) So any software or system is based on some set of components that work together to accomplish some certain task or to perform some specific function. This is a vast topic and without discussing much about it lets see what components Android is made up of and how they all work together to make things happen. What are Android OS Components? Android OS is based on the stack of 5 main components, viz: 1. System Applications 2. Application Framework 3. Libraries 4. Android Runtime 5. Hardware Abstraction Layer (HAL) 6. Linux Kernel","title":"Architecture."},{"location":"tab_blogs/android/basics/af1_the_architecture/#application","text":"( more info ) These are the application that we all make and use. They reside on the topmost layer of Android Architecture.","title":"Application"},{"location":"tab_blogs/android/basics/af1_the_architecture/#application-framework","text":"( more info ) The Application Framework layer provides many higher-level services to applications in the form of Java classes and also contains other APIs. Application developers are allowed to make use of these services in their applications.","title":"Application Framework"},{"location":"tab_blogs/android/basics/af1_the_architecture/#libraries","text":"( more info ) Above Linux kernel, there is a set of libraries including open-source Web browser engine WebKit, well-known library libc, SQLite database, libraries to play and record audio and video, SSL libraries responsible for Internet security etc. All Java based libraries that are needed for building Android app also resides here.","title":"Libraries"},{"location":"tab_blogs/android/basics/af1_the_architecture/#android-runtime","text":"( more info ) This portion contains one of the most important components Dalvik Virtual Machine, DVM. This is a kind of JVM that is specially optimized and made for Android. It enables every android app to run its own process which enables us to run many applications at same time. It basically converts .java file into .Dex format.","title":"Android Runtime"},{"location":"tab_blogs/android/basics/af1_the_architecture/#hardware-abstraction-layer-hal","text":"( more info ) A HAL defines a standard interface for hardware vendors to implement, which enables Android to be agnostic about lower-level driver implementations. Using a HAL allows you to implement functionality without affecting or modifying the higher level system. HAL implementations are packaged into modules and loaded by the Android system at the appropriate time.","title":"Hardware Abstraction Layer (HAL)"},{"location":"tab_blogs/android/basics/af1_the_architecture/#linux-kernel","text":"( more info ) Kernel is core of any OS. The Linux Kernel sits at the bottom of Android architecture. The Android platform is built on top of the Linux 2.6 Kernel. The Linux Kernel provides support for many features like memory management, security management, process management, and device management etc. It also contains all the driver that helps Android device to communicate with other hardware devices. Note DVM was officially replaced by Android Run Time, ART in Lollipop version. It has many advantages over DVM. To know more about ART, Check this post . Other references - Ref1 : good look at linux architecture on which android architecture is based upon. Ref2 : good link with similar content but in more detail(i also downloaded a pdf of it with name [Android] android_architecture.pdf ) Ref3 : same content in a video. Ref4 : HAL, Ref5 : ART Ref6 General info about android(added this link because it has got specific more info on other aspects of android like apk, bundles, system updates, etc) Ref7 : video on android Security Ref8 : Linus torvalds on linux","title":"Linux Kernel"},{"location":"tab_blogs/android/basics/af2_parts_of_an_app/","text":"Android Fundamentals : Parts of an app In part 1 we got atleast 1 thing figured out: Android OS is a distinctive, layered, linux based OS in which multiple layers are involved to perform an action. As we may remember, in the topmost layer resides softwares called Apps, System Apps and UserApps. These are super busy chunks of code, as they need to provide an interface of communication among user and internal components. They are executable with an extension as .apk and each Android app lives in its own security sandbox, protected by Android security features like: - The Android operating system is a multi-user Linux system in which each app is a different user. By default, the system assigns each app a unique Linux user ID (the ID is used only by the system and is unknown to the app). The system sets permissions for all the files in an app so that only the user ID assigned to that app can access them. Each process has its own virtual machine (VM), so an app's code runs in isolation from other apps. By default, every app runs in its own Linux process. The Android system starts the process when any of the app's components need to be executed, and then shuts down the process when it's no longer needed or when the system must recover memory for other apps. The Android system implements the principle of least privilege. That is, each app, by default, has access only to the components that it requires to do its work and no more. This creates a very secure environment in which an app cannot access parts of the system for which it is not given permission. However, there are ways for an app to share data with other apps and for an app to access system services: It's possible to arrange for two apps to share the same Linux user ID, in which case they are able to access each other's files. To conserve system resources, apps with the same user ID can also arrange to run in the same Linux process and share the same VM. The apps must also be signed with the same certificate. An app can request permission to access device data such as the device's location, camera, and Bluetooth connection. The user has to explicitly grant these permissions. A app usually have many components. These components are the essential building blocks of an Android app. Each component is an entry point through which the system or a user can enter your app. Some components depend on others. There are four different types of app components: - Activities - Services - Broadcast receivers - Content providers Each type serves a distinct purpose and has a distinct lifecycle that defines how the component is created and destroyed. Let's see what each of them has to offer.","title":"Part2, Parts of an App(inc)"},{"location":"tab_blogs/android/basics/af2_parts_of_an_app/#android-fundamentals-parts-of-an-app","text":"In part 1 we got atleast 1 thing figured out: Android OS is a distinctive, layered, linux based OS in which multiple layers are involved to perform an action. As we may remember, in the topmost layer resides softwares called Apps, System Apps and UserApps. These are super busy chunks of code, as they need to provide an interface of communication among user and internal components. They are executable with an extension as .apk and each Android app lives in its own security sandbox, protected by Android security features like: - The Android operating system is a multi-user Linux system in which each app is a different user. By default, the system assigns each app a unique Linux user ID (the ID is used only by the system and is unknown to the app). The system sets permissions for all the files in an app so that only the user ID assigned to that app can access them. Each process has its own virtual machine (VM), so an app's code runs in isolation from other apps. By default, every app runs in its own Linux process. The Android system starts the process when any of the app's components need to be executed, and then shuts down the process when it's no longer needed or when the system must recover memory for other apps. The Android system implements the principle of least privilege. That is, each app, by default, has access only to the components that it requires to do its work and no more. This creates a very secure environment in which an app cannot access parts of the system for which it is not given permission. However, there are ways for an app to share data with other apps and for an app to access system services: It's possible to arrange for two apps to share the same Linux user ID, in which case they are able to access each other's files. To conserve system resources, apps with the same user ID can also arrange to run in the same Linux process and share the same VM. The apps must also be signed with the same certificate. An app can request permission to access device data such as the device's location, camera, and Bluetooth connection. The user has to explicitly grant these permissions. A app usually have many components. These components are the essential building blocks of an Android app. Each component is an entry point through which the system or a user can enter your app. Some components depend on others. There are four different types of app components: - Activities - Services - Broadcast receivers - Content providers Each type serves a distinct purpose and has a distinct lifecycle that defines how the component is created and destroyed. Let's see what each of them has to offer.","title":"Android Fundamentals : Parts of an app"},{"location":"tab_blogs/android/networking/image_load_overview/","text":"Networking Basics : Image Loading As we saw in networking , there are a no. of concepts involved, like downloading the reponse , parsing reponse handling background thread, keeping this object alive, etc. Image downloading is similar , except the fact that use case of image are a lot. Image could be used as background and needs to be loaded as fast as possible Image could be used in list as profile pic or contact imagge, and needs to be loaded on demand/ on click + cached so that multiple network calls does not happen Shimmer/Loading Blur/placeholder effect could be expected from images while being loaded gif support could be required transformations like streching the image, contracting the image, resizing the image, rotation of image, cropping of image, etc could be expected from the downloader. and many more. The natie code for a basic image loading is again large, but simple. However the implicity is limited to that only. For anything advance, the code grows and gets more complicated/inefficient. That's where Libraries thrive. There are many libraries, but I have used only Glide and Picasso for most of my needs. you can check this link for more info. Let's check some of them. Glide Glide is developed by bumptech and its one of the most popular mage library out there, i mean you can not expect less from a product recommended by Google, its currently in version 4.0.0. Glide is about 476 kb in size and has a method count of 2879. To use it you will have to add the this your project dependency: compile 'com.github.bumptech.glide:glide:3.7.0' Getting started with glide is as easy as follows Glide .with(mContext) .load(img_url) .centerCrop() .placeholder(R.drawable.loading_spinner) .into(mImageView); Additional configuration for glide: .error(Image_uri); this is the image shown in case of error .fitcenter(); this makes the image to be centered in the imageView .centerCrop() .fades() .transform() .fetch() Pros Very easy to use. it support gif loading. it requires little configuration. its been actively maintained. it download image with the Size of the view been loaded into, this will reduce time and computation required to display the image. Cons its kind of large in terms of size and memory. it requires large amount of caching space cause it saves different sizes of image separately. Picasso Picasso is named after the Spanish artist Pablo Picasso and its developed by square. its uses Fluent Api just like Glide, this library is not only powerful and fast but also very light in weight, its 121 kb in size with a total method count of 849. its currently in it version 2.5.2. To use Picasso in your project add the this to your dependency compile 'com.squareup.picasso:picasso:2.5.2' Using Picasso is very easy too Picasso .with(mContext) .load(img_url)//insert the image url .placeholder(R.drawable.user_image) .into(mImageView); Additional configurations .rotate(float degree) .resize(int height,int breath) .fade() .transform(Transformation trans) .centerCrop .fit() Pros Small size and method count very easy to use little configuration to set up very easy to configure with the builder class Cons it cannot load gif it cannot be used to load a very large file it download and cache the the original image which will be re-sized to the view its been loaded to, this is an additonal computation at display time. Fresco This is developed by Facebook, its built to present the best optimization for image loading and processing, when you have over one billion user to tend to, you cant possibly settle for less. As the popular adage has it \u201cwith greater power comes greater resposibility\u201d, Fresco is freaking 1.6mb and has a method count of 5714 thats huge if you are working against the 64k method count. Getting started with Fresco compile 'com.facebook.fresco:fresco:1.3.0' You will use the custom view SimpleDraweeView instead of imageView <com.facebook.drawee.view.SimpleDraweeView android:id=\"@+id/my_image_view\" android:layout_width=\"130dp\" android:layout_height=\"130dp\" fresco:placeholderImage=\"@drawable/my_drawable\" /> Then you just specify the image url: Uri uri = Uri.parse(image_url); draweeView = (SimpleDraweeView) findViewById(R.id.my_image_view); draweeView.setImageURI(uri); pros its has a custom view for its configuration, which makes it very easy to use its well optimized in terms of memory usage and allocation its has a lot of configuration option its has a very verbose documentation its easy to configure its load progressive JPEG,webP, gif it does not require alot configuration to get started Cons its very large its documentation are kind of complicated Extras: Resources Glide Picasso Getting Started with Fresco this article i heavily copy from This SO post on glide vs frseco vs picasso vs... everything. Other libs Other Notable Libraries Universal Image Loader Ion image loader Volley Image loader","title":"Image Downloading"},{"location":"tab_blogs/android/networking/image_load_overview/#networking-basics-image-loading","text":"As we saw in networking , there are a no. of concepts involved, like downloading the reponse , parsing reponse handling background thread, keeping this object alive, etc. Image downloading is similar , except the fact that use case of image are a lot. Image could be used as background and needs to be loaded as fast as possible Image could be used in list as profile pic or contact imagge, and needs to be loaded on demand/ on click + cached so that multiple network calls does not happen Shimmer/Loading Blur/placeholder effect could be expected from images while being loaded gif support could be required transformations like streching the image, contracting the image, resizing the image, rotation of image, cropping of image, etc could be expected from the downloader. and many more. The natie code for a basic image loading is again large, but simple. However the implicity is limited to that only. For anything advance, the code grows and gets more complicated/inefficient. That's where Libraries thrive. There are many libraries, but I have used only Glide and Picasso for most of my needs. you can check this link for more info. Let's check some of them.","title":"Networking Basics : Image Loading"},{"location":"tab_blogs/android/networking/image_load_overview/#glide","text":"Glide is developed by bumptech and its one of the most popular mage library out there, i mean you can not expect less from a product recommended by Google, its currently in version 4.0.0. Glide is about 476 kb in size and has a method count of 2879. To use it you will have to add the this your project dependency: compile 'com.github.bumptech.glide:glide:3.7.0' Getting started with glide is as easy as follows Glide .with(mContext) .load(img_url) .centerCrop() .placeholder(R.drawable.loading_spinner) .into(mImageView); Additional configuration for glide: .error(Image_uri); this is the image shown in case of error .fitcenter(); this makes the image to be centered in the imageView .centerCrop() .fades() .transform() .fetch() Pros Very easy to use. it support gif loading. it requires little configuration. its been actively maintained. it download image with the Size of the view been loaded into, this will reduce time and computation required to display the image. Cons its kind of large in terms of size and memory. it requires large amount of caching space cause it saves different sizes of image separately.","title":"Glide"},{"location":"tab_blogs/android/networking/image_load_overview/#picasso","text":"Picasso is named after the Spanish artist Pablo Picasso and its developed by square. its uses Fluent Api just like Glide, this library is not only powerful and fast but also very light in weight, its 121 kb in size with a total method count of 849. its currently in it version 2.5.2. To use Picasso in your project add the this to your dependency compile 'com.squareup.picasso:picasso:2.5.2' Using Picasso is very easy too Picasso .with(mContext) .load(img_url)//insert the image url .placeholder(R.drawable.user_image) .into(mImageView); Additional configurations .rotate(float degree) .resize(int height,int breath) .fade() .transform(Transformation trans) .centerCrop .fit() Pros Small size and method count very easy to use little configuration to set up very easy to configure with the builder class Cons it cannot load gif it cannot be used to load a very large file it download and cache the the original image which will be re-sized to the view its been loaded to, this is an additonal computation at display time.","title":"Picasso"},{"location":"tab_blogs/android/networking/image_load_overview/#fresco","text":"This is developed by Facebook, its built to present the best optimization for image loading and processing, when you have over one billion user to tend to, you cant possibly settle for less. As the popular adage has it \u201cwith greater power comes greater resposibility\u201d, Fresco is freaking 1.6mb and has a method count of 5714 thats huge if you are working against the 64k method count. Getting started with Fresco compile 'com.facebook.fresco:fresco:1.3.0' You will use the custom view SimpleDraweeView instead of imageView <com.facebook.drawee.view.SimpleDraweeView android:id=\"@+id/my_image_view\" android:layout_width=\"130dp\" android:layout_height=\"130dp\" fresco:placeholderImage=\"@drawable/my_drawable\" /> Then you just specify the image url: Uri uri = Uri.parse(image_url); draweeView = (SimpleDraweeView) findViewById(R.id.my_image_view); draweeView.setImageURI(uri); pros its has a custom view for its configuration, which makes it very easy to use its well optimized in terms of memory usage and allocation its has a lot of configuration option its has a very verbose documentation its easy to configure its load progressive JPEG,webP, gif it does not require alot configuration to get started Cons its very large its documentation are kind of complicated","title":"Fresco"},{"location":"tab_blogs/android/networking/image_load_overview/#extras","text":"Resources Glide Picasso Getting Started with Fresco this article i heavily copy from This SO post on glide vs frseco vs picasso vs... everything. Other libs Other Notable Libraries Universal Image Loader Ion image loader Volley Image loader","title":"Extras:"},{"location":"tab_blogs/android/networking/networking_get_post_basics/","text":"Networking Basics : Making a Get Post Connection(Theory) Networking would refer to the use of internet inside an app. There could be a million and 1 way to be using internet in an app: your app could be a chat app for sending/receiving messages , reddit like social media app, instagram like pictures app, or even a feed app like google news app. During network transmissions, there are many things that need to be kept in mind : paging, caching, asynchronous loading and transmission, realtime ui updates,etc So let\u2019s start from the very basics. chek this out : https://guides.codepath.com/android#networking-and-models 1. Adding permissions. We have to add the following permission to allow our app to receive and send data via a network connection: < uses-permission android:name = \"android.permission.INTERNET\" /> < uses-permission android:name = \"android.permission.ACCESS_NETWORK_STATE\" /> The second permission is to check weather the user\u2019s device is connected to a network or not. Since both permissions are safe and not dangerous, we do not need to provide a runtime check 2. Checking the connection. Here comes the code part. We have to first check weather our system is connected to the internet a Network. For this, we use the following piece of code: private boolean isConnectedToMobileDataOrWify (){ ConnectivityManager connectivityManager = ( ConnectivityManager ) getSystemService ( Context . CONNECTIVITY_SERVICE ); NetworkInfo networkInfo = connectivityManager . getActiveNetworkInfo (); return networkInfo != null && networkInfo . isConnected () && ( networkInfo . getType () == ConnectivityManager . TYPE_WIFI || networkInfo . getType () == ConnectivityManager . TYPE_MOBILE ); } ( We would be later using A decoupled asynctask, therefore it would be eventually broken and used in a different manner.) Note that this specifically refers to a network type of Wify or Mobile. There DOES exist other types of network, specifically: Type,value type,value (psfi) TYPE_NONE = -1; (psfi) TYPE_MOBILE = 0; (psfi) TYPE_WIFI = 1; (psfi) TYPE_MOBILE_MMS = 2; (psfi) TYPE_MOBILE_SUPL = 3; (psfi) TYPE_MOBILE_DUN = 4; (psfi) TYPE_MOBILE_HIPRI = 5; (psfi) TYPE_WIMAX = 6; (psfi) TYPE_BLUETOOTH = 7; (psfi) TYPE_DUMMY = 8; (psfi) TYPE_MOBILE_FOTA = 10; (psfi) TYPE_MOBILE_IMS = 11; (psfi) TYPE_MOBILE_CBS = 12; (psfi) TYPE_WIFI_P2P = 13; (psfi) TYPE_MOBILE_IA = 14; (psfi) TYPE_MOBILE_EMERGENCY = 15; (psfi) TYPE_PROXY = 16; (psfi) TYPE_VPN = 17; (psfi) TYPE_ETHERNET = 9; Update: usage of these integers is deprecated. Now, networkCapabilitiesObj.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) ;Or connectivityManager.requestNetwork(networkRequestObj,networkCallbackObj) is used. 3. Making a connection(Theory) Next we would be establishing a connection. Before we establish a connection, one thing should be pretty clear: Danger All the network fetching / uploading / other network related tasks should be performed on a separate thread. The ui operations would obviously be performed on the ui thread , therefore we use a Threadsafe Asynctask ( An Asynctask created in a headless fragment along with callbacks to prevent leaking ) which could perform a network task and safely update ui for task progress and later, task completion. There are some other concepts in regard to a network task: Http Connection : HttpURLConnection is the official Android Api for creating an http connection In android.According to geeksforgeeks, The \u201cHypertext Transfer Protocol (HTTP) is an application-level protocol that uses TCP as an underlying transport and typically runs on port 80. HTTP is a stateless protocol i.e. server maintains no information about past client requests.\u201d This hidden link has a lot of info regarding different functions and features of HttpConnection class. Get and Post() : something about security, blah blah blah. Would look into networking someday. Not important in android development. From what I know from my app dev experience in claro, both get() and post() request is like calling a server and demanding a response. Our calling method would contain a custom query(like google.com?q=animal where \u201canimal\u201d is a search result we want). Both methods will give us a json or XML response against the query . - In get() ,the request to server itself contains queries like https://api.stackexchange.com/2.2/questions?pagesize=5&order=desc&sort=activity&site=stackoverflow\" In post() , we have to pass queries alongside the request to server in a json string. This json string is hidden inside a requestBody obj. libraries like okhttp help create and pass these json string alongside request in a very simple way, like request.putString(\u201cpagesize\u201d,\u201d5\u201d) or putString(\u201cemail\u201d,\u201cansh@example.com\u201d) . in native http way, we have to perform a lot of steps for such thing , like adding it to outputstream\u2019s buffer, creating aurl encoded string, etc. This reason for this distinguishment is most probably the security issues. I guess the code behind checking the get request is either very small or none at all. But in case of post request there might be some encoding decoding algorithms involved. If you ask a web dev, they would simply say \"get me to url me hi sbkuch pass hota hai, to isse passwords leak hone ka khatra hai but post chhipa rehega to no khatra\". 4. Making a Connection (Code)(to be continued) The above was the the set of general and commone things that are needed in making a get/post connection. Next we will be seeing the code for it. Now before heading to code, there is a thing to handle threads. Now, threads cause a lot of memory and context leaks which needs to be handled. So we will be seeing the native code for doing this(which handles problem of thread leakage using Threadsafe asynctasks enclosed in Fragments ) and then we will be seeing Libraries made for performing get/post requests which i don't know how or weather they are handling these or not.","title":"Part1, basics"},{"location":"tab_blogs/android/networking/networking_get_post_basics/#networking-basics-making-a-get-post-connectiontheory","text":"Networking would refer to the use of internet inside an app. There could be a million and 1 way to be using internet in an app: your app could be a chat app for sending/receiving messages , reddit like social media app, instagram like pictures app, or even a feed app like google news app. During network transmissions, there are many things that need to be kept in mind : paging, caching, asynchronous loading and transmission, realtime ui updates,etc So let\u2019s start from the very basics. chek this out : https://guides.codepath.com/android#networking-and-models","title":"Networking Basics : Making a Get Post Connection(Theory)"},{"location":"tab_blogs/android/networking/networking_get_post_basics/#1-adding-permissions","text":"We have to add the following permission to allow our app to receive and send data via a network connection: < uses-permission android:name = \"android.permission.INTERNET\" /> < uses-permission android:name = \"android.permission.ACCESS_NETWORK_STATE\" /> The second permission is to check weather the user\u2019s device is connected to a network or not. Since both permissions are safe and not dangerous, we do not need to provide a runtime check","title":"1.   Adding permissions."},{"location":"tab_blogs/android/networking/networking_get_post_basics/#2-checking-the-connection","text":"Here comes the code part. We have to first check weather our system is connected to the internet a Network. For this, we use the following piece of code: private boolean isConnectedToMobileDataOrWify (){ ConnectivityManager connectivityManager = ( ConnectivityManager ) getSystemService ( Context . CONNECTIVITY_SERVICE ); NetworkInfo networkInfo = connectivityManager . getActiveNetworkInfo (); return networkInfo != null && networkInfo . isConnected () && ( networkInfo . getType () == ConnectivityManager . TYPE_WIFI || networkInfo . getType () == ConnectivityManager . TYPE_MOBILE ); } ( We would be later using A decoupled asynctask, therefore it would be eventually broken and used in a different manner.) Note that this specifically refers to a network type of Wify or Mobile. There DOES exist other types of network, specifically: Type,value type,value (psfi) TYPE_NONE = -1; (psfi) TYPE_MOBILE = 0; (psfi) TYPE_WIFI = 1; (psfi) TYPE_MOBILE_MMS = 2; (psfi) TYPE_MOBILE_SUPL = 3; (psfi) TYPE_MOBILE_DUN = 4; (psfi) TYPE_MOBILE_HIPRI = 5; (psfi) TYPE_WIMAX = 6; (psfi) TYPE_BLUETOOTH = 7; (psfi) TYPE_DUMMY = 8; (psfi) TYPE_MOBILE_FOTA = 10; (psfi) TYPE_MOBILE_IMS = 11; (psfi) TYPE_MOBILE_CBS = 12; (psfi) TYPE_WIFI_P2P = 13; (psfi) TYPE_MOBILE_IA = 14; (psfi) TYPE_MOBILE_EMERGENCY = 15; (psfi) TYPE_PROXY = 16; (psfi) TYPE_VPN = 17; (psfi) TYPE_ETHERNET = 9; Update: usage of these integers is deprecated. Now, networkCapabilitiesObj.hasTransport(NetworkCapabilities.TRANSPORT_WIFI) ;Or connectivityManager.requestNetwork(networkRequestObj,networkCallbackObj) is used.","title":"2. Checking the connection."},{"location":"tab_blogs/android/networking/networking_get_post_basics/#3-making-a-connectiontheory","text":"Next we would be establishing a connection. Before we establish a connection, one thing should be pretty clear: Danger All the network fetching / uploading / other network related tasks should be performed on a separate thread. The ui operations would obviously be performed on the ui thread , therefore we use a Threadsafe Asynctask ( An Asynctask created in a headless fragment along with callbacks to prevent leaking ) which could perform a network task and safely update ui for task progress and later, task completion. There are some other concepts in regard to a network task: Http Connection : HttpURLConnection is the official Android Api for creating an http connection In android.According to geeksforgeeks, The \u201cHypertext Transfer Protocol (HTTP) is an application-level protocol that uses TCP as an underlying transport and typically runs on port 80. HTTP is a stateless protocol i.e. server maintains no information about past client requests.\u201d This hidden link has a lot of info regarding different functions and features of HttpConnection class. Get and Post() : something about security, blah blah blah. Would look into networking someday. Not important in android development. From what I know from my app dev experience in claro, both get() and post() request is like calling a server and demanding a response. Our calling method would contain a custom query(like google.com?q=animal where \u201canimal\u201d is a search result we want). Both methods will give us a json or XML response against the query . - In get() ,the request to server itself contains queries like https://api.stackexchange.com/2.2/questions?pagesize=5&order=desc&sort=activity&site=stackoverflow\" In post() , we have to pass queries alongside the request to server in a json string. This json string is hidden inside a requestBody obj. libraries like okhttp help create and pass these json string alongside request in a very simple way, like request.putString(\u201cpagesize\u201d,\u201d5\u201d) or putString(\u201cemail\u201d,\u201cansh@example.com\u201d) . in native http way, we have to perform a lot of steps for such thing , like adding it to outputstream\u2019s buffer, creating aurl encoded string, etc. This reason for this distinguishment is most probably the security issues. I guess the code behind checking the get request is either very small or none at all. But in case of post request there might be some encoding decoding algorithms involved. If you ask a web dev, they would simply say \"get me to url me hi sbkuch pass hota hai, to isse passwords leak hone ka khatra hai but post chhipa rehega to no khatra\".","title":"3.  Making a connection(Theory)"},{"location":"tab_blogs/android/networking/networking_get_post_basics/#4-making-a-connection-codeto-be-continued","text":"The above was the the set of general and commone things that are needed in making a get/post connection. Next we will be seeing the code for it. Now before heading to code, there is a thing to handle threads. Now, threads cause a lot of memory and context leaks which needs to be handled. So we will be seeing the native code for doing this(which handles problem of thread leakage using Threadsafe asynctasks enclosed in Fragments ) and then we will be seeing Libraries made for performing get/post requests which i don't know how or weather they are handling these or not.","title":"4. Making a Connection (Code)(to be continued)"},{"location":"tab_blogs/android/networking/networking_get_post_gson/","text":"Networking Basics : Making a Get Post Connection(gson) This article is not actually about downloading a response, but rather how to convert it into meaningful form In the previous articles, we saw how data can be downloaded as a response string . When we say \"reponse string\", we mean something like this: { \"items\" : [ { \"owner\" : { \"reputation\" : 36476 , \"user_id\" : 7207392 , \"user_type\" : \"registered\" , \"accept_rate\" : 73 , \"profile_image\" : \"https://www.gravatar.com/avatar/dadc9567dde5f02b09a29695eca1ce40?s=128&d=identicon&r=PG&f=1\" , \"display_name\" : \"Paul Panzer\" , \"link\" : \"https://stackoverflow.com/users/7207392/paul-panzer\" }, \"is_accepted\" : false , \"score\" : 0 , \"last_activity_date\" : 1570568059 , \"last_edit_date\" : 1570568059 , \"creation_date\" : 1570566735 , \"answer_id\" : 58293716 , \"question_id\" : 58292546 }, { \"owner\" : { \"reputation\" : 21 , \"user_id\" : 12165300 , \"user_type\" : \"registered\" , \"profile_image\" : \"https://www.gravatar.com/avatar/05ad0547978cace7429e947736861196?s=128&d=identicon&r=PG&f=1\" , \"display_name\" : \"rsomji\" , \"link\" : \"https://stackoverflow.com/users/12165300/rsomji\" }, \"is_accepted\" : false , \"score\" : 0 , \"last_activity_date\" : 1570568055 , \"creation_date\" : 1570568055 , \"answer_id\" : 58293951 , \"question_id\" : 58289314 }, { \"owner\" : { \"reputation\" : 1982 , \"user_id\" : 2042457 , \"user_type\" : \"registered\" , \"accept_rate\" : 56 , \"profile_image\" : \"https://i.stack.imgur.com/xQVEN.jpg?s=128&g=1\" , \"display_name\" : \"aksappy\" , \"link\" : \"https://stackoverflow.com/users/2042457/aksappy\" }, \"is_accepted\" : false , \"score\" : 0 , \"last_activity_date\" : 1570568054 , \"creation_date\" : 1570568054 , \"answer_id\" : 58293950 , \"question_id\" : 58290873 }, { \"owner\" : { \"reputation\" : 472124 , \"user_id\" : 1491895 , \"user_type\" : \"registered\" , \"accept_rate\" : 69 , \"profile_image\" : \"https://www.gravatar.com/avatar/82f9e178a16364bf561d0ed4da09a35d?s=128&d=identicon&r=PG\" , \"display_name\" : \"Barmar\" , \"link\" : \"https://stackoverflow.com/users/1491895/barmar\" }, \"is_accepted\" : true , \"score\" : 1 , \"last_activity_date\" : 1570568051 , \"last_edit_date\" : 1570568051 , \"creation_date\" : 1570514725 , \"answer_id\" : 58280936 , \"question_id\" : 58280903 }, { \"owner\" : { \"reputation\" : 220 , \"user_id\" : 11601996 , \"user_type\" : \"registered\" , \"profile_image\" : \"https://www.gravatar.com/avatar/51c452c987f2541f3c4d661a80359878?s=128&d=identicon&r=PG&f=1\" , \"display_name\" : \"Peter Li\" , \"link\" : \"https://stackoverflow.com/users/11601996/peter-li\" }, \"is_accepted\" : false , \"score\" : 0 , \"last_activity_date\" : 1570568046 , \"creation_date\" : 1570568046 , \"answer_id\" : 58293947 , \"question_id\" : 58264206 } ], \"has_more\" : true , \"backoff\" : 10 , \"quota_max\" : 10000 , \"quota_remaining\" : 9995 } To make it useful, we must convert it into some form of object or object list via a parser. Here is when GSON comes useful. Now before diving straight into gson, let's see how we would have done in native code: public class RvAdapterData { String questionText , url ; public RvAdapterData ( String questionText , String url ) { /*..*/ } /*..*/ } private ArrayList < RvAdapterData > convertJSONToAdapterDataList ( String responseString ) { ArrayList < RvAdapterData > result = new ArrayList (); try { JSONObject root = new JSONObject ( responseString ); JSONArray itemsArr = root . getJSONArray ( \"Items\" ); for ( int i = 0 ; i < itemsArr . length (); i ++ ){ JSONObject item = itemsArr . getJSONObject ( i ); String questionText = item . getString ( \"title\" ); String url = item . getString ( \"link\" ); RvAdapterData data = new RvAdapterData ( questionText , url ); result . add ( data ); } String serverResponse = root . getString ( \"val\" ); } catch ( JSONException e ) { e . printStackTrace (); } return result ; } There could be a chance that you might mistake in passing the correct keys in getJsonObject() or getString() . I personally use http://www.jsonschema2pojo.org to first convert my json to a set of java files and then write the above code. I do not like GSON library, it so easy to use that site, we could get a pojo in just a few checkboxes clicked(although, be very careful with that, the pojo is not generated if some checks are wrong) You can check more about How GSON simplifies the process of json parsing here: https://guides.codepath.com/android/leveraging-the-gson-library","title":"Part4.1, GSON"},{"location":"tab_blogs/android/networking/networking_get_post_gson/#networking-basics-making-a-get-post-connectiongson","text":"This article is not actually about downloading a response, but rather how to convert it into meaningful form In the previous articles, we saw how data can be downloaded as a response string . When we say \"reponse string\", we mean something like this: { \"items\" : [ { \"owner\" : { \"reputation\" : 36476 , \"user_id\" : 7207392 , \"user_type\" : \"registered\" , \"accept_rate\" : 73 , \"profile_image\" : \"https://www.gravatar.com/avatar/dadc9567dde5f02b09a29695eca1ce40?s=128&d=identicon&r=PG&f=1\" , \"display_name\" : \"Paul Panzer\" , \"link\" : \"https://stackoverflow.com/users/7207392/paul-panzer\" }, \"is_accepted\" : false , \"score\" : 0 , \"last_activity_date\" : 1570568059 , \"last_edit_date\" : 1570568059 , \"creation_date\" : 1570566735 , \"answer_id\" : 58293716 , \"question_id\" : 58292546 }, { \"owner\" : { \"reputation\" : 21 , \"user_id\" : 12165300 , \"user_type\" : \"registered\" , \"profile_image\" : \"https://www.gravatar.com/avatar/05ad0547978cace7429e947736861196?s=128&d=identicon&r=PG&f=1\" , \"display_name\" : \"rsomji\" , \"link\" : \"https://stackoverflow.com/users/12165300/rsomji\" }, \"is_accepted\" : false , \"score\" : 0 , \"last_activity_date\" : 1570568055 , \"creation_date\" : 1570568055 , \"answer_id\" : 58293951 , \"question_id\" : 58289314 }, { \"owner\" : { \"reputation\" : 1982 , \"user_id\" : 2042457 , \"user_type\" : \"registered\" , \"accept_rate\" : 56 , \"profile_image\" : \"https://i.stack.imgur.com/xQVEN.jpg?s=128&g=1\" , \"display_name\" : \"aksappy\" , \"link\" : \"https://stackoverflow.com/users/2042457/aksappy\" }, \"is_accepted\" : false , \"score\" : 0 , \"last_activity_date\" : 1570568054 , \"creation_date\" : 1570568054 , \"answer_id\" : 58293950 , \"question_id\" : 58290873 }, { \"owner\" : { \"reputation\" : 472124 , \"user_id\" : 1491895 , \"user_type\" : \"registered\" , \"accept_rate\" : 69 , \"profile_image\" : \"https://www.gravatar.com/avatar/82f9e178a16364bf561d0ed4da09a35d?s=128&d=identicon&r=PG\" , \"display_name\" : \"Barmar\" , \"link\" : \"https://stackoverflow.com/users/1491895/barmar\" }, \"is_accepted\" : true , \"score\" : 1 , \"last_activity_date\" : 1570568051 , \"last_edit_date\" : 1570568051 , \"creation_date\" : 1570514725 , \"answer_id\" : 58280936 , \"question_id\" : 58280903 }, { \"owner\" : { \"reputation\" : 220 , \"user_id\" : 11601996 , \"user_type\" : \"registered\" , \"profile_image\" : \"https://www.gravatar.com/avatar/51c452c987f2541f3c4d661a80359878?s=128&d=identicon&r=PG&f=1\" , \"display_name\" : \"Peter Li\" , \"link\" : \"https://stackoverflow.com/users/11601996/peter-li\" }, \"is_accepted\" : false , \"score\" : 0 , \"last_activity_date\" : 1570568046 , \"creation_date\" : 1570568046 , \"answer_id\" : 58293947 , \"question_id\" : 58264206 } ], \"has_more\" : true , \"backoff\" : 10 , \"quota_max\" : 10000 , \"quota_remaining\" : 9995 } To make it useful, we must convert it into some form of object or object list via a parser. Here is when GSON comes useful. Now before diving straight into gson, let's see how we would have done in native code: public class RvAdapterData { String questionText , url ; public RvAdapterData ( String questionText , String url ) { /*..*/ } /*..*/ } private ArrayList < RvAdapterData > convertJSONToAdapterDataList ( String responseString ) { ArrayList < RvAdapterData > result = new ArrayList (); try { JSONObject root = new JSONObject ( responseString ); JSONArray itemsArr = root . getJSONArray ( \"Items\" ); for ( int i = 0 ; i < itemsArr . length (); i ++ ){ JSONObject item = itemsArr . getJSONObject ( i ); String questionText = item . getString ( \"title\" ); String url = item . getString ( \"link\" ); RvAdapterData data = new RvAdapterData ( questionText , url ); result . add ( data ); } String serverResponse = root . getString ( \"val\" ); } catch ( JSONException e ) { e . printStackTrace (); } return result ; } There could be a chance that you might mistake in passing the correct keys in getJsonObject() or getString() . I personally use http://www.jsonschema2pojo.org to first convert my json to a set of java files and then write the above code. I do not like GSON library, it so easy to use that site, we could get a pojo in just a few checkboxes clicked(although, be very careful with that, the pojo is not generated if some checks are wrong) You can check more about How GSON simplifies the process of json parsing here: https://guides.codepath.com/android/leveraging-the-gson-library","title":"Networking Basics : Making a Get Post Connection(gson)"},{"location":"tab_blogs/android/networking/networking_get_post_native/","text":"Networking Basics : Making a Get Post Connection(Native Way) In the 1st article of Networking series we, discussed the different terminologies related to networking in Android, along with some basic steps. As per 1st article, - We need Internet and access network Permissions for creating a connection - We might need to check for Internet availability before making a connection and during the data transfer(usually handled automatically) refer 1st article So let's see how we can use Native HttpConnection libaries to make a connection. We would be creating an http connection inside an asynctask(a nice version of thread that handles supplying progress updates on the main thread)whose object would be handled by headless fragment (very nice article) , in order to prevent network from failing on configuration change. you can handle that in a service as well, but the main file remains the Downloader task , the callback class , and the Response Class. The Result Class The Result class is the final encapsulation of reponse received. When data is recieved by the user's device, it is in the form of a stream of bits. The Java's Inputstream class is either able to fetch that input stream or throws some relevent exception . The downloader will either Convert that stream to string and put it in this class's Object or take the exception and put it in this class's Object and return this class's Object (Too much repeatitio, I know :/). class Result { String resultValue ; Exception exception ; Result ( String resultValue ) { this . resultValue = resultValue ; } Result ( Exception exception ) { this . exception = exception ; } } The Download Listener and Progress interface. The download listener is a listener implemented by Activity and used by the Downloader for communication. The downloader would push updates to this interface's object regarding downloading started, progress updates, errors ,etc. public interface DownloadListener < T > { interface Progress { int ERROR = - 1 ; int CONNECT_SUCCESS = 0 ; int GET_INPUT_STREAM_SUCCESS = 1 ; int PROCESS_INPUT_STREAM_IN_PROGRESS = 2 ; int PROCESS_INPUT_STREAM_SUCCESS = 3 ; } void updateFromDownloader ( @Nullable Result result ); NetworkInfo getActiveNetworkInfo (); void onProgressUpdate ( int progressCode , int percentComplete ); //todo define a way for showing partial updated void onDownloadingFinished ( @Nullable Result result ); } The Downloader Asynctask The downloader Asynctask is the main Downloading Body here . It downloads the response from an api as input stream, converts it to a Result class's object and returns the result using Download Listener 's object. public class DownloadTask extends AsyncTask < String , Integer , Result > { private DownloadListener < String > downloadListener ; DownloadTask ( DownloadListener < String > downloadListener ) { setDownloadListener ( downloadListener ); } private void setDownloadListener ( DownloadListener < String > downloadListener ) { this . downloadListener = downloadListener ; } @Override protected void onPreExecute () { if ( downloadListener != null ) { NetworkInfo networkInfo = downloadListener . getActiveNetworkInfo (); if ( networkInfo == null || ! networkInfo . isConnected () || ( networkInfo . getType () != ConnectivityManager . TYPE_WIFI && networkInfo . getType () != ConnectivityManager . TYPE_MOBILE )) { downloadListener . updateFromDownloader ( null ); cancel ( true ); } } } @Override protected Result doInBackground ( String ... urls ) { Result result = null ; if ( ! isCancelled () && urls != null && urls . length > 0 ) { String urlString = urls [ 0 ] ; try { URL url = new URL ( urlString ); String resultString = downloadUrl ( url ); if ( resultString != null ) { result = new Result ( resultString ); } else { throw new IOException ( \"No response received.\" ); } } catch ( Exception e ) { result = new Result ( e ); } } downloadListener . updateFromDownloader ( result ); return result ; } private String downloadUrl ( URL url ) throws IOException { InputStream stream = null ; HttpsURLConnection connection = null ; String result = null ; try { connection = ( HttpsURLConnection ) url . openConnection (); connection . setReadTimeout ( 30000 ); connection . setConnectTimeout ( 30000 ); connection . setRequestMethod ( \"GET\" ); connection . setDoInput ( true ); connection . connect (); publishProgress ( DownloadListener . Progress . CONNECT_SUCCESS ); int responseCode = connection . getResponseCode (); if ( responseCode != HttpsURLConnection . HTTP_OK ) { throw new IOException ( \"HTTP error code: \" + responseCode ); } stream = connection . getInputStream (); publishProgress ( DownloadListener . Progress . GET_INPUT_STREAM_SUCCESS , 0 ); if ( stream != null ) { result = readStream ( stream ); } } finally { if ( stream != null ) { stream . close (); } if ( connection != null ) { connection . disconnect (); } } return result ; } private String readStream ( InputStream stream ) throws IOException { int maxReadSize = 500 ; Reader reader ; reader = new InputStreamReader ( stream , StandardCharsets . UTF_8 ); char [] rawBuffer = new char [ maxReadSize ] ; int readSize ; StringBuilder buffer = new StringBuilder (); while ((( readSize = reader . read ( rawBuffer )) != - 1 ) && maxReadSize > 0 ) { if ( readSize > maxReadSize ) { readSize = maxReadSize ; } buffer . append ( rawBuffer , 0 , readSize ); maxReadSize -= readSize ; } return buffer . toString (); //for bitmap //InputStream inputStream = null; //... //Bitmap bitmap = BitmapFactory.decodeStream(inputStream); //ImageView imageView = (ImageView) findViewById(R.id.image_view); //imageView.setImageBitmap(bitmap); } @Override protected void onPostExecute ( Result result ) { if ( result != null && downloadListener != null ) { downloadListener . onDownloadingFinished ( result ); } } @Override protected void onProgressUpdate ( Integer ... values ) { super . onProgressUpdate ( values ); //downloadListener.onProgressUpdate(int progressCode, int percentComplete); // ^ todo define a way for showing partial updated } @Override protected void onCancelled () { super . onCancelled (); } } The Network Fragment This is the main Fragment that will be handling Downloader's Instance and preventing it from getting killed on changes like activity pausing or Screen getting rotated. It is not as permanent solution as that of a forgeround service(forground, because background service is now deprecated), which could run even if activity is destroyed, but it is still a hard core solution for downloading without worrying about configuration changes or screen lock or pause/play stuff . More about Headless fragment is discussed here . public class NetworkFragment2 extends Fragment { private static final String TAG = \"NetworkFragment\" ; private static final String URL_KEY = \"UrlKey\" ; private @Nullable DownloadListener < String > downloadListener ; private DownloadTask downloadTask ; private String urlString ; static NetworkFragment2 getInstance ( FragmentManager fragmentManager , String url ) { NetworkFragment2 networkFragment = new NetworkFragment2 (); Bundle args = new Bundle (); args . putString ( URL_KEY , url ); networkFragment . setArguments ( args ); fragmentManager . beginTransaction (). add ( networkFragment , TAG ). commit (); return networkFragment ; } @Override public void onCreate ( @Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); if ( getArguments () != null ) { urlString = getArguments (). getString ( URL_KEY ); } } @Override public void onAttach ( @NonNull Context context ) { super . onAttach ( context ); downloadListener = ( DownloadListener < String > ) context ; } @Override public void onDetach () { super . onDetach (); downloadListener = null ; } @Override public void onDestroy () { cancelDownload (); super . onDestroy (); } void startDownload () { cancelDownload (); downloadTask = new DownloadTask ( downloadListener ); downloadTask . execute ( urlString ); } void cancelDownload () { if ( downloadTask != null ) { downloadTask . cancel ( true ); } } } The Activity class finally the activity class. We simply create an instance of network fragment(which automatically attaches itself to our activity) and implement the downloadlistener callback. public class MainActivity extends AppCompatActivity implements DownloadListener < String > { private NetworkFragment2 networkFragment ; private boolean isDownloading = false ; TextView tvText ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); //tvText = findViewById(R.id.tv_text); String api = \"http://a.vdo.ai/core/ir24/ads_vmap.php\" ; networkFragment = NetworkFragment2 . getInstance ( getSupportFragmentManager (), api ); //NetworkFragment2.DownloadListener<String> listener = getNetWorkListener(); //can't do above thing. in this method, we are creating a fragment that // gets attached to our view, so our view must have those methods defined already, // and it will call those methods when needed. We will rather just press //start here or in onStart and let fragment call them on its own startConnection (); } private void startConnection () { if ( ! isDownloading && networkFragment != null ) { // Execute the async download. networkFragment . startDownload (); isDownloading = true ; } } //-----------------------funcs called by fragment's callbacks----------------------------------- @Override public void updateFromDownloader ( Result result ) { updateUiFromResult ( result ); } private void updateUiFromResult ( Result result ) { if ( result . exception != null ) { tvText . setText ( \"ErrorOccurred!\" + result . exception . getMessage ()); } else if ( result . resultValue != null ) { tvText . setText ( result . resultValue ); } } @Override public NetworkInfo getActiveNetworkInfo () { ConnectivityManager connectivityManager = ( ConnectivityManager ) getSystemService ( Context . CONNECTIVITY_SERVICE ); if ( connectivityManager != null ) { NetworkInfo networkInfo = connectivityManager . getActiveNetworkInfo (); return networkInfo ; } return null ; } @Override public void onProgressUpdate ( int progressCode , int percentComplete ) { updateUiWithDownloaderMetaData ( progressCode , percentComplete ); } private void updateUiWithDownloaderMetaData ( int progressCode , int percentComplete ) { switch ( progressCode ) { // You can add UI behavior for progress updates here. // its not being handled in fragment. its like we assumed there is a pipe with flowing // water and we attached our nozel to it, but there is no one sending water to this // pipe. no code is sending updates , so these will never be called. case Progress . ERROR : tvText . append ( \"\\n==================================\\nERROR_HAPPENED\" ); break ; case Progress . CONNECT_SUCCESS : tvText . append ( \"\\n==================================\\nCONNECT_SUCCESS\" ); break ; case Progress . GET_INPUT_STREAM_SUCCESS : tvText . append ( \"\\n==================================\\nGET_INPUT_STREAM_SUCCESS\" ); break ; case Progress . PROCESS_INPUT_STREAM_IN_PROGRESS : tvText . append ( \"\\n==================================\\nPROCESS_INPUT_STREAM_IN_PROGRESS\" ); break ; case Progress . PROCESS_INPUT_STREAM_SUCCESS : tvText . append ( \"\\n==================================\\nPROCESS_INPUT_STREAM_SUCCESS\" ); break ; } } @Override public void onDownloadingFinished ( Result result ) { closeConnection ( result ); } private void closeConnection ( Result result ) { isDownloading = false ; if ( networkFragment != null ) { networkFragment . cancelDownload (); } } //-------------------------------------------------------------------------------------------- // not useful anymore function: private DownloadListener < String > getNetWorkListener () { return new DownloadListener < String > () { @Override public void updateFromDownloader ( Result result ) { updateUiFromResult ( result ); } @Override public NetworkInfo getActiveNetworkInfo () { ConnectivityManager connectivityManager = ( ConnectivityManager ) getSystemService ( Context . CONNECTIVITY_SERVICE ); if ( connectivityManager != null ) { NetworkInfo networkInfo = connectivityManager . getActiveNetworkInfo (); return networkInfo ; } return null ; } @Override public void onProgressUpdate ( int progressCode , int percentComplete ) { updateUiWithDownloaderMetaData ( progressCode , percentComplete ); } @Override public void onDownloadingFinished ( Result result ) { closeConnection ( result ); } }; } } Well that's it.I usually have these all as just 2 classes instead of 4: - MainActivity implements...{...} - NetWorkFragment{ - Result{...} - DownloadListener{...} - DownloaderTask{...} } Next, We would be seeing how Simple it is to download a response via okhttp or volley. its so small , that it would be covered in first quarter of article and later we would rather be covering more advance topics like conveting this reponse string to a list of objects, downloading images, etc.","title":"Part2, The native way"},{"location":"tab_blogs/android/networking/networking_get_post_native/#networking-basics-making-a-get-post-connectionnative-way","text":"In the 1st article of Networking series we, discussed the different terminologies related to networking in Android, along with some basic steps. As per 1st article, - We need Internet and access network Permissions for creating a connection - We might need to check for Internet availability before making a connection and during the data transfer(usually handled automatically) refer 1st article So let's see how we can use Native HttpConnection libaries to make a connection. We would be creating an http connection inside an asynctask(a nice version of thread that handles supplying progress updates on the main thread)whose object would be handled by headless fragment (very nice article) , in order to prevent network from failing on configuration change. you can handle that in a service as well, but the main file remains the Downloader task , the callback class , and the Response Class.","title":"Networking Basics : Making a Get Post Connection(Native Way)"},{"location":"tab_blogs/android/networking/networking_get_post_native/#the-result-class","text":"The Result class is the final encapsulation of reponse received. When data is recieved by the user's device, it is in the form of a stream of bits. The Java's Inputstream class is either able to fetch that input stream or throws some relevent exception . The downloader will either Convert that stream to string and put it in this class's Object or take the exception and put it in this class's Object and return this class's Object (Too much repeatitio, I know :/). class Result { String resultValue ; Exception exception ; Result ( String resultValue ) { this . resultValue = resultValue ; } Result ( Exception exception ) { this . exception = exception ; } }","title":"The Result Class"},{"location":"tab_blogs/android/networking/networking_get_post_native/#the-download-listener-and-progress-interface","text":"The download listener is a listener implemented by Activity and used by the Downloader for communication. The downloader would push updates to this interface's object regarding downloading started, progress updates, errors ,etc. public interface DownloadListener < T > { interface Progress { int ERROR = - 1 ; int CONNECT_SUCCESS = 0 ; int GET_INPUT_STREAM_SUCCESS = 1 ; int PROCESS_INPUT_STREAM_IN_PROGRESS = 2 ; int PROCESS_INPUT_STREAM_SUCCESS = 3 ; } void updateFromDownloader ( @Nullable Result result ); NetworkInfo getActiveNetworkInfo (); void onProgressUpdate ( int progressCode , int percentComplete ); //todo define a way for showing partial updated void onDownloadingFinished ( @Nullable Result result ); }","title":"The Download Listener and Progress interface."},{"location":"tab_blogs/android/networking/networking_get_post_native/#the-downloader-asynctask","text":"The downloader Asynctask is the main Downloading Body here . It downloads the response from an api as input stream, converts it to a Result class's object and returns the result using Download Listener 's object. public class DownloadTask extends AsyncTask < String , Integer , Result > { private DownloadListener < String > downloadListener ; DownloadTask ( DownloadListener < String > downloadListener ) { setDownloadListener ( downloadListener ); } private void setDownloadListener ( DownloadListener < String > downloadListener ) { this . downloadListener = downloadListener ; } @Override protected void onPreExecute () { if ( downloadListener != null ) { NetworkInfo networkInfo = downloadListener . getActiveNetworkInfo (); if ( networkInfo == null || ! networkInfo . isConnected () || ( networkInfo . getType () != ConnectivityManager . TYPE_WIFI && networkInfo . getType () != ConnectivityManager . TYPE_MOBILE )) { downloadListener . updateFromDownloader ( null ); cancel ( true ); } } } @Override protected Result doInBackground ( String ... urls ) { Result result = null ; if ( ! isCancelled () && urls != null && urls . length > 0 ) { String urlString = urls [ 0 ] ; try { URL url = new URL ( urlString ); String resultString = downloadUrl ( url ); if ( resultString != null ) { result = new Result ( resultString ); } else { throw new IOException ( \"No response received.\" ); } } catch ( Exception e ) { result = new Result ( e ); } } downloadListener . updateFromDownloader ( result ); return result ; } private String downloadUrl ( URL url ) throws IOException { InputStream stream = null ; HttpsURLConnection connection = null ; String result = null ; try { connection = ( HttpsURLConnection ) url . openConnection (); connection . setReadTimeout ( 30000 ); connection . setConnectTimeout ( 30000 ); connection . setRequestMethod ( \"GET\" ); connection . setDoInput ( true ); connection . connect (); publishProgress ( DownloadListener . Progress . CONNECT_SUCCESS ); int responseCode = connection . getResponseCode (); if ( responseCode != HttpsURLConnection . HTTP_OK ) { throw new IOException ( \"HTTP error code: \" + responseCode ); } stream = connection . getInputStream (); publishProgress ( DownloadListener . Progress . GET_INPUT_STREAM_SUCCESS , 0 ); if ( stream != null ) { result = readStream ( stream ); } } finally { if ( stream != null ) { stream . close (); } if ( connection != null ) { connection . disconnect (); } } return result ; } private String readStream ( InputStream stream ) throws IOException { int maxReadSize = 500 ; Reader reader ; reader = new InputStreamReader ( stream , StandardCharsets . UTF_8 ); char [] rawBuffer = new char [ maxReadSize ] ; int readSize ; StringBuilder buffer = new StringBuilder (); while ((( readSize = reader . read ( rawBuffer )) != - 1 ) && maxReadSize > 0 ) { if ( readSize > maxReadSize ) { readSize = maxReadSize ; } buffer . append ( rawBuffer , 0 , readSize ); maxReadSize -= readSize ; } return buffer . toString (); //for bitmap //InputStream inputStream = null; //... //Bitmap bitmap = BitmapFactory.decodeStream(inputStream); //ImageView imageView = (ImageView) findViewById(R.id.image_view); //imageView.setImageBitmap(bitmap); } @Override protected void onPostExecute ( Result result ) { if ( result != null && downloadListener != null ) { downloadListener . onDownloadingFinished ( result ); } } @Override protected void onProgressUpdate ( Integer ... values ) { super . onProgressUpdate ( values ); //downloadListener.onProgressUpdate(int progressCode, int percentComplete); // ^ todo define a way for showing partial updated } @Override protected void onCancelled () { super . onCancelled (); } }","title":"The Downloader Asynctask"},{"location":"tab_blogs/android/networking/networking_get_post_native/#the-network-fragment","text":"This is the main Fragment that will be handling Downloader's Instance and preventing it from getting killed on changes like activity pausing or Screen getting rotated. It is not as permanent solution as that of a forgeround service(forground, because background service is now deprecated), which could run even if activity is destroyed, but it is still a hard core solution for downloading without worrying about configuration changes or screen lock or pause/play stuff . More about Headless fragment is discussed here . public class NetworkFragment2 extends Fragment { private static final String TAG = \"NetworkFragment\" ; private static final String URL_KEY = \"UrlKey\" ; private @Nullable DownloadListener < String > downloadListener ; private DownloadTask downloadTask ; private String urlString ; static NetworkFragment2 getInstance ( FragmentManager fragmentManager , String url ) { NetworkFragment2 networkFragment = new NetworkFragment2 (); Bundle args = new Bundle (); args . putString ( URL_KEY , url ); networkFragment . setArguments ( args ); fragmentManager . beginTransaction (). add ( networkFragment , TAG ). commit (); return networkFragment ; } @Override public void onCreate ( @Nullable Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); if ( getArguments () != null ) { urlString = getArguments (). getString ( URL_KEY ); } } @Override public void onAttach ( @NonNull Context context ) { super . onAttach ( context ); downloadListener = ( DownloadListener < String > ) context ; } @Override public void onDetach () { super . onDetach (); downloadListener = null ; } @Override public void onDestroy () { cancelDownload (); super . onDestroy (); } void startDownload () { cancelDownload (); downloadTask = new DownloadTask ( downloadListener ); downloadTask . execute ( urlString ); } void cancelDownload () { if ( downloadTask != null ) { downloadTask . cancel ( true ); } } }","title":"The Network Fragment"},{"location":"tab_blogs/android/networking/networking_get_post_native/#the-activity-class","text":"finally the activity class. We simply create an instance of network fragment(which automatically attaches itself to our activity) and implement the downloadlistener callback. public class MainActivity extends AppCompatActivity implements DownloadListener < String > { private NetworkFragment2 networkFragment ; private boolean isDownloading = false ; TextView tvText ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_main ); //tvText = findViewById(R.id.tv_text); String api = \"http://a.vdo.ai/core/ir24/ads_vmap.php\" ; networkFragment = NetworkFragment2 . getInstance ( getSupportFragmentManager (), api ); //NetworkFragment2.DownloadListener<String> listener = getNetWorkListener(); //can't do above thing. in this method, we are creating a fragment that // gets attached to our view, so our view must have those methods defined already, // and it will call those methods when needed. We will rather just press //start here or in onStart and let fragment call them on its own startConnection (); } private void startConnection () { if ( ! isDownloading && networkFragment != null ) { // Execute the async download. networkFragment . startDownload (); isDownloading = true ; } } //-----------------------funcs called by fragment's callbacks----------------------------------- @Override public void updateFromDownloader ( Result result ) { updateUiFromResult ( result ); } private void updateUiFromResult ( Result result ) { if ( result . exception != null ) { tvText . setText ( \"ErrorOccurred!\" + result . exception . getMessage ()); } else if ( result . resultValue != null ) { tvText . setText ( result . resultValue ); } } @Override public NetworkInfo getActiveNetworkInfo () { ConnectivityManager connectivityManager = ( ConnectivityManager ) getSystemService ( Context . CONNECTIVITY_SERVICE ); if ( connectivityManager != null ) { NetworkInfo networkInfo = connectivityManager . getActiveNetworkInfo (); return networkInfo ; } return null ; } @Override public void onProgressUpdate ( int progressCode , int percentComplete ) { updateUiWithDownloaderMetaData ( progressCode , percentComplete ); } private void updateUiWithDownloaderMetaData ( int progressCode , int percentComplete ) { switch ( progressCode ) { // You can add UI behavior for progress updates here. // its not being handled in fragment. its like we assumed there is a pipe with flowing // water and we attached our nozel to it, but there is no one sending water to this // pipe. no code is sending updates , so these will never be called. case Progress . ERROR : tvText . append ( \"\\n==================================\\nERROR_HAPPENED\" ); break ; case Progress . CONNECT_SUCCESS : tvText . append ( \"\\n==================================\\nCONNECT_SUCCESS\" ); break ; case Progress . GET_INPUT_STREAM_SUCCESS : tvText . append ( \"\\n==================================\\nGET_INPUT_STREAM_SUCCESS\" ); break ; case Progress . PROCESS_INPUT_STREAM_IN_PROGRESS : tvText . append ( \"\\n==================================\\nPROCESS_INPUT_STREAM_IN_PROGRESS\" ); break ; case Progress . PROCESS_INPUT_STREAM_SUCCESS : tvText . append ( \"\\n==================================\\nPROCESS_INPUT_STREAM_SUCCESS\" ); break ; } } @Override public void onDownloadingFinished ( Result result ) { closeConnection ( result ); } private void closeConnection ( Result result ) { isDownloading = false ; if ( networkFragment != null ) { networkFragment . cancelDownload (); } } //-------------------------------------------------------------------------------------------- // not useful anymore function: private DownloadListener < String > getNetWorkListener () { return new DownloadListener < String > () { @Override public void updateFromDownloader ( Result result ) { updateUiFromResult ( result ); } @Override public NetworkInfo getActiveNetworkInfo () { ConnectivityManager connectivityManager = ( ConnectivityManager ) getSystemService ( Context . CONNECTIVITY_SERVICE ); if ( connectivityManager != null ) { NetworkInfo networkInfo = connectivityManager . getActiveNetworkInfo (); return networkInfo ; } return null ; } @Override public void onProgressUpdate ( int progressCode , int percentComplete ) { updateUiWithDownloaderMetaData ( progressCode , percentComplete ); } @Override public void onDownloadingFinished ( Result result ) { closeConnection ( result ); } }; } } Well that's it.I usually have these all as just 2 classes instead of 4: - MainActivity implements...{...} - NetWorkFragment{ - Result{...} - DownloadListener{...} - DownloaderTask{...} } Next, We would be seeing how Simple it is to download a response via okhttp or volley. its so small , that it would be covered in first quarter of article and later we would rather be covering more advance topics like conveting this reponse string to a list of objects, downloading images, etc.","title":"The Activity class"},{"location":"tab_blogs/android/networking/networking_get_post_okhttp/","text":"Networking Basics : Making a Get Post Connection(Okhttp) In the 1st article of Networking series we, discussed the different terminologies related to networking in Android, along with some basic steps. As per 1st article, - We need Internet and access network Permissions for creating a connection - We might need to check for Internet availability before making a connection and during the data transfer(usually handled automatically) (refer 1st article ) okhttp This is not as advanced as volley library, but still reduces our code by a lot. It was originally made to be an internal part of retrofit library, which is the actual massive library for multiple usages, but on popular demand, it was derived as a separate library for simpler use cases . thus we have to handle the asynchronous threading of netwrk by ourselves. Adding to project: implementation 'com.squareup.okhttp3:okhttp:4.0.0-RC1' Usage(theory): meh. see code. very small stuff Usage (Code): public class Activity3 extends AppCompatActivity { private static final String TAG = \"Activity3>>\" ; TextView tv3 ; Button bt3 ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_3 ); tv3 = findViewById ( R . id . tv3 ); bt3 = findViewById ( R . id . bt3 ); bt3 . setOnClickListener ( v -> startNetworkRequest ()); } private void startNetworkRequest () { String pagesize = \"5\" ; String order = \"desc\" ; String urlPost = \"http://api.stackexchange.com/2.2/questions?\" ; String urlGet = \"https://api.stackexchange.com/2.2/questions?pagesize=5&order=desc\" ; new Thread (() -> { String responseGet = apiRequestGet ( urlGet ); // String responsePost=apiRequestPOST(urlPost,pagesize,order);// can't check,not sure about it runOnUiThread (() -> tv3 . setText ( responseGet )); }). start (); } private String apiRequestGet ( String urlToUploadto ) { String responseJsonString = \"\" ; OkHttpClient client = new OkHttpClient (); Request request = new Request . Builder (). url ( urlToUploadto ). build (); try { Response response = client . newCall ( request ). execute (); responseJsonString = response . body (). string (); } catch ( IOException e ) { e . printStackTrace (); //this might be caused due response is not being recieved } return responseJsonString ; } private String apiRequestPOST ( String urlToUploadto , String pagesize , String order ) { String responseJsonString = \"\" ; OkHttpClient client = new OkHttpClient (); RequestBody jsonFormBody = new FormBody . Builder () . add ( \"pagesize\" , pagesize ) . add ( \"order\" , order ). build (); Request request = new Request . Builder (). url ( urlToUploadto ). post ( jsonFormBody ). build (); try { Response response = client . newCall ( request ). execute (); responseJsonString = response . body (). string (); } catch ( IOException e ) { e . printStackTrace (); //this might be caused due response is not being recieved } return responseJsonString ; } Advance Operations: there is an excellent guide at https://github.com/chaostools/okhttp/blob/master/RECIPES.md (my fork of ok http, just in case ok http removes them later) covering some advanced usecases like video streaming post, response caching, etc","title":"Part4, OkHttp"},{"location":"tab_blogs/android/networking/networking_get_post_okhttp/#networking-basics-making-a-get-post-connectionokhttp","text":"In the 1st article of Networking series we, discussed the different terminologies related to networking in Android, along with some basic steps. As per 1st article, - We need Internet and access network Permissions for creating a connection - We might need to check for Internet availability before making a connection and during the data transfer(usually handled automatically) (refer 1st article )","title":"Networking Basics : Making a Get Post Connection(Okhttp)"},{"location":"tab_blogs/android/networking/networking_get_post_okhttp/#okhttp","text":"This is not as advanced as volley library, but still reduces our code by a lot. It was originally made to be an internal part of retrofit library, which is the actual massive library for multiple usages, but on popular demand, it was derived as a separate library for simpler use cases . thus we have to handle the asynchronous threading of netwrk by ourselves.","title":"okhttp"},{"location":"tab_blogs/android/networking/networking_get_post_okhttp/#adding-to-project","text":"implementation 'com.squareup.okhttp3:okhttp:4.0.0-RC1'","title":"Adding to project:"},{"location":"tab_blogs/android/networking/networking_get_post_okhttp/#usagetheory","text":"meh. see code. very small stuff","title":"Usage(theory):"},{"location":"tab_blogs/android/networking/networking_get_post_okhttp/#usage-code","text":"public class Activity3 extends AppCompatActivity { private static final String TAG = \"Activity3>>\" ; TextView tv3 ; Button bt3 ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_3 ); tv3 = findViewById ( R . id . tv3 ); bt3 = findViewById ( R . id . bt3 ); bt3 . setOnClickListener ( v -> startNetworkRequest ()); } private void startNetworkRequest () { String pagesize = \"5\" ; String order = \"desc\" ; String urlPost = \"http://api.stackexchange.com/2.2/questions?\" ; String urlGet = \"https://api.stackexchange.com/2.2/questions?pagesize=5&order=desc\" ; new Thread (() -> { String responseGet = apiRequestGet ( urlGet ); // String responsePost=apiRequestPOST(urlPost,pagesize,order);// can't check,not sure about it runOnUiThread (() -> tv3 . setText ( responseGet )); }). start (); } private String apiRequestGet ( String urlToUploadto ) { String responseJsonString = \"\" ; OkHttpClient client = new OkHttpClient (); Request request = new Request . Builder (). url ( urlToUploadto ). build (); try { Response response = client . newCall ( request ). execute (); responseJsonString = response . body (). string (); } catch ( IOException e ) { e . printStackTrace (); //this might be caused due response is not being recieved } return responseJsonString ; } private String apiRequestPOST ( String urlToUploadto , String pagesize , String order ) { String responseJsonString = \"\" ; OkHttpClient client = new OkHttpClient (); RequestBody jsonFormBody = new FormBody . Builder () . add ( \"pagesize\" , pagesize ) . add ( \"order\" , order ). build (); Request request = new Request . Builder (). url ( urlToUploadto ). post ( jsonFormBody ). build (); try { Response response = client . newCall ( request ). execute (); responseJsonString = response . body (). string (); } catch ( IOException e ) { e . printStackTrace (); //this might be caused due response is not being recieved } return responseJsonString ; }","title":"Usage (Code):"},{"location":"tab_blogs/android/networking/networking_get_post_okhttp/#advance-operations","text":"there is an excellent guide at https://github.com/chaostools/okhttp/blob/master/RECIPES.md (my fork of ok http, just in case ok http removes them later) covering some advanced usecases like video streaming post, response caching, etc","title":"Advance Operations:"},{"location":"tab_blogs/android/networking/networking_get_post_retrofit/","text":"Networking Basics : Making a Get Post Connection(Volley) Bug This library is fairly advanced and i have covered a very small part of it. In the 1st article of Networking series we, discussed the different terminologies related to networking in Android, along with some basic steps. As per 1st article, - We need Internet and access network Permissions for creating a connection - We might need to check for Internet availability before making a connection and during the data transfer(usually handled automatically) (refer 1st article ) We also saw how volley and okhttp are used to perform network calling and parsing so easy. They were also able to handle get/post requests . Now let's checkout Retrofit, a special library specifically designed for advanced network requests and continuous calling Retrofit. Retrofit is an advance networking library by square. It can do a lot of powerful operations, so we will learn about them when they come up. For now, let\u2019s work on creating a simple stackoverflow app. Implementation implementation 'com.squareup.retrofit2:retrofit:2.6.0' implementation 'com.squareup.retrofit2:converter-gson:2.6.0' Usage(Theory). Retrofit doesn\u2019t do any networking by itself. It is build upon okhttp layer which handles.Its basic usage is very similar to that of volley. suppose we want to receive list of user \u2018root-ansh\u2019 repos from the following github api: https://api.github.com/users/root-ansh/repos . here, Https://api.github.com/ is the base url and users/{user-name}/repos is a dynamic query url. The query gives the following result: Usage(Code). 1.Define a model class for GSON. As we can see, the root itself is of type jsonArray. If you had this response as a string, you would have to use the previous mentioned json code to extract value of name key(3rd key in 0{} ) In retrofit, we define a model like this: public class GitHubRepo { // the class name could be anything we like private String name ; //note that this var name should be exactly same as the key name in response or use @SerializedName(\"key\") annotatation public GitHubRepo ( String name ) { this . name = name ;} public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } } 2. Define a response client interface. public interface GitHubClient { @GET ( Constants . DYNAMIC_QUERY_URL ) //String DYNAMIC_QUERY_URL=\"/users/{user}/repos\"; Call < List < GitHubRepo >> getReposForUser ( @Path ( \"user\" ) String user ); // another cool way(not used in this project) @GET ( \"answers\" ) Call < StackApiResponse > getAnswers ( @Query ( \"page\" ) int page , @Query ( \"pagesize\" ) int pagesize , @Query ( \"site\" ) String site ); //actual complete api = https://api.stackexchange.com/2.2/answers?page=1&pagesize=50&site=stackoverflow // thus the getter part = answers?page=1&pagesize=50&site=stackoverflow , being created dynamically } 3. In main Activity. Our network call would be made on a We follow the following steps: Create a pojo convertor instance. Create retrofit instance using baseurl and pojo convertor Create the response client interface instance Create a Retrofit Call using client instance Create a response handler which will receive asynchronously updates from the network call(There is a synchnous(on the same thread) method to do this too.) Start the network call using call.enque(response handler) @Override protected void onCreate ( Bundle savedInstanceState ) { ... String baseurl = Constants . BASE_URL ; String userName = \"root-ansh\" ; bt4 . setOnClickListener ( v -> { GsonConverterFactory pojoConvertor = GsonConverterFactory . create (); //step 1 Retrofit retrofit = new Retrofit . Builder (). baseUrl ( baseurl ). addConverterFactory ( pojoConvertor ). build (); //step2 GitHubClient client = retrofit . create ( GitHubClient . class ); //step3 Call < ArrayList < GitHubRepo >> call = client . getReposForUser ( userName ); //step4 Callback < ArrayList < GitHubRepo >> responseHandler = getResponseHandler (); //step5 call . enqueue ( responseHandler ); //step6 }); } //step4 private Callback < ArrayList < GitHubRepo >> getResponseHandler () { return new Callback < ArrayList < GitHubRepo >> () { @Override public void onResponse ( @NotNull Call < ArrayList < GitHubRepo >> call , @NotNull Response < ArrayList < GitHubRepo >> response ) { ArrayList < GitHubRepo > respReposList = response . body (); if ( respReposList != null ) { tv4 . setText ( respReposList . toString ()); } } @Override public void onFailure ( @NotNull Call < ArrayList < GitHubRepo >> call , @NotNull Throwable t ) { tv4 . setText ( String . format ( \"%s\" , t )); } }; } Other Resources There can be some advance usages like creating a post request( i.e passing objects in the network call) or creating a synchronous call or calling for nested attributes, etc. More are covered here : https://academy.realm.io/posts/advanced-retrofit-mobilization-2017/","title":"Part5, Retrofit"},{"location":"tab_blogs/android/networking/networking_get_post_retrofit/#networking-basics-making-a-get-post-connectionvolley","text":"Bug This library is fairly advanced and i have covered a very small part of it. In the 1st article of Networking series we, discussed the different terminologies related to networking in Android, along with some basic steps. As per 1st article, - We need Internet and access network Permissions for creating a connection - We might need to check for Internet availability before making a connection and during the data transfer(usually handled automatically) (refer 1st article ) We also saw how volley and okhttp are used to perform network calling and parsing so easy. They were also able to handle get/post requests . Now let's checkout Retrofit, a special library specifically designed for advanced network requests and continuous calling","title":"Networking Basics : Making a Get Post Connection(Volley)"},{"location":"tab_blogs/android/networking/networking_get_post_retrofit/#retrofit","text":"Retrofit is an advance networking library by square. It can do a lot of powerful operations, so we will learn about them when they come up. For now, let\u2019s work on creating a simple stackoverflow app.","title":"Retrofit."},{"location":"tab_blogs/android/networking/networking_get_post_retrofit/#implementation","text":"implementation 'com.squareup.retrofit2:retrofit:2.6.0' implementation 'com.squareup.retrofit2:converter-gson:2.6.0'","title":"Implementation"},{"location":"tab_blogs/android/networking/networking_get_post_retrofit/#usagetheory","text":"Retrofit doesn\u2019t do any networking by itself. It is build upon okhttp layer which handles.Its basic usage is very similar to that of volley. suppose we want to receive list of user \u2018root-ansh\u2019 repos from the following github api: https://api.github.com/users/root-ansh/repos . here, Https://api.github.com/ is the base url and users/{user-name}/repos is a dynamic query url. The query gives the following result:","title":"Usage(Theory)."},{"location":"tab_blogs/android/networking/networking_get_post_retrofit/#usagecode","text":"1.Define a model class for GSON. As we can see, the root itself is of type jsonArray. If you had this response as a string, you would have to use the previous mentioned json code to extract value of name key(3rd key in 0{} ) In retrofit, we define a model like this: public class GitHubRepo { // the class name could be anything we like private String name ; //note that this var name should be exactly same as the key name in response or use @SerializedName(\"key\") annotatation public GitHubRepo ( String name ) { this . name = name ;} public String getName () { return name ; } public void setName ( String name ) { this . name = name ; } } 2. Define a response client interface. public interface GitHubClient { @GET ( Constants . DYNAMIC_QUERY_URL ) //String DYNAMIC_QUERY_URL=\"/users/{user}/repos\"; Call < List < GitHubRepo >> getReposForUser ( @Path ( \"user\" ) String user ); // another cool way(not used in this project) @GET ( \"answers\" ) Call < StackApiResponse > getAnswers ( @Query ( \"page\" ) int page , @Query ( \"pagesize\" ) int pagesize , @Query ( \"site\" ) String site ); //actual complete api = https://api.stackexchange.com/2.2/answers?page=1&pagesize=50&site=stackoverflow // thus the getter part = answers?page=1&pagesize=50&site=stackoverflow , being created dynamically } 3. In main Activity. Our network call would be made on a We follow the following steps: Create a pojo convertor instance. Create retrofit instance using baseurl and pojo convertor Create the response client interface instance Create a Retrofit Call using client instance Create a response handler which will receive asynchronously updates from the network call(There is a synchnous(on the same thread) method to do this too.) Start the network call using call.enque(response handler) @Override protected void onCreate ( Bundle savedInstanceState ) { ... String baseurl = Constants . BASE_URL ; String userName = \"root-ansh\" ; bt4 . setOnClickListener ( v -> { GsonConverterFactory pojoConvertor = GsonConverterFactory . create (); //step 1 Retrofit retrofit = new Retrofit . Builder (). baseUrl ( baseurl ). addConverterFactory ( pojoConvertor ). build (); //step2 GitHubClient client = retrofit . create ( GitHubClient . class ); //step3 Call < ArrayList < GitHubRepo >> call = client . getReposForUser ( userName ); //step4 Callback < ArrayList < GitHubRepo >> responseHandler = getResponseHandler (); //step5 call . enqueue ( responseHandler ); //step6 }); } //step4 private Callback < ArrayList < GitHubRepo >> getResponseHandler () { return new Callback < ArrayList < GitHubRepo >> () { @Override public void onResponse ( @NotNull Call < ArrayList < GitHubRepo >> call , @NotNull Response < ArrayList < GitHubRepo >> response ) { ArrayList < GitHubRepo > respReposList = response . body (); if ( respReposList != null ) { tv4 . setText ( respReposList . toString ()); } } @Override public void onFailure ( @NotNull Call < ArrayList < GitHubRepo >> call , @NotNull Throwable t ) { tv4 . setText ( String . format ( \"%s\" , t )); } }; }","title":"Usage(Code)."},{"location":"tab_blogs/android/networking/networking_get_post_retrofit/#other-resources","text":"There can be some advance usages like creating a post request( i.e passing objects in the network call) or creating a synchronous call or calling for nested attributes, etc. More are covered here : https://academy.realm.io/posts/advanced-retrofit-mobilization-2017/","title":"Other Resources"},{"location":"tab_blogs/android/networking/networking_get_post_volley/","text":"Networking Basics : Making a Get Post Connection(Volley) In the 1st article of Networking series we, discussed the different terminologies related to networking in Android, along with some basic steps. As per 1st article, - We need Internet and access network Permissions for creating a connection - We might need to check for Internet availability before making a connection and during the data transfer(usually handled automatically) (refer 1st article ) In the 2nd article , we saw how data can be downloaded using network fragment as a response string and how it could be set on the ui straightly.But production level apps doesn\u2019t do that.They rather have a pretty ui where the data is set with full animations and loading screens. Even when we say \"reponse string\", we meant something like this: { \"items\" : [ { \"owner\" : { \"reputation\" : 36476 , \"user_id\" : 7207392 , \"user_type\" : \"registered\" , \"accept_rate\" : 73 , \"profile_image\" : \"https://www.gravatar.com/avatar/dadc9567dde5f02b09a29695eca1ce40?s=128&d=identicon&r=PG&f=1\" , \"display_name\" : \"Paul Panzer\" , \"link\" : \"https://stackoverflow.com/users/7207392/paul-panzer\" }, \"is_accepted\" : false , \"score\" : 0 , \"last_activity_date\" : 1570568059 , \"last_edit_date\" : 1570568059 , \"creation_date\" : 1570566735 , \"answer_id\" : 58293716 , \"question_id\" : 58292546 }, { \"owner\" : { \"reputation\" : 21 , \"user_id\" : 12165300 , \"user_type\" : \"registered\" , \"profile_image\" : \"https://www.gravatar.com/avatar/05ad0547978cace7429e947736861196?s=128&d=identicon&r=PG&f=1\" , \"display_name\" : \"rsomji\" , \"link\" : \"https://stackoverflow.com/users/12165300/rsomji\" }, \"is_accepted\" : false , \"score\" : 0 , \"last_activity_date\" : 1570568055 , \"creation_date\" : 1570568055 , \"answer_id\" : 58293951 , \"question_id\" : 58289314 }, { \"owner\" : { \"reputation\" : 1982 , \"user_id\" : 2042457 , \"user_type\" : \"registered\" , \"accept_rate\" : 56 , \"profile_image\" : \"https://i.stack.imgur.com/xQVEN.jpg?s=128&g=1\" , \"display_name\" : \"aksappy\" , \"link\" : \"https://stackoverflow.com/users/2042457/aksappy\" }, \"is_accepted\" : false , \"score\" : 0 , \"last_activity_date\" : 1570568054 , \"creation_date\" : 1570568054 , \"answer_id\" : 58293950 , \"question_id\" : 58290873 }, { \"owner\" : { \"reputation\" : 472124 , \"user_id\" : 1491895 , \"user_type\" : \"registered\" , \"accept_rate\" : 69 , \"profile_image\" : \"https://www.gravatar.com/avatar/82f9e178a16364bf561d0ed4da09a35d?s=128&d=identicon&r=PG\" , \"display_name\" : \"Barmar\" , \"link\" : \"https://stackoverflow.com/users/1491895/barmar\" }, \"is_accepted\" : true , \"score\" : 1 , \"last_activity_date\" : 1570568051 , \"last_edit_date\" : 1570568051 , \"creation_date\" : 1570514725 , \"answer_id\" : 58280936 , \"question_id\" : 58280903 }, { \"owner\" : { \"reputation\" : 220 , \"user_id\" : 11601996 , \"user_type\" : \"registered\" , \"profile_image\" : \"https://www.gravatar.com/avatar/51c452c987f2541f3c4d661a80359878?s=128&d=identicon&r=PG&f=1\" , \"display_name\" : \"Peter Li\" , \"link\" : \"https://stackoverflow.com/users/11601996/peter-li\" }, \"is_accepted\" : false , \"score\" : 0 , \"last_activity_date\" : 1570568046 , \"creation_date\" : 1570568046 , \"answer_id\" : 58293947 , \"question_id\" : 58264206 } ], \"has_more\" : true , \"backoff\" : 10 , \"quota_max\" : 10000 , \"quota_remaining\" : 9995 } This is a reponse from the stack overflow Answers API .It has various fileds like questionid, answereId, creationdata, etc but we didn\u2019t even converted this json string to some list of objects or strings, we just dumped it in our textview as it is. In a prettier version of our app : 1. Our data string would have been downloaded in a background thread, just like this 2. there would have been a recyclerview showing each question , with picture in left , title in top and subtitle below that. 3. We would then define a class \u2018EachRowData\u2019 with fields like id, question title, answertitle , creation date,etc ., with all those constructers and getters and setters 4. We would then convert out downloaded jsonString to the List by first converting this string to JSONObject class\u2019s object and then iterating through each object.This process is called converting from JSON to POJO (POJO:plain old java object) These are a lot of steps and their code, as we know, ends up being a massive monster. So there are many libraries build to perform above tasks in a simpler manner. - Volley/Okhttp/Retrofit are libraries which simplifies the process of downloading jsonString from api ( and some other tasks) GSON is a popuar google library used for converting the json to pojo. Picasso/glide/fresco/volley image are libraries build to simplify downloading and displaying of images. This is because a downloaded bitstream would not be converted to a string and would require some extra functions like scaling ,transformation,etc volley Volley is an HTTP library that makes networking for Android apps easier and, most importantly, faster. For more information about Volley and how to use it, visit the Android developer training page . Adding to project: Implementation 'com.android.volley:volley:1.1.1' Usage(theory): create a response listener create an error listener create a response request create a request queue add request to queue Usage (Code): public class Activity2 extends AppCompatActivity { TextView tv2 ; Button bt2 ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_2 ); tv2 = findViewById ( R . id . tv2 ); bt2 = findViewById ( R . id . bt2 ); String url = \"https://api.stackexchange.com/2.2/questions?pagesize=5&order=desc&sort=activity&site=stackoverflow\" ; Response . Listener < String > responseListener = getResponseListener (); Response . ErrorListener errorListener = getErrorListener (); StringRequest stringRequest = new StringRequest ( Request . Method . GET , url , responseListener , errorListener ); RequestQueue queue = Volley . newRequestQueue ( this ); bt2 . setOnClickListener ( v -> queue . add ( stringRequest )); } private Response . ErrorListener getErrorListener () { return new Response . ErrorListener () { @Override public void onErrorResponse ( VolleyError error ) { tv2 . setText ( \"That didn't work!\" ); }}; } private Response . Listener < String > getResponseListener () { return new Response . Listener < String > () { @Override public void onResponse ( String response ) { // Display the first 500 characters of the response string. tv2 . setText ( \"Response is:\\n\" + response ); } }; } Advantages of volley: Automatic scheduling of network requests. Multiple concurrent network connections. Transparent disk and memory response caching with standard HTTP cache coherence. Support for request prioritization. Cancellation request API. You can cancel a single request, or you can set blocks or scopes of requests to cancel. Ease of customization, for example, for retry and backoff. Strong ordering that makes it easy to correctly populate your UI with data fetched asynchronously from the network. Debugging and tracing tools. Advance Operations: Post Request https://stackoverflow.com/a/33578202 Handling request cancelling //before adding string request in queue: Object TAG = \"Hi\" ; stringRequest . setTag ( TAG ); // cancelling the request on click: btCancelLoading . setOnClickListener ( v -> { queue . cancelAll ( TAG ); }); Making a custom Network queue with custom caching and thread handling : https://developer.android.com/training/volley/requestqueue Making a custom Network request : like a direct json object request or direct pojo request : https://developer.android.com/training/volley/request-custom#example:-gsonrequest . the example there shows ho we can use gson library alongside volley to directly receive a list of pojos by extending Network request class","title":"Part3, Volley"},{"location":"tab_blogs/android/networking/networking_get_post_volley/#networking-basics-making-a-get-post-connectionvolley","text":"In the 1st article of Networking series we, discussed the different terminologies related to networking in Android, along with some basic steps. As per 1st article, - We need Internet and access network Permissions for creating a connection - We might need to check for Internet availability before making a connection and during the data transfer(usually handled automatically) (refer 1st article ) In the 2nd article , we saw how data can be downloaded using network fragment as a response string and how it could be set on the ui straightly.But production level apps doesn\u2019t do that.They rather have a pretty ui where the data is set with full animations and loading screens. Even when we say \"reponse string\", we meant something like this: { \"items\" : [ { \"owner\" : { \"reputation\" : 36476 , \"user_id\" : 7207392 , \"user_type\" : \"registered\" , \"accept_rate\" : 73 , \"profile_image\" : \"https://www.gravatar.com/avatar/dadc9567dde5f02b09a29695eca1ce40?s=128&d=identicon&r=PG&f=1\" , \"display_name\" : \"Paul Panzer\" , \"link\" : \"https://stackoverflow.com/users/7207392/paul-panzer\" }, \"is_accepted\" : false , \"score\" : 0 , \"last_activity_date\" : 1570568059 , \"last_edit_date\" : 1570568059 , \"creation_date\" : 1570566735 , \"answer_id\" : 58293716 , \"question_id\" : 58292546 }, { \"owner\" : { \"reputation\" : 21 , \"user_id\" : 12165300 , \"user_type\" : \"registered\" , \"profile_image\" : \"https://www.gravatar.com/avatar/05ad0547978cace7429e947736861196?s=128&d=identicon&r=PG&f=1\" , \"display_name\" : \"rsomji\" , \"link\" : \"https://stackoverflow.com/users/12165300/rsomji\" }, \"is_accepted\" : false , \"score\" : 0 , \"last_activity_date\" : 1570568055 , \"creation_date\" : 1570568055 , \"answer_id\" : 58293951 , \"question_id\" : 58289314 }, { \"owner\" : { \"reputation\" : 1982 , \"user_id\" : 2042457 , \"user_type\" : \"registered\" , \"accept_rate\" : 56 , \"profile_image\" : \"https://i.stack.imgur.com/xQVEN.jpg?s=128&g=1\" , \"display_name\" : \"aksappy\" , \"link\" : \"https://stackoverflow.com/users/2042457/aksappy\" }, \"is_accepted\" : false , \"score\" : 0 , \"last_activity_date\" : 1570568054 , \"creation_date\" : 1570568054 , \"answer_id\" : 58293950 , \"question_id\" : 58290873 }, { \"owner\" : { \"reputation\" : 472124 , \"user_id\" : 1491895 , \"user_type\" : \"registered\" , \"accept_rate\" : 69 , \"profile_image\" : \"https://www.gravatar.com/avatar/82f9e178a16364bf561d0ed4da09a35d?s=128&d=identicon&r=PG\" , \"display_name\" : \"Barmar\" , \"link\" : \"https://stackoverflow.com/users/1491895/barmar\" }, \"is_accepted\" : true , \"score\" : 1 , \"last_activity_date\" : 1570568051 , \"last_edit_date\" : 1570568051 , \"creation_date\" : 1570514725 , \"answer_id\" : 58280936 , \"question_id\" : 58280903 }, { \"owner\" : { \"reputation\" : 220 , \"user_id\" : 11601996 , \"user_type\" : \"registered\" , \"profile_image\" : \"https://www.gravatar.com/avatar/51c452c987f2541f3c4d661a80359878?s=128&d=identicon&r=PG&f=1\" , \"display_name\" : \"Peter Li\" , \"link\" : \"https://stackoverflow.com/users/11601996/peter-li\" }, \"is_accepted\" : false , \"score\" : 0 , \"last_activity_date\" : 1570568046 , \"creation_date\" : 1570568046 , \"answer_id\" : 58293947 , \"question_id\" : 58264206 } ], \"has_more\" : true , \"backoff\" : 10 , \"quota_max\" : 10000 , \"quota_remaining\" : 9995 } This is a reponse from the stack overflow Answers API .It has various fileds like questionid, answereId, creationdata, etc but we didn\u2019t even converted this json string to some list of objects or strings, we just dumped it in our textview as it is. In a prettier version of our app : 1. Our data string would have been downloaded in a background thread, just like this 2. there would have been a recyclerview showing each question , with picture in left , title in top and subtitle below that. 3. We would then define a class \u2018EachRowData\u2019 with fields like id, question title, answertitle , creation date,etc ., with all those constructers and getters and setters 4. We would then convert out downloaded jsonString to the List by first converting this string to JSONObject class\u2019s object and then iterating through each object.This process is called converting from JSON to POJO (POJO:plain old java object) These are a lot of steps and their code, as we know, ends up being a massive monster. So there are many libraries build to perform above tasks in a simpler manner. - Volley/Okhttp/Retrofit are libraries which simplifies the process of downloading jsonString from api ( and some other tasks) GSON is a popuar google library used for converting the json to pojo. Picasso/glide/fresco/volley image are libraries build to simplify downloading and displaying of images. This is because a downloaded bitstream would not be converted to a string and would require some extra functions like scaling ,transformation,etc","title":"Networking Basics : Making a Get Post Connection(Volley)"},{"location":"tab_blogs/android/networking/networking_get_post_volley/#volley","text":"Volley is an HTTP library that makes networking for Android apps easier and, most importantly, faster. For more information about Volley and how to use it, visit the Android developer training page .","title":"volley"},{"location":"tab_blogs/android/networking/networking_get_post_volley/#adding-to-project","text":"Implementation 'com.android.volley:volley:1.1.1'","title":"Adding to project:"},{"location":"tab_blogs/android/networking/networking_get_post_volley/#usagetheory","text":"create a response listener create an error listener create a response request create a request queue add request to queue","title":"Usage(theory):"},{"location":"tab_blogs/android/networking/networking_get_post_volley/#usage-code","text":"public class Activity2 extends AppCompatActivity { TextView tv2 ; Button bt2 ; @Override protected void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ); setContentView ( R . layout . activity_2 ); tv2 = findViewById ( R . id . tv2 ); bt2 = findViewById ( R . id . bt2 ); String url = \"https://api.stackexchange.com/2.2/questions?pagesize=5&order=desc&sort=activity&site=stackoverflow\" ; Response . Listener < String > responseListener = getResponseListener (); Response . ErrorListener errorListener = getErrorListener (); StringRequest stringRequest = new StringRequest ( Request . Method . GET , url , responseListener , errorListener ); RequestQueue queue = Volley . newRequestQueue ( this ); bt2 . setOnClickListener ( v -> queue . add ( stringRequest )); } private Response . ErrorListener getErrorListener () { return new Response . ErrorListener () { @Override public void onErrorResponse ( VolleyError error ) { tv2 . setText ( \"That didn't work!\" ); }}; } private Response . Listener < String > getResponseListener () { return new Response . Listener < String > () { @Override public void onResponse ( String response ) { // Display the first 500 characters of the response string. tv2 . setText ( \"Response is:\\n\" + response ); } }; } Advantages of volley: Automatic scheduling of network requests. Multiple concurrent network connections. Transparent disk and memory response caching with standard HTTP cache coherence. Support for request prioritization. Cancellation request API. You can cancel a single request, or you can set blocks or scopes of requests to cancel. Ease of customization, for example, for retry and backoff. Strong ordering that makes it easy to correctly populate your UI with data fetched asynchronously from the network. Debugging and tracing tools.","title":"Usage (Code):"},{"location":"tab_blogs/android/networking/networking_get_post_volley/#advance-operations","text":"Post Request https://stackoverflow.com/a/33578202 Handling request cancelling //before adding string request in queue: Object TAG = \"Hi\" ; stringRequest . setTag ( TAG ); // cancelling the request on click: btCancelLoading . setOnClickListener ( v -> { queue . cancelAll ( TAG ); }); Making a custom Network queue with custom caching and thread handling : https://developer.android.com/training/volley/requestqueue Making a custom Network request : like a direct json object request or direct pojo request : https://developer.android.com/training/volley/request-custom#example:-gsonrequest . the example there shows ho we can use gson library alongside volley to directly receive a list of pojos by extending Network request class","title":"Advance Operations:"},{"location":"tab_blogs/assistant/404/","text":"4004 Will add stuff later","title":"Introduction(inc)"},{"location":"tab_blogs/assistant/404/#4004","text":"Will add stuff later","title":"4004"},{"location":"tab_blogs/blockchain/public_and_private_key/","text":"Public and Private Keys (Todo: add introduction pages about blockchain) I have been thinking about learning blockchain for so long, But i didn't ever gave it some serious thoughts or inputs. Everyone I try talking to, they are like, saying random combination of sexy phrases like \"Encrypted\", \"Public key/private key\", \"Super secure\" , \"Hash\" ,\"Distributed\", ... etc , and although i can't make sense about it for most of the time, I get prety excited about it. Yesterday I was watching a techalter video on something similar topic. And he gave a very nice analogy of public and private key : think of it as your email id and password . For eg, a Public Key could look like: c344c090-6652-4678-8215-1338acd2f102 a Private Key could look like: b9ef4856-ebdc-4b85-8c3f-c3455c25540f Google knew its difficult to remember this, so in gmail, a Public Key could look like: anshsachdeva.w.5798@gmail.com a Private Key could look like: mySuperSecretpassword123 Characterstics of a public key: - It is unique in nature and is somewhat controlled by the issuer of the key( like every gmail has @gmail.com at the end) - It is visible to anyone, so that they can contact you. - It thus acts as your identity on a network. - It can be very less harmful on its own, as a threat cannot retrieve your other info or details via this key.the only way to do that will be to hack the key provider's server(google in this case), which is a non avoidable problem from your end, or somehow lure YOU into interacting with his action( like writing a phisihing mail that could lure you into giving private details to hacker), but accessing that action would also require private key. Characterstics of a private key: - It is also unique in nature, but completely controlled by the user( except some pttern rules that companies apply to prevent guessing) - It is not visible to anyone, and is used as a firewall to prevent unauthorised access to information and mails that are addressed to YOU (i.e your public key) - It thus acts as a sole layer of authentication to access your space on a network. '' - It can be very harmful if leaked: because a person X having access to person Y's private key can literally take identity of Person Y since public keys are already accessible","title":"Public and Private Keys"},{"location":"tab_blogs/blockchain/public_and_private_key/#public-and-private-keys","text":"(Todo: add introduction pages about blockchain) I have been thinking about learning blockchain for so long, But i didn't ever gave it some serious thoughts or inputs. Everyone I try talking to, they are like, saying random combination of sexy phrases like \"Encrypted\", \"Public key/private key\", \"Super secure\" , \"Hash\" ,\"Distributed\", ... etc , and although i can't make sense about it for most of the time, I get prety excited about it. Yesterday I was watching a techalter video on something similar topic. And he gave a very nice analogy of public and private key : think of it as your email id and password . For eg, a Public Key could look like: c344c090-6652-4678-8215-1338acd2f102 a Private Key could look like: b9ef4856-ebdc-4b85-8c3f-c3455c25540f Google knew its difficult to remember this, so in gmail, a Public Key could look like: anshsachdeva.w.5798@gmail.com a Private Key could look like: mySuperSecretpassword123 Characterstics of a public key: - It is unique in nature and is somewhat controlled by the issuer of the key( like every gmail has @gmail.com at the end) - It is visible to anyone, so that they can contact you. - It thus acts as your identity on a network. - It can be very less harmful on its own, as a threat cannot retrieve your other info or details via this key.the only way to do that will be to hack the key provider's server(google in this case), which is a non avoidable problem from your end, or somehow lure YOU into interacting with his action( like writing a phisihing mail that could lure you into giving private details to hacker), but accessing that action would also require private key. Characterstics of a private key: - It is also unique in nature, but completely controlled by the user( except some pttern rules that companies apply to prevent guessing) - It is not visible to anyone, and is used as a firewall to prevent unauthorised access to information and mails that are addressed to YOU (i.e your public key) - It thus acts as a sole layer of authentication to access your space on a network. '' - It can be very harmful if leaked: because a person X having access to person Y's private key can literally take identity of Person Y since public keys are already accessible","title":"Public and Private Keys"},{"location":"tab_blogs/firebase/RealtimeDb/","text":"Firebase TODO : shitty article, need to replace all those \"follow the assistant/visit links\" with actual data So i was recently working on a project with firebase. Firebase is really simple to get started with and has strong functionalities and capabilities. Its a full fledged scalable , realtime cloud server. Firebase provides security at almost every aspect, but for my present project, The integration with the cloud server was more important than the security aspects. So i ended up using only the firebase Realtime database and nothing else. Firebase Realtime database. Firebase Realtime database is one of the 2 Realtime syncing database solution from Google's firebase, the other being cloud firestore. RealtimeDB stores all user's data in json format, while firestore would store data in documents format. More details here the data will look something like this: { \"users\" : { \"2f4587e9e837a9bd\" : { \"id\" : \"2f4587e9e837a9bd\" , \"name\" : \"Joey\" }, \"3955e55ae50efd8c\" : { \"id\" : \"3955e55ae50efd8c\" , \"name\" : \"Jon Snow\" }, \"4f154d1107547ca0\" : { \"id\" : \"4f154d1107547ca0\" , \"name\" : \"Sheldon\" }, \"5f5be88cbfd41d46\" : { \"id\" : \"5f5be88cbfd41d46\" , \"name\" : \"Morty\" } } } Getting Started with Firebase realtime database The easy way. Create your account on firebase.google.com Login to Android studio with same account. Click on tools>>Firebase and create new account. All the necessities would be automatically done The Hard way. https://firebase.google.com/docs/android/setup?authuser=0#console integrating Realtime database with our app simply add the neccessary dependencies via firebase assistant( it will add old dependencies, but those are the most stable) using firebase db download data: for above, we have to make an instance using the \"users\" child. Firebase doesn't allow getting a data directly on our main thread . Instead it sends data to us via its listener callbacks. NOTE Firebase Realtime database can only store data of type allowed by json syandards. to add data of any other format(image/video/audio,etc), use Firebase cloud storage. Downloading data from firebase DatabaseReference dbRef = FirebaseDatabase . getInstance (). getReference (). child ( \"users\" ); // non-null dbRef . addValueEventListener ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot dataSnapshot ) { //do stuff here } @Override public void onCancelled ( @NonNull DatabaseError databaseError ) { } }); // OR dbRef . addListenerForSingleValueEvent ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot dataSnapshot ) { //do stuff here } @Override public void onCancelled ( @NonNull DatabaseError databaseError ) { } }); There are 2 kinds of callbacks: ref.addListenerForSingleValueEvent(<valueEventListener) and simply ref.addvalueEventListener(<valueEventListener) . As the name indicates the formaer will be recieving an update only once, while the latter will recieve updates every time the server updates. addListenerForSingleValueEvent(..) is a lot useful when accessing data from multiple activites inside an app because firebase reference is powerful enough to remain live and bring our destroyed activity from the activity stack! (i am guessing it does not allow activities with active listeners to die). inside the onDataChange(...) , you can do something like: for ( DataSnapshot usersSnap : dataSnapshot . getChildren ()){ String userKey = \"\" + usersSnap . getKey (); Object u = usersSnap . getValue (); //instance of object class User u = usersSnap . getValue ( User . class ); //instance of User class } As you can see, you can deserialise the data if its coming in a specific format. Uploading data to firebase DatabaseReference . CompletionListener completionListener = new DatabaseReference . CompletionListener () { @Override public void onComplete ( @Nullable DatabaseError databaseError , @NonNull DatabaseReference databaseReference ) { Log . e ( TAG , \"onComplete: Successfully updated data\" ); //... } }; User u = new User ( \"name\" , \"some_key\" ); partyRef . child ( \"some_key\" ). setValue ( u , completionListener ); currently i have to research on weather its possible to add hashmaps or sets to firebase, because we are facing an issue with that Pro Tips(not exactly pro tbh, but from experience) addListenerForSingleValueEvent(..) is a lot useful when accessing data from multiple activites inside an app because firebase reference is powerful enough to remain live and bring our destroyed activity from the activity stack! (i am guessing it does not allow activities with active listeners to die). LIST IS A BAD IDEA FOR FIREBASE . It can store data as list when passed, because a list of objects is an acceptable entry for json. But it is most often a bad idea because the entries of a list are also stored as a key value pairs, the key being their index i.e List<Object> would be listed as { 0: someObj ,1:someObj} . and its very often that when 2 users are adding their entry at the same time in that list, both will be adding at the end, and their data would be uploaded with the same key ,i.e {...,last_index: objectOfUser1} and {...,last_index: objectOfUser2} , causing a race condition. Rather use a hashmap<UniqueStringKey,Object>","title":"Realtime DB"},{"location":"tab_blogs/firebase/RealtimeDb/#firebase","text":"TODO : shitty article, need to replace all those \"follow the assistant/visit links\" with actual data So i was recently working on a project with firebase. Firebase is really simple to get started with and has strong functionalities and capabilities. Its a full fledged scalable , realtime cloud server. Firebase provides security at almost every aspect, but for my present project, The integration with the cloud server was more important than the security aspects. So i ended up using only the firebase Realtime database and nothing else.","title":"Firebase"},{"location":"tab_blogs/firebase/RealtimeDb/#firebase-realtime-database","text":"Firebase Realtime database is one of the 2 Realtime syncing database solution from Google's firebase, the other being cloud firestore. RealtimeDB stores all user's data in json format, while firestore would store data in documents format. More details here the data will look something like this: { \"users\" : { \"2f4587e9e837a9bd\" : { \"id\" : \"2f4587e9e837a9bd\" , \"name\" : \"Joey\" }, \"3955e55ae50efd8c\" : { \"id\" : \"3955e55ae50efd8c\" , \"name\" : \"Jon Snow\" }, \"4f154d1107547ca0\" : { \"id\" : \"4f154d1107547ca0\" , \"name\" : \"Sheldon\" }, \"5f5be88cbfd41d46\" : { \"id\" : \"5f5be88cbfd41d46\" , \"name\" : \"Morty\" } } }","title":"Firebase Realtime database."},{"location":"tab_blogs/firebase/RealtimeDb/#getting-started-with-firebase-realtime-database","text":"","title":"Getting Started with Firebase realtime database"},{"location":"tab_blogs/firebase/RealtimeDb/#the-easy-way","text":"Create your account on firebase.google.com Login to Android studio with same account. Click on tools>>Firebase and create new account. All the necessities would be automatically done","title":"The easy way."},{"location":"tab_blogs/firebase/RealtimeDb/#the-hard-way","text":"https://firebase.google.com/docs/android/setup?authuser=0#console","title":"The Hard way."},{"location":"tab_blogs/firebase/RealtimeDb/#integrating-realtime-database-with-our-app","text":"simply add the neccessary dependencies via firebase assistant( it will add old dependencies, but those are the most stable)","title":"integrating Realtime database with our app"},{"location":"tab_blogs/firebase/RealtimeDb/#using-firebase-db","text":"download data: for above, we have to make an instance using the \"users\" child. Firebase doesn't allow getting a data directly on our main thread . Instead it sends data to us via its listener callbacks. NOTE Firebase Realtime database can only store data of type allowed by json syandards. to add data of any other format(image/video/audio,etc), use Firebase cloud storage. Downloading data from firebase DatabaseReference dbRef = FirebaseDatabase . getInstance (). getReference (). child ( \"users\" ); // non-null dbRef . addValueEventListener ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot dataSnapshot ) { //do stuff here } @Override public void onCancelled ( @NonNull DatabaseError databaseError ) { } }); // OR dbRef . addListenerForSingleValueEvent ( new ValueEventListener () { @Override public void onDataChange ( @NonNull DataSnapshot dataSnapshot ) { //do stuff here } @Override public void onCancelled ( @NonNull DatabaseError databaseError ) { } }); There are 2 kinds of callbacks: ref.addListenerForSingleValueEvent(<valueEventListener) and simply ref.addvalueEventListener(<valueEventListener) . As the name indicates the formaer will be recieving an update only once, while the latter will recieve updates every time the server updates. addListenerForSingleValueEvent(..) is a lot useful when accessing data from multiple activites inside an app because firebase reference is powerful enough to remain live and bring our destroyed activity from the activity stack! (i am guessing it does not allow activities with active listeners to die). inside the onDataChange(...) , you can do something like: for ( DataSnapshot usersSnap : dataSnapshot . getChildren ()){ String userKey = \"\" + usersSnap . getKey (); Object u = usersSnap . getValue (); //instance of object class User u = usersSnap . getValue ( User . class ); //instance of User class } As you can see, you can deserialise the data if its coming in a specific format. Uploading data to firebase DatabaseReference . CompletionListener completionListener = new DatabaseReference . CompletionListener () { @Override public void onComplete ( @Nullable DatabaseError databaseError , @NonNull DatabaseReference databaseReference ) { Log . e ( TAG , \"onComplete: Successfully updated data\" ); //... } }; User u = new User ( \"name\" , \"some_key\" ); partyRef . child ( \"some_key\" ). setValue ( u , completionListener ); currently i have to research on weather its possible to add hashmaps or sets to firebase, because we are facing an issue with that","title":"using firebase db"},{"location":"tab_blogs/firebase/RealtimeDb/#pro-tipsnot-exactly-pro-tbh-but-from-experience","text":"addListenerForSingleValueEvent(..) is a lot useful when accessing data from multiple activites inside an app because firebase reference is powerful enough to remain live and bring our destroyed activity from the activity stack! (i am guessing it does not allow activities with active listeners to die). LIST IS A BAD IDEA FOR FIREBASE . It can store data as list when passed, because a list of objects is an acceptable entry for json. But it is most often a bad idea because the entries of a list are also stored as a key value pairs, the key being their index i.e List<Object> would be listed as { 0: someObj ,1:someObj} . and its very often that when 2 users are adding their entry at the same time in that list, both will be adding at the end, and their data would be uploaded with the same key ,i.e {...,last_index: objectOfUser1} and {...,last_index: objectOfUser2} , causing a race condition. Rather use a hashmap<UniqueStringKey,Object>","title":"Pro Tips(not exactly pro tbh, but from experience)"},{"location":"tab_blogs/git/intro/","text":"The World of Linux So today i thought of learning about how linux works and building a linux from scratch. So let's get going.","title":"Introduction(inc)"},{"location":"tab_blogs/git/intro/#the-world-of-linux","text":"So today i thought of learning about how linux works and building a linux from scratch. So let's get going.","title":"The World of Linux"},{"location":"tab_blogs/kotlin/intro/","text":"KOTLIN So, after procrastinating a lot, a have finally decided to learn kotlin. This will be my safeplace for all the knowledge i gather up around this language, as well its use in Android dev. I have downloaded a bunch of resources and signed up a few courses and my target is to cover atleast enough to kotlin to make 3-5 production level apps and in future get an aad certification for kotlin. I will be using google docs for making the notes. The mkdocs is causing problems with python 3.8 and i am unable to view any changes i do unless i deploy them to production. I am thinking of adding all my resources in the blogs folder only, providing a github link for that, but i guess that will make the repo sie very large and cause issues in push/pull. So i will be adding them to gdrive and adding them to my .ignore lists .Hope mkdocs doesn't break ( Update feb 17,20 : A few posts are with me in my local system, would try to update links here earliest as possible. i am currently looking for a better approach for a website, so i would be either creating one myself{i.e a without using static website frameworks} or using a better blogsite approach {i am having a thought of using reddit for blogging as an idea})","title":"Intro"},{"location":"tab_blogs/kotlin/intro/#kotlin","text":"So, after procrastinating a lot, a have finally decided to learn kotlin. This will be my safeplace for all the knowledge i gather up around this language, as well its use in Android dev. I have downloaded a bunch of resources and signed up a few courses and my target is to cover atleast enough to kotlin to make 3-5 production level apps and in future get an aad certification for kotlin. I will be using google docs for making the notes. The mkdocs is causing problems with python 3.8 and i am unable to view any changes i do unless i deploy them to production. I am thinking of adding all my resources in the blogs folder only, providing a github link for that, but i guess that will make the repo sie very large and cause issues in push/pull. So i will be adding them to gdrive and adding them to my .ignore lists .Hope mkdocs doesn't break ( Update feb 17,20 : A few posts are with me in my local system, would try to update links here earliest as possible. i am currently looking for a better approach for a website, so i would be either creating one myself{i.e a without using static website frameworks} or using a better blogsite approach {i am having a thought of using reddit for blogging as an idea})","title":"KOTLIN"},{"location":"tab_blogs/misc/daily_logs/","text":"Daily Logs (Disclaimer: This is my personal daily log book, and i would be writing a lot of personal shit here without caring much about anyone. You might not wanna read it) 29/11/19 I went to an interview a few days ago, just out of curiousity, even though i was sure that i won't be getting any \"android developer jobs\" there . it was a mega job fair. in one company, me and my friend neil(fake name) went. the interviewer guy was willing to give neil a package upto 10LPA (its a great offer for freshers in my country) based on his current skills of php js, ... web stuff . I had this assumption( and neil did too we both kind off had the same mindset) that a company teaches us things, we just have to be a little famous/accomplished. So i thought why not? i am accomplished. i got 2 apps on playstore, i know a lot of android stuff, i am quite famous. i am equally as deserving as neil. But what happenned was something different. When my turn came, the interviewer said \" If you have no knwledge of phy/js/node/angular, why are you sitting here?\" to which i said \" i presumed company would teach me, since i bring some level of expertise from other fields\" so he told me some hard truths \"Companies are fast paced. they don't have time to train you in everything. we seek for candidates having some level of knowledge in the domain, so that we could brush up your skills, increase your knowledge to current requirement and push you to production engineer asap, so that you could be worthy of your salary\" This is completely correct. i have stuck myself in such a career that its very difficult to sell myself for other job profiles. And from what i have seen, companies seek a very high level of proficiency in this field and rarely recruit freshers( or even if they do, salaries will be aweful). Now i am so unsure about what to do next: A.) keep learning more and more of android and look for job in it. And even if am getting an aweful job offer, just sulk and take it B.) do open source work/gsoc work?( its a good way to earn more recognition/stipend/knowledge and sometimes even job offers) C.) learn web dev, data sciences, blockchain, cloud or other stuff that i don't yet know D.) go back to ds algo / competitive? (because having good competitive knowledge is a safe zone. you are assumed as apure fresher with 0 level of practical knowledge but good level of mathemetics) I know i am going suck in all of the above except maybe (A) or (B) because (C) is something that am unsure would grab my interest (and even if it did, i am sure i need another 1-2 years to be somewhat good at it) and (D) is something i myself know am uncapable of , i am an average shit in maths(but might mug it all up if i pull all nighters for 1 year) 7/11/19 So... i am in a bit of confusion. I cannot dedicate my full time to any company until i graduate in august 2020. But at the same time many companies are offering me good internship opportunities because i have been doing android for last 2 years. If i go there, i will be doing Android stuff and that's fine by me. But I am kind of done with android. I know what are the things i know and what are the things that i don't. But I feel this learning will never stop and i should have a knowledge of other stuff too. Web dev, Ai,ML ,AR/VR, Security,... stuff Answer: Be around android, you know. Android is so full of stuff. learn it. Or simply go around it and learn other stuff \"via\" android. Wanna learn ai/ml? good. learn mlkit, intel's npl library, other stuff , and learn ml whenever needed. wanna learn web? -learn react native/ angular, make android apps.But first learn javascript. like python? learn kiwi 20/10/19 - 6/11/19 no idea what happenned. some biggies : went to droid con india all alone via FLIGHT!(first time), mom bday, left z1media,... don't remember anymore 8/10/19 -19/10/19 meh. lots of boring stuff might had happenned, i kinda forgot to update myself here or didn't felt like writing it, whatever.so what happenned last week/weeks? Umm,.. completed office's sdk, pushed it into repo, shown to my manager, got some more bugs to fix, and still working on those. regarding those bugs, my eyes are now tird of looking at exoplayer/tubitv/ima sdk/video view's github issues, group discussions and SO questions. FUCK this SHIT. Other than that, maybe i went to clg someday, some interview in SRM(ooh that was a wickedly adeventures day!3 friends roaming in wild farms in haryana all alnoe with no man is sight for an hour...ooh , chills and thrills!), small fight with bro, office to clg clg to office ,yaada yaada yaada. shit. Hey, am thinking moving all my arcghitecture's images to github. fast uploads, easier to access, always available. Know what, that's what we will do 7/10/19 wrote a small article on Android architecture. basically copied some person's full medium article,i am no good at those theory stuff, hehe. I know its bad, i should rather be learning those, but eh. Will do someday when required B). Anyways going forward I completed my task at office today, yess! But nobody was there to see it :| mehhhh I think i am really getting interested in VLC media player. I can try GSOC for that, thing's lit dude .just wrote a mail to them. oof, their docs say it must be build on linux. hmm, looks like i am in a situtaion but alright, will see to it. VM ftw! i really think i have to work on kotlin. When I feel all boasty about how good I am with Android, I kind off forget that I ain't no shit about kotlin X( and that just moves me from 90% topper to 60% average :o ! NOPE, daddy is not gonna go down, Daddy is king! kotlin, i see you: you on my death list now valar morghulis dear X| 6/10/19 went to kirtan after so long . it felt so peaceful.Lately i was having some bad thoughts regarding a lot of things: aim of life, my losses, my weaknesses , my failures and stuff. But kirtan is very peaceful, it helps me feel good, think solutions rather than problems. Couple of thoughts: - i am going to continue working in Android for a long time. There are many things that I still need to learn, and there are many milions of devs I am better than them, in terms of knowledge. So I am going to continue working in that. Dont worry about the other stuff ,Ansh . LEt the boasters boast.Android is a vast thing to work upon, if you know every tid bits of it, from the tp most layer of apps to the bottommost layer of networking,OS and hardware, you will be valued. plus these blogs are here to share your knowledge and get known to people. There will be always someone in need of an android dev and you can be useful then. Plus today almost every tech is mergeing with each other. At a point you will be knowing a lot about other things too than just android. So Next week, try adding blogs on basic android lifecycles and fragments . Then we will add mini blogs on buttons, switches, tect views and basic ui components(+ all the possible modifications i have ever done to them, for a project). Then we will do firebase - Success needs to be celebrated. Not to be boasted in demeaning way , but in a healthy, confidence gaining way. For eg, I got a AAD certiication , i could celebrate in 3 ways: - Either i should throw a big party . invite my friends, and discuss only about my aad, demaining them in beween, like hehe i got aad you didn't, i earn this much , you don't, ,... etc - Or I could throw a small party for my friends abut this, but we discussing everything else they wanna discuss, with no demaning of anybody involved - Or i could just keep quiet about that, and keep working in my home, thinking this success is small and not worth much and i should wait for a bigger success to throw a party I think both 1st and 3rd approach would be wrong. Rather enjoy your moment but don't be an asshole about it Bullying anyone is always wrong, even if it is very small or in the name of fun. Never let anyone tell you that you are not worth something or you are a useless person. Remember, you--( i had so much to say about this, but i am tired, so forgetting a lot of points). Just wanna say that you need to stop being around those who bully you, no matter how much useful those people might be.And also don't stop to to tell people about how really you feel, just because it might hurt them, because they don't. 1/10/19 - 5/10/19 was back to work with full power. able to crack how to run custom ads using video_view. Something very terrible happenned . My poor baby cat kiwi passed away on 4th . it was so shocking and why the fuck can't I shed tears? Man i have grown emotionless. I am devastated with his loss and i want to cry . He was such a cute life living with full health among us. Never even though this could happen. He was fine the last night and next morning, mom wake us crying. Turns out he got a heart attack due to constipation. These poor souls can't communicate their problems and that's what got him :\"{ Other than this I was somewhat hyped about gsoc since 1st october. apparently Hacktoberfest has made it tough to get tshirts this year. I was also excited about gsoc cause that would help me learn. But looks like gsoc is 1 hell of a tough ride: - People have started as early as september.(not much of a problem but yeah, tough) - The projects are shit large(not much of a problem but yeah, tough) - These projects need good knowledge of a topic's language/framework and are not meant to be \"learn as you code\", they are rather like a challange: \"You have to do this, their are a 1000 others who can do the same thing. let's see if you can do this code faster and better than others\" - These projects will need at least 8hr/day or 56hr/week attention and that too in jul/aug/sept2020 - Still though i am going to try for it, currently looking into their code per weekend and let's see if we can make this through 30/9/19 Gotta confess, didn't do much stuff. watched a lot of web series( currently it crows and futurama) . also checked into popup window and made an issue on prebid repo. would check into that later 29/9/19 SATURDAY! After an ass busting week of papers, i am happy to relax for sometime. I didn't applied for leave for today at my office, they are gonna cut the salary, damn :/ Also, fuck i didn't recieved pass for the devfest delhi :'( . Anyways today i am continuing my work with exoplayer from the last week, but before that , i am in a mood for learning something new : like making this site. i am torn between using mkdocs, jekyll wordpress or simply html/css . mkdocs is cool, but i still need to run 4 commands and update yaml everytime i add a page. It also has a lot of theme limitations and require knowledge of html/css to fix them. jekyll is also ok, but does not come with a defualy theme, You will have to create your own theme in order to make it look nice. but it too had support for external themes. But again, it had some stuff which needed to be updated manually. wordpress is something i am curious about. i heard it is somewhat paid, but a parts of it are free too . it is seen as a very advance version with all those tags and dynamic content support, but also needs html/css/js knowledge for advance customizations I don't wanna use html/css because i hate them(Damn, my biggest weakness: why i hate the most popular type of development in this industry, the web dev? Ugh, i don't know. so much shit goin on, so many tags, so much sophistication in small stuffs... i had to learn theses stuff, else i would lag behind... aagh fuck) Anyhoo, currently going with this mkdocs theme . did some refactoring in yml file, and about to add some general articles.","title":"Daily Logs"},{"location":"tab_blogs/misc/daily_logs/#daily-logs","text":"(Disclaimer: This is my personal daily log book, and i would be writing a lot of personal shit here without caring much about anyone. You might not wanna read it)","title":"Daily Logs"},{"location":"tab_blogs/misc/daily_logs/#291119","text":"I went to an interview a few days ago, just out of curiousity, even though i was sure that i won't be getting any \"android developer jobs\" there . it was a mega job fair. in one company, me and my friend neil(fake name) went. the interviewer guy was willing to give neil a package upto 10LPA (its a great offer for freshers in my country) based on his current skills of php js, ... web stuff . I had this assumption( and neil did too we both kind off had the same mindset) that a company teaches us things, we just have to be a little famous/accomplished. So i thought why not? i am accomplished. i got 2 apps on playstore, i know a lot of android stuff, i am quite famous. i am equally as deserving as neil. But what happenned was something different. When my turn came, the interviewer said \" If you have no knwledge of phy/js/node/angular, why are you sitting here?\" to which i said \" i presumed company would teach me, since i bring some level of expertise from other fields\" so he told me some hard truths \"Companies are fast paced. they don't have time to train you in everything. we seek for candidates having some level of knowledge in the domain, so that we could brush up your skills, increase your knowledge to current requirement and push you to production engineer asap, so that you could be worthy of your salary\" This is completely correct. i have stuck myself in such a career that its very difficult to sell myself for other job profiles. And from what i have seen, companies seek a very high level of proficiency in this field and rarely recruit freshers( or even if they do, salaries will be aweful). Now i am so unsure about what to do next: A.) keep learning more and more of android and look for job in it. And even if am getting an aweful job offer, just sulk and take it B.) do open source work/gsoc work?( its a good way to earn more recognition/stipend/knowledge and sometimes even job offers) C.) learn web dev, data sciences, blockchain, cloud or other stuff that i don't yet know D.) go back to ds algo / competitive? (because having good competitive knowledge is a safe zone. you are assumed as apure fresher with 0 level of practical knowledge but good level of mathemetics) I know i am going suck in all of the above except maybe (A) or (B) because (C) is something that am unsure would grab my interest (and even if it did, i am sure i need another 1-2 years to be somewhat good at it) and (D) is something i myself know am uncapable of , i am an average shit in maths(but might mug it all up if i pull all nighters for 1 year)","title":"29/11/19"},{"location":"tab_blogs/misc/daily_logs/#71119","text":"So... i am in a bit of confusion. I cannot dedicate my full time to any company until i graduate in august 2020. But at the same time many companies are offering me good internship opportunities because i have been doing android for last 2 years. If i go there, i will be doing Android stuff and that's fine by me. But I am kind of done with android. I know what are the things i know and what are the things that i don't. But I feel this learning will never stop and i should have a knowledge of other stuff too. Web dev, Ai,ML ,AR/VR, Security,... stuff Answer: Be around android, you know. Android is so full of stuff. learn it. Or simply go around it and learn other stuff \"via\" android. Wanna learn ai/ml? good. learn mlkit, intel's npl library, other stuff , and learn ml whenever needed. wanna learn web? -learn react native/ angular, make android apps.But first learn javascript. like python? learn kiwi","title":"7/11/19"},{"location":"tab_blogs/misc/daily_logs/#201019-61119","text":"no idea what happenned. some biggies : went to droid con india all alone via FLIGHT!(first time), mom bday, left z1media,... don't remember anymore","title":"20/10/19 - 6/11/19"},{"location":"tab_blogs/misc/daily_logs/#81019-191019","text":"meh. lots of boring stuff might had happenned, i kinda forgot to update myself here or didn't felt like writing it, whatever.so what happenned last week/weeks? Umm,.. completed office's sdk, pushed it into repo, shown to my manager, got some more bugs to fix, and still working on those. regarding those bugs, my eyes are now tird of looking at exoplayer/tubitv/ima sdk/video view's github issues, group discussions and SO questions. FUCK this SHIT. Other than that, maybe i went to clg someday, some interview in SRM(ooh that was a wickedly adeventures day!3 friends roaming in wild farms in haryana all alnoe with no man is sight for an hour...ooh , chills and thrills!), small fight with bro, office to clg clg to office ,yaada yaada yaada. shit. Hey, am thinking moving all my arcghitecture's images to github. fast uploads, easier to access, always available. Know what, that's what we will do","title":"8/10/19 -19/10/19"},{"location":"tab_blogs/misc/daily_logs/#71019","text":"wrote a small article on Android architecture. basically copied some person's full medium article,i am no good at those theory stuff, hehe. I know its bad, i should rather be learning those, but eh. Will do someday when required B). Anyways going forward I completed my task at office today, yess! But nobody was there to see it :| mehhhh I think i am really getting interested in VLC media player. I can try GSOC for that, thing's lit dude .just wrote a mail to them. oof, their docs say it must be build on linux. hmm, looks like i am in a situtaion but alright, will see to it. VM ftw! i really think i have to work on kotlin. When I feel all boasty about how good I am with Android, I kind off forget that I ain't no shit about kotlin X( and that just moves me from 90% topper to 60% average :o ! NOPE, daddy is not gonna go down, Daddy is king! kotlin, i see you: you on my death list now valar morghulis dear X|","title":"7/10/19"},{"location":"tab_blogs/misc/daily_logs/#61019","text":"went to kirtan after so long . it felt so peaceful.Lately i was having some bad thoughts regarding a lot of things: aim of life, my losses, my weaknesses , my failures and stuff. But kirtan is very peaceful, it helps me feel good, think solutions rather than problems. Couple of thoughts: - i am going to continue working in Android for a long time. There are many things that I still need to learn, and there are many milions of devs I am better than them, in terms of knowledge. So I am going to continue working in that. Dont worry about the other stuff ,Ansh . LEt the boasters boast.Android is a vast thing to work upon, if you know every tid bits of it, from the tp most layer of apps to the bottommost layer of networking,OS and hardware, you will be valued. plus these blogs are here to share your knowledge and get known to people. There will be always someone in need of an android dev and you can be useful then. Plus today almost every tech is mergeing with each other. At a point you will be knowing a lot about other things too than just android. So Next week, try adding blogs on basic android lifecycles and fragments . Then we will add mini blogs on buttons, switches, tect views and basic ui components(+ all the possible modifications i have ever done to them, for a project). Then we will do firebase - Success needs to be celebrated. Not to be boasted in demeaning way , but in a healthy, confidence gaining way. For eg, I got a AAD certiication , i could celebrate in 3 ways: - Either i should throw a big party . invite my friends, and discuss only about my aad, demaining them in beween, like hehe i got aad you didn't, i earn this much , you don't, ,... etc - Or I could throw a small party for my friends abut this, but we discussing everything else they wanna discuss, with no demaning of anybody involved - Or i could just keep quiet about that, and keep working in my home, thinking this success is small and not worth much and i should wait for a bigger success to throw a party I think both 1st and 3rd approach would be wrong. Rather enjoy your moment but don't be an asshole about it Bullying anyone is always wrong, even if it is very small or in the name of fun. Never let anyone tell you that you are not worth something or you are a useless person. Remember, you--( i had so much to say about this, but i am tired, so forgetting a lot of points). Just wanna say that you need to stop being around those who bully you, no matter how much useful those people might be.And also don't stop to to tell people about how really you feel, just because it might hurt them, because they don't.","title":"6/10/19"},{"location":"tab_blogs/misc/daily_logs/#11019-51019","text":"was back to work with full power. able to crack how to run custom ads using video_view. Something very terrible happenned . My poor baby cat kiwi passed away on 4th . it was so shocking and why the fuck can't I shed tears? Man i have grown emotionless. I am devastated with his loss and i want to cry . He was such a cute life living with full health among us. Never even though this could happen. He was fine the last night and next morning, mom wake us crying. Turns out he got a heart attack due to constipation. These poor souls can't communicate their problems and that's what got him :\"{ Other than this I was somewhat hyped about gsoc since 1st october. apparently Hacktoberfest has made it tough to get tshirts this year. I was also excited about gsoc cause that would help me learn. But looks like gsoc is 1 hell of a tough ride: - People have started as early as september.(not much of a problem but yeah, tough) - The projects are shit large(not much of a problem but yeah, tough) - These projects need good knowledge of a topic's language/framework and are not meant to be \"learn as you code\", they are rather like a challange: \"You have to do this, their are a 1000 others who can do the same thing. let's see if you can do this code faster and better than others\" - These projects will need at least 8hr/day or 56hr/week attention and that too in jul/aug/sept2020 - Still though i am going to try for it, currently looking into their code per weekend and let's see if we can make this through","title":"1/10/19 - 5/10/19"},{"location":"tab_blogs/misc/daily_logs/#30919","text":"Gotta confess, didn't do much stuff. watched a lot of web series( currently it crows and futurama) . also checked into popup window and made an issue on prebid repo. would check into that later","title":"30/9/19"},{"location":"tab_blogs/misc/daily_logs/#29919","text":"SATURDAY! After an ass busting week of papers, i am happy to relax for sometime. I didn't applied for leave for today at my office, they are gonna cut the salary, damn :/ Also, fuck i didn't recieved pass for the devfest delhi :'( . Anyways today i am continuing my work with exoplayer from the last week, but before that , i am in a mood for learning something new : like making this site. i am torn between using mkdocs, jekyll wordpress or simply html/css . mkdocs is cool, but i still need to run 4 commands and update yaml everytime i add a page. It also has a lot of theme limitations and require knowledge of html/css to fix them. jekyll is also ok, but does not come with a defualy theme, You will have to create your own theme in order to make it look nice. but it too had support for external themes. But again, it had some stuff which needed to be updated manually. wordpress is something i am curious about. i heard it is somewhat paid, but a parts of it are free too . it is seen as a very advance version with all those tags and dynamic content support, but also needs html/css/js knowledge for advance customizations I don't wanna use html/css because i hate them(Damn, my biggest weakness: why i hate the most popular type of development in this industry, the web dev? Ugh, i don't know. so much shit goin on, so many tags, so much sophistication in small stuffs... i had to learn theses stuff, else i would lag behind... aagh fuck) Anyhoo, currently going with this mkdocs theme . did some refactoring in yml file, and about to add some general articles.","title":"29/9/19"},{"location":"tab_blogs/misc/debugging_basics/","text":"","title":"Debugging basics"},{"location":"tab_blogs/misc/git/","text":"Miscallanous :Git and github I often learn a lot of fun stuff when i do git. October 27, 2019. today i found out that: - git config --global -l will give away all your globally setted default values/aliases, eg: >>> git config --global -l user.email=anshsachdevaprofessional@gmail.com user.name=root-ansh user.password=********** git config --global user.x \"some value\" will set a value for that key x","title":"Miscallanous :Git and github"},{"location":"tab_blogs/misc/git/#miscallanous-git-and-github","text":"I often learn a lot of fun stuff when i do git.","title":"Miscallanous :Git and github"},{"location":"tab_blogs/misc/git/#october-27-2019","text":"today i found out that: - git config --global -l will give away all your globally setted default values/aliases, eg: >>> git config --global -l user.email=anshsachdevaprofessional@gmail.com user.name=root-ansh user.password=********** git config --global user.x \"some value\" will set a value for that key x","title":"October 27, 2019."},{"location":"tab_blogs/web/mkdocs/basic_syntax/","text":"Basic Syntax image loaded from the web image loaded from img/logo.png image loaded from the web with a link(uses HTML) image loaded from img/logo.png with a link(uses HTML) if you are not seeing thisimage , well , simply put: if your blog resides in following directory: docs/ | |----x/ | | | |----y/ | | | | | | | | |---z/ | | | | | | | | | | | |---myblog.md | | | | then you should create a folder img in the z/ folder and add pics there and access it using .../img/imagename.png . so your final structure will be: docs/ | |----x/ | | | |----y/ | | | | | | | | |---z/ | | | | | | | | | | | |---img/ | | | | |-----imagename.png | | | |---myblog.md | | | | like this : [ except for index.md and its pictures, which are already in the root directory ( path for index is docs/index.md and path for images used in index would be docs/img/picname.png )] CodeHilite CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file. Syntax highlighting not working? Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed. Installation CodeHilite parses code blocks and wraps them in pre tags. If Pygments is installed, which is a generic syntax highlighter with support for over 300 languages , CodeHilite will also highlight the code block. Pygments can be installed with the following command: pip install pygments To enable CodeHilite, add the following lines to your mkdocs.yml : markdown_extensions : - codehilite Usage Specifying the language The CodeHilite extension uses the same syntax as regular Markdown code blocks, but needs to know the language of the code block. This can be done in three different ways. via Markdown syntax recommended In Markdown, code blocks can be opened and closed by writing three backticks on separate lines. To add code highlighting to those blocks, the easiest way is to specify the language directly after the opening block. Example: ``` python import tensorflow as tf ``` Result: import tensorflow as tf via Shebang Alternatively, if the first line of a code block contains a shebang, the language is derived from the path referenced in the shebang. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: #!/usr/bin/python import tensorflow as tf Result: #!/usr/bin/python import tensorflow as tf via three colons If the first line starts with three colons followed by a language identifier, the first line is stripped. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: :::python import tensorflow as tf Result: :::python import tensorflow as tf Adding line numbers Line numbers can be added by enabling the linenums flag in your mkdocs.yml : markdown_extensions : - codehilite : linenums : true Example: ``` python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: #!python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] Grouping code blocks The SuperFences extension which is part of the PyMdown Extensions package adds support for grouping code blocks with tabs. This is especially useful for documenting projects with multiple language bindings. Example: ``` bash tab=\"Bash\" #!/bin/bash echo \"Hello world!\" ``` ``` c tab=\"C\" #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); } ``` ``` c++ tab=\"C++\" #include <iostream> int main() { std::cout << \"Hello world!\" << std::endl; return 0; } ``` ``` c# tab=\"C#\" using System; class Program { static void Main(string[] args) { Console.WriteLine(\"Hello world!\"); } } ``` Result: ``` bash tab=\"Bash\" !/bin/bash echo \"Hello world!\" ``` c tab=\"C\" #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); } ``` c++ tab=\"C++\" include int main() { std::cout << \"Hello world!\" << std::endl; return 0; } ``` c# tab=\"C#\" using System; class Program { static void Main(string[] args) { Console.WriteLine(\"Hello world!\"); } } Highlighting specific lines Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language identifier. Line counts start at 1. Example: ``` python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: #!python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] Supported languages excerpt CodeHilite uses Pygments , a generic syntax highlighter with support for over 300 languages , so the following list of examples is just an excerpt. Bash #!/bin/bash for OPT in \" $@ \" do case \" $OPT \" in '-f' ) canonicalize = 1 ;; '-n' ) switchlf = \"-n\" ;; esac done # readlink -f function __readlink_f { target = \" $1 \" while test -n \" $target \" ; do filepath = \" $target \" cd ` dirname \" $filepath \" ` target = ` readlink \" $filepath \" ` done /bin/echo $switchlf ` pwd -P ` / ` basename \" $filepath \" ` } if [ ! \" $canonicalize \" ] ; then readlink $switchlf \" $@ \" else for file in \" $@ \" do case \" $file \" in -* ) ;; * ) __readlink_f \" $file \" ;; esac done fi exit $? C extern size_t pb_varint_scan ( const uint8_t data [], size_t left ) { assert ( data && left ); left = left > 10 ? 10 : left ; #ifdef __SSE2__ /* Mapping: remaining bytes ==> bitmask */ static const int mask_map [] = { 0x0000 , 0x0001 , 0x0003 , 0x0007 , 0x000F , 0x001F , 0x003F , 0x007F , 0x00FF , 0x01FF , 0x03FF }; /* Load buffer into 128-bit integer and create high-bit mask */ __m128i temp = _mm_loadu_si128 (( const __m128i * ) data ); __m128i high = _mm_set1_epi8 ( 0x80 ); /* Intersect and extract mask with high-bits set */ int mask = _mm_movemask_epi8 ( _mm_and_si128 ( temp , high )); mask = ( mask & mask_map [ left ]) ^ mask_map [ left ]; /* Count trailing zeroes */ return mask ? __builtin_ctz ( mask ) + 1 : 0 ; #else /* Linear scan */ size_t size = 0 ; while ( data [ size ++ ] & 0x80 ) if ( !-- left ) return 0 ; return size ; #endif /* __SSE2__ */ } C++ Extension :: Extension ( const Descriptor * descriptor , const Descriptor * scope ) : descriptor_ ( descriptor ), scope_ ( scope ) { /* Extract full name for signature */ variables_ [ \"signature\" ] = descriptor_ -> full_name (); /* Prepare message symbol */ variables_ [ \"message\" ] = StringReplace ( variables_ [ \"signature\" ], \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"message\" ])); /* Suffix scope to identifiers, if given */ string suffix ( \"\" ); if ( scope_ ) { suffix = scope_ -> full_name (); /* Check if the base and extension types are in the same package */ if ( ! scope_ -> file () -> package (). compare ( descriptor_ -> file () -> package ())) suffix = StripPrefixString ( suffix , scope_ -> file () -> package () + \".\" ); /* Append to signature */ variables_ [ \"signature\" ] += \".[\" + suffix + \"]\" ; suffix = \"_\" + suffix ; } /* Prepare extension symbol */ variables_ [ \"extension\" ] = StringReplace ( suffix , \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"extension\" ])); } C# public static void Send ( Socket socket , byte [] buffer , int offset , int size , int timeout ) { int startTickCount = Environment . TickCount ; int sent = 0 ; do { if ( Environment . TickCount > startTickCount + timeout ) throw new Exception ( \"Timeout.\" ); try { sent += socket . Send ( buffer , offset + sent , size - sent , SocketFlags . None ); } catch ( SocketException ex ) { if ( ex . SocketErrorCode == SocketError . WouldBlock || ex . SocketErrorCode == SocketError . IOPending || ex . SocketErrorCode == SocketError . NoBufferSpaceAvailable ) { /* Socket buffer is probably full, wait and try again */ Thread . Sleep ( 30 ); } else { throw ex ; } } } while ( sent < size ); } Clojure ( clojure-version ) ( defn partition-when [ f ] ( fn [ rf ] ( let [ a ( java.util.ArrayList. ) fval ( volatile! false )] ( fn ([] ( rf )) ([ result ] ( let [ result ( if ( .isEmpty a ) result ( let [ v ( vec ( .toArray a ))] ;; Clear first ( .clear a ) ( unreduced ( rf result v ))))] ( rf result ))) ([ result input ] ( if-not ( and ( f input ) @ fval ) ( do ( vreset! fval true ) ( .add a input ) result ) ( let [ v ( vec ( .toArray a ))] ( .clear a ) ( let [ ret ( rf result v )] ( when-not ( reduced? ret ) ( .add a input )) ret )))))))) ( into [] ( partition-when # ( .startsWith % \">>\" )) [ \"1d\" \"33\" \">> 1\" \">> 2\" \"22\" \">> 3\" ]) Diff Index: grunt.js =================================================================== --- grunt.js (revision 31200) +++ grunt.js (working copy) @@ -12,6 +12,7 @@ module.exports = function (grunt) { + console.log('hello world'); // Project configuration. grunt.initConfig({ lint: { @@ -19,10 +20,6 @@ 'packages/services.web/{!(test)/**/,}*.js', 'packages/error/**/*.js' ], - scripts: [ - 'grunt.js', - 'db/**/*.js' - ], browser: [ 'packages/web/server.js', 'packages/web/server/**/*.js', Docker FROM ubuntu # Install vnc, xvfb in order to create a 'fake' display and firefox RUN apt-get update && apt-get install -y x11vnc xvfb firefox RUN mkdir ~/.vnc # Setup a password RUN x11vnc -storepasswd 1234 ~/.vnc/passwd # Autostart firefox (might not be the best way, but it does the trick) RUN bash -c 'echo \"firefox\" >> /.bashrc' EXPOSE 5900 CMD [ \"x11vnc\" , \"-forever\" , \"-usepw\" , \"-create\" ] Elixir require Logger def accept ( port ) do { :ok , socket } = :gen_tcp . listen ( port , [ :binary , packet : :line , active : false , reuseaddr : true ]) Logger . info \"Accepting connections on port #{ port } \" loop_acceptor ( socket ) end defp loop_acceptor ( socket ) do { :ok , client } = :gen_tcp . accept ( socket ) serve ( client ) loop_acceptor ( socket ) end defp serve ( socket ) do socket |> read_line () |> write_line ( socket ) serve ( socket ) end defp read_line ( socket ) do { :ok , data } = :gen_tcp . recv ( socket , 0 ) data end defp write_line ( line , socket ) do :gen_tcp . send ( socket , line ) end Erlang circular ( Defs ) -> [ { { Type , Base }, Fields } || { { Type , Base }, Fields } <- Defs , Type == msg , circular ( Base , Defs ) ]. circular ( Base , Defs ) -> Fields = proplists : get_value ({ msg , Base }, Defs ), circular ( Defs , Fields , [ Base ]). circular (_ Defs , [], _ Path ) -> false ; circular ( Defs , [ Field | Fields ], Path ) -> case Field #field.type of { msg , Type } -> case lists : member ( Type , Path ) of false -> Children = proplists : get_value ({ msg , Type }, Defs ), case circular ( Defs , Children , [ Type | Path ]) of false -> circular ( Defs , Fields , Path ); true -> true end ; true -> Type == lists : last ( Path ) andalso ( length ( Path ) == 1 orelse not is_tree ( Path )) end ; _ -> circular ( Defs , Fields , Path ) end . F# /// Asynchronously download retangles from the server /// and decode the JSON format to F# Rectangle record let [< Js >] getRectangles () : Async < Rectangle [] > = async { let req = XMLHttpRequest () req . Open ( \"POST\" , \"/get\" , true ) let! resp = req . AsyncSend () return JSON . parse ( resp ) } /// Repeatedly update rectangles after 0.5 sec let [< Js >] updateLoop () = async { while true do do ! Async . Sleep ( 500 ) let! rects = getRectangles () cleanRectangles () rects |> Array . iter createRectangle } Go package main import \"fmt\" func counter ( id int , channel chan int , closer bool ) { for i := 0 ; i < 10000000 ; i ++ { fmt . Println ( \"process\" , id , \" send\" , i ) channel <- 1 } if closer { close ( channel ) } } func main () { channel := make ( chan int ) go counter ( 1 , channel , false ) go counter ( 2 , channel , true ) x := 0 // receiving data from channel for i := range channel { fmt . Println ( \"receiving\" ) x += i } fmt . Println ( x ) } HTML <!doctype html> < html class = \"no-js\" lang = \"\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"x-ua-compatible\" content = \"ie=edge\" > < title > HTML5 Boilerplate </ title > < meta name = \"description\" content = \"\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"apple-touch-icon\" href = \"apple-touch-icon.png\" > < link rel = \"stylesheet\" href = \"css/normalize.css\" > < link rel = \"stylesheet\" href = \"css/main.css\" > < script src = \"js/vendor/modernizr-2.8.3.min.js\" ></ script > </ head > < body > < p > Hello world! This is HTML5 Boilerplate. </ p > </ body > </ html > Java import java.util.LinkedList ; import java.lang.reflect.Array ; public class UnsortedHashSet < E > { private static final double LOAD_FACTOR_LIMIT = 0.7 ; private int size ; private LinkedList < E >[] con ; public UnsortedHashSet () { con = ( LinkedList < E >[] )( new LinkedList [ 10 ] ); } public boolean add ( E obj ) { int oldSize = size ; int index = Math . abs ( obj . hashCode ()) % con . length ; if ( con [ index ] == null ) con [ index ] = new LinkedList < E > (); if ( ! con [ index ] . contains ( obj )) { con [ index ] . add ( obj ); size ++ ; } if ( 1.0 * size / con . length > LOAD_FACTOR_LIMIT ) resize (); return oldSize != size ; } private void resize () { UnsortedHashSet < E > temp = new UnsortedHashSet < E > (); temp . con = ( LinkedList < E >[] )( new LinkedList [ con . length * 2 + 1 ] ); for ( int i = 0 ; i < con . length ; i ++ ) { if ( con [ i ] != null ) for ( E e : con [ i ] ) temp . add ( e ); } con = temp . con ; } public int size () { return size ; } } JavaScript var Math = require ( 'lib/math' ); var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; var e = exports . e = 2.71828182846 ; exports [ 'default' ] = function ( x ) { return Math . exp ( x ); }; module . exports = _extends ( exports [ 'default' ], exports ); JSON { \"name\" : \"mkdocs-material\" , \"version\" : \"0.2.4\" , \"description\" : \"A Material Design theme for MkDocs\" , \"homepage\" : \"http://squidfunk.github.io/mkdocs-material/\" , \"authors\" : [ \"squidfunk <martin.donath@squidfunk.com>\" ], \"license\" : \"MIT\" , \"main\" : \"Gulpfile.js\" , \"scripts\" : { \"start\" : \"./node_modules/.bin/gulp watch --mkdocs\" , \"build\" : \"./node_modules/.bin/gulp build --production\" } ... } Julia using MXNet mlp = @mx . chain mx . Variable ( : data ) => mx . FullyConnected ( name =: fc1 , num_hidden = 128 ) => mx . Activation ( name =: relu1 , act_type =: relu ) => mx . FullyConnected ( name =: fc2 , num_hidden = 64 ) => mx . Activation ( name =: relu2 , act_type =: relu ) => mx . FullyConnected ( name =: fc3 , num_hidden = 10 ) => mx . SoftmaxOutput ( name =: softmax ) # data provider batch_size = 100 include ( Pkg . dir ( \"MXNet\" , \"examples\" , \"mnist\" , \"mnist-data.jl\" )) train_provider , eval_provider = get_mnist_providers ( batch_size ) # setup model model = mx . FeedForward ( mlp , context = mx . cpu ()) # optimization algorithm optimizer = mx . SGD ( lr = 0.1 , momentum = 0.9 ) # fit parameters mx . fit ( model , optimizer , train_provider , n_epoch = 20 , eval_data = eval_provider ) Lua local ffi = require ( \"ffi\" ) ffi . cdef [[ void Sleep(int ms); int poll(struct pollfd *fds, unsigned long nfds, int timeout); ]] local sleep if ffi . os == \"Windows\" then function sleep ( s ) ffi . C . Sleep ( s * 1000 ) end else function sleep ( s ) ffi . C . poll ( nil , 0 , s * 1000 ) end end for i = 1 , 160 do io.write ( \".\" ); io.flush () sleep ( 0.01 ) end io.write ( \" \\n \" ) MySQL SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ; PHP <?php // src/AppBundle/Controller/LuckyController.php namespace AppBundle\\Controller ; use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route ; use Symfony\\Component\\HttpFoundation\\Response ; class LuckyController { /** * @Route(\"/lucky/number\") */ public function numberAction () { $number = mt_rand ( 0 , 100 ); return new Response ( '<html><body>Lucky number: ' . $number . '</body></html>' ); } } Protocol Buffers syntax = \"proto2\" ; package caffe ; // Specifies the shape (dimensions) of a Blob. message BlobShape { repeated int64 dim = 1 [ packed = true ]; } message BlobProto { optional BlobShape shape = 7 ; repeated float data = 5 [ packed = true ]; repeated float diff = 6 [ packed = true ]; // 4D dimensions -- deprecated. Use \"shape\" instead. optional int32 num = 1 [ default = 0 ]; optional int32 channels = 2 [ default = 0 ]; optional int32 height = 3 [ default = 0 ]; optional int32 width = 4 [ default = 0 ]; } Python \"\"\" A very simple MNIST classifier. See extensive documentation at http://tensorflow.org/tutorials/mnist/beginners/index.md \"\"\" from __future__ import absolute_import from __future__ import division from __future__ import print_function # Import data from tensorflow.examples.tutorials.mnist import input_data import tensorflow as tf flags = tf . app . flags FLAGS = flags . FLAGS flags . DEFINE_string ( 'data_dir' , '/tmp/data/' , 'Directory for storing data' ) mnist = input_data . read_data_sets ( FLAGS . data_dir , one_hot = True ) sess = tf . InteractiveSession () # Create the model x = tf . placeholder ( tf . float32 , [ None , 784 ]) W = tf . Variable ( tf . zeros ([ 784 , 10 ])) b = tf . Variable ( tf . zeros ([ 10 ])) y = tf . nn . softmax ( tf . matmul ( x , W ) + b ) Ruby require 'finity/event' require 'finity/machine' require 'finity/state' require 'finity/transition' require 'finity/version' module Finity class InvalidCallback < StandardError ; end class MissingCallback < StandardError ; end class InvalidState < StandardError ; end # Class methods to be injected into the including class upon inclusion. module ClassMethods # Instantiate a new state machine for the including class by accepting a # block with state and event (and subsequent transition) definitions. def finity options = {}, & block @finity ||= Machine . new self , options , & block end # Return the names of all registered states. def states @finity . states . map { | name , _ | name } end # Return the names of all registered events. def events @finity . events . map { | name , _ | name } end end # Inject methods into the including class upon inclusion. def self . included base base . extend ClassMethods end end XML <?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE mainTag SYSTEM \"some.dtd\" [ENTITY % entity]> <?oxygen RNGSchema=\"some.rng\" type=\"xml\"?> <xs:main-Tag xmlns:xs= \"http://www.w3.org/2001/XMLSchema\" > <!-- This is a sample comment --> <childTag attribute= \"Quoted Value\" another-attribute= 'Single quoted value' a-third-attribute= '123' > <withTextContent> Some text content </withTextContent> <withEntityContent> Some text content with &lt; entities &gt; and mentioning uint8_t and int32_t </withEntityContent> <otherTag attribute= 'Single quoted Value' /> </childTag> <![CDATA[ some CData ]]> </main-Tag> Body copy Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras arcu libero, mollis sed massa vel, ornare viverra ex . Mauris a ullamcorper lacus. Nullam urna elit, malesuada eget finibus ut, ullamcorper ac tortor. Vestibulum sodales pulvinar nisl, pharetra aliquet est. Quisque volutpat erat ac nisi accumsan tempor. Sed suscipit , orci non pretium pretium, quam mi gravida metus, vel venenatis justo est condimentum diam. Maecenas non ornare justo. Nam a ipsum eros. Nulla aliquam orci sit amet nisl posuere malesuada. Proin aliquet nulla velit, quis ultricies orci feugiat et. Ut tincidunt sollicitudin tincidunt. Aenean ullamcorper sit amet nulla at interdum. Headings The 3rd level The 4th level The 5th level The 6th level Headings with secondary text The 3rd level with secondary text The 4th level with secondary text The 5th level with secondary text The 6th level with secondary text Blockquotes Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed molestie imperdiet consectetur. Blockquote nesting Sed aliquet , neque at rutrum mollis, neque nisi tincidunt nibh, vitae faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem libero fermentum urna, ut efficitur elit ligula et nunc. Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla. Ut sit amet placerat ante. Proin sed elementum nulla. Nunc vitae sem odio. Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum. eu odio. Suspendisse rutrum facilisis risus , eu posuere neque commodo a. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo bibendum, sodales mauris ut, tincidunt massa. Other content blocks Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; Praesent at :::js return target , sodales nibh vel, tempor felis. Fusce vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices. Donec consectetur mauris non neque imperdiet, eget volutpat libero. Lists Unordered lists Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris. Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam. Ordered lists Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aliquam ornare feugiat quam et egestas. Nunc id erat et quam pellentesque lacinia eu vel odio. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Sed aliquet, neque at rutrum mollis, neque nisi tincidunt nibh. Pellentesque eget :::js var _extends ornare tellus, ut gravida mi. var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo. Definition lists Lorem ipsum dolor sit amet : Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Cras arcu libero : Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris. Code blocks Inline Morbi eget dapibus felis . Vivamus venenatis porttitor tortor sit amet rutrum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Pellentesque aliquet quam enim , eu volutpat urna rutrum a. Nam vehicula nunc :::js return target mauris, a ultricies libero efficitur sed. Sed molestie imperdiet consectetur. Vivamus a pharetra leo. Pellentesque eget ornare tellus, ut gravida mi. Fusce vel lacinia lacus. Listing #!js hl_lines=\"8\" var _extends = function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { target[key] = source[key]; } } return target; }; Horizontal rules Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales. Data tables Sollicitudo / Pellentesi consectetur adipiscing elit arcu sed Vivamus a pharetra yes yes yes yes yes Ornare viverra ex yes yes yes yes yes Mauris a ullamcorper yes yes partial yes yes Nullam urna elit yes yes yes yes yes Malesuada eget finibus yes yes yes yes yes Ullamcorper yes yes yes yes yes Vestibulum sodales yes - yes - yes Pulvinar nisl yes yes yes - - Pharetra aliquet est yes yes yes yes yes Sed suscipit yes yes yes yes yes Orci non pretium yes partial - - - Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Left Center Right Lorem dolor amet ipsum sit Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. Table with colgroups (Pandoc) Lorem ipsum dolor sit amet. Sed sagittis eleifend rutrum. Donec vitae suscipit est. Admonition Admonition is an extension included in the standard Markdown library that makes it possible to add block-styled side content to your documentation, for example summaries, notes, hints or warnings. Installation Add the following lines to your mkdocs.yml : markdown_extensions : - admonition Usage Admonition blocks follow a simple syntax: every block is started with !!! , followed by a single keyword which is used as the type qualifier of the block. The content of the block then follows on the next line, indented by four spaces. Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Changing the title By default, the block title will equal the type qualifier in titlecase. However, it can easily be changed by adding a quoted string after the type qualifier. Example: !!! note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Removing the title Similar to setting a custom title , the icon and title can be omitted by providing an empty string after the type qualifier: Example: !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Embedded code blocks Blocks can contain all kinds of text content, including headlines, lists, paragraphs and other blocks \u2013 except code blocks, because the parser from the standard Markdown library does not account for those. However, the PyMdown Extensions package adds an extension called SuperFences , which makes it possible to nest code blocks within other blocks, respectively Admonition blocks. Example: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim. Collapsible blocks The Details extension which is also part of the PyMdown Extensions package adds support for rendering collapsible Admonition blocks. This is useful for FAQs or content that is of secondary nature. Example: ??? note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: ??? note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. By adding a + sign directly after the start marker, blocks can be rendered open by default. Types Admonition supports user-defined type qualifiers which may influence the style of the inserted block. Following is a list of type qualifiers provided by the Material theme, whereas the default type, and thus fallback for unknown type qualifiers, is note . Note Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: note seealso Abstract Example: !!! abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: abstract summary tldr Info Example: !!! info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: info todo Tip Example: !!! tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: tip hint important Success Example: !!! success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: success check done Question Example: !!! question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: question help faq Warning Example: !!! warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: warning caution attention Failure Example: !!! failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: failure fail missing Danger Example: !!! danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: danger error Bug Example: !!! bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: bug Example Example: !!! example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: example snippet Quote Example: !!! quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: quote cite","title":"Mkdocs"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#basic-syntax","text":"image loaded from the web image loaded from img/logo.png image loaded from the web with a link(uses HTML) image loaded from img/logo.png with a link(uses HTML) if you are not seeing thisimage , well , simply put: if your blog resides in following directory: docs/ | |----x/ | | | |----y/ | | | | | | | | |---z/ | | | | | | | | | | | |---myblog.md | | | | then you should create a folder img in the z/ folder and add pics there and access it using .../img/imagename.png . so your final structure will be: docs/ | |----x/ | | | |----y/ | | | | | | | | |---z/ | | | | | | | | | | | |---img/ | | | | |-----imagename.png | | | |---myblog.md | | | | like this : [ except for index.md and its pictures, which are already in the root directory ( path for index is docs/index.md and path for images used in index would be docs/img/picname.png )]","title":"Basic Syntax"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#codehilite","text":"CodeHilite is an extension that adds syntax highlighting to code blocks and is included in the standard Markdown library. The highlighting process is executed during compilation of the Markdown file. Syntax highlighting not working? Please ensure that Pygments is installed. See the next section for further directions on how to set up Pygments or use the official Docker image with all dependencies pre-installed.","title":"CodeHilite"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#installation","text":"CodeHilite parses code blocks and wraps them in pre tags. If Pygments is installed, which is a generic syntax highlighter with support for over 300 languages , CodeHilite will also highlight the code block. Pygments can be installed with the following command: pip install pygments To enable CodeHilite, add the following lines to your mkdocs.yml : markdown_extensions : - codehilite","title":"Installation"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#usage","text":"","title":"Usage"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#specifying-the-language","text":"The CodeHilite extension uses the same syntax as regular Markdown code blocks, but needs to know the language of the code block. This can be done in three different ways.","title":"Specifying the language"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#via-markdown-syntax-recommended","text":"In Markdown, code blocks can be opened and closed by writing three backticks on separate lines. To add code highlighting to those blocks, the easiest way is to specify the language directly after the opening block. Example: ``` python import tensorflow as tf ``` Result: import tensorflow as tf","title":"via Markdown syntax recommended"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#via-shebang","text":"Alternatively, if the first line of a code block contains a shebang, the language is derived from the path referenced in the shebang. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: #!/usr/bin/python import tensorflow as tf Result: #!/usr/bin/python import tensorflow as tf","title":"via Shebang"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#via-three-colons","text":"If the first line starts with three colons followed by a language identifier, the first line is stripped. This will only work for code blocks that are indented using four spaces, not for those encapsulated in three backticks. Example: :::python import tensorflow as tf Result: :::python import tensorflow as tf","title":"via three colons"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#adding-line-numbers","text":"Line numbers can be added by enabling the linenums flag in your mkdocs.yml : markdown_extensions : - codehilite : linenums : true Example: ``` python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: #!python \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j]","title":"Adding line numbers"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#grouping-code-blocks","text":"The SuperFences extension which is part of the PyMdown Extensions package adds support for grouping code blocks with tabs. This is especially useful for documenting projects with multiple language bindings. Example: ``` bash tab=\"Bash\" #!/bin/bash echo \"Hello world!\" ``` ``` c tab=\"C\" #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); } ``` ``` c++ tab=\"C++\" #include <iostream> int main() { std::cout << \"Hello world!\" << std::endl; return 0; } ``` ``` c# tab=\"C#\" using System; class Program { static void Main(string[] args) { Console.WriteLine(\"Hello world!\"); } } ``` Result: ``` bash tab=\"Bash\"","title":"Grouping code blocks"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#binbash","text":"echo \"Hello world!\" ``` c tab=\"C\" #include <stdio.h> int main(void) { printf(\"Hello world!\\n\"); } ``` c++ tab=\"C++\"","title":"!/bin/bash"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#include","text":"int main() { std::cout << \"Hello world!\" << std::endl; return 0; } ``` c# tab=\"C#\" using System; class Program { static void Main(string[] args) { Console.WriteLine(\"Hello world!\"); } }","title":"include "},{"location":"tab_blogs/web/mkdocs/basic_syntax/#highlighting-specific-lines","text":"Specific lines can be highlighted by passing the line numbers to the hl_lines argument placed right after the language identifier. Line counts start at 1. Example: ``` python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j] ``` Result: #!python hl_lines=\"3 4\" \"\"\" Bubble sort \"\"\" def bubble_sort(items): for i in range(len(items)): for j in range(len(items) - 1 - i): if items[j] > items[j + 1]: items[j], items[j + 1] = items[j + 1], items[j]","title":"Highlighting specific lines"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#supported-languages-excerpt","text":"CodeHilite uses Pygments , a generic syntax highlighter with support for over 300 languages , so the following list of examples is just an excerpt.","title":"Supported languages excerpt"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#bash","text":"#!/bin/bash for OPT in \" $@ \" do case \" $OPT \" in '-f' ) canonicalize = 1 ;; '-n' ) switchlf = \"-n\" ;; esac done # readlink -f function __readlink_f { target = \" $1 \" while test -n \" $target \" ; do filepath = \" $target \" cd ` dirname \" $filepath \" ` target = ` readlink \" $filepath \" ` done /bin/echo $switchlf ` pwd -P ` / ` basename \" $filepath \" ` } if [ ! \" $canonicalize \" ] ; then readlink $switchlf \" $@ \" else for file in \" $@ \" do case \" $file \" in -* ) ;; * ) __readlink_f \" $file \" ;; esac done fi exit $?","title":"Bash"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#c","text":"extern size_t pb_varint_scan ( const uint8_t data [], size_t left ) { assert ( data && left ); left = left > 10 ? 10 : left ; #ifdef __SSE2__ /* Mapping: remaining bytes ==> bitmask */ static const int mask_map [] = { 0x0000 , 0x0001 , 0x0003 , 0x0007 , 0x000F , 0x001F , 0x003F , 0x007F , 0x00FF , 0x01FF , 0x03FF }; /* Load buffer into 128-bit integer and create high-bit mask */ __m128i temp = _mm_loadu_si128 (( const __m128i * ) data ); __m128i high = _mm_set1_epi8 ( 0x80 ); /* Intersect and extract mask with high-bits set */ int mask = _mm_movemask_epi8 ( _mm_and_si128 ( temp , high )); mask = ( mask & mask_map [ left ]) ^ mask_map [ left ]; /* Count trailing zeroes */ return mask ? __builtin_ctz ( mask ) + 1 : 0 ; #else /* Linear scan */ size_t size = 0 ; while ( data [ size ++ ] & 0x80 ) if ( !-- left ) return 0 ; return size ; #endif /* __SSE2__ */ }","title":"C"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#c_1","text":"Extension :: Extension ( const Descriptor * descriptor , const Descriptor * scope ) : descriptor_ ( descriptor ), scope_ ( scope ) { /* Extract full name for signature */ variables_ [ \"signature\" ] = descriptor_ -> full_name (); /* Prepare message symbol */ variables_ [ \"message\" ] = StringReplace ( variables_ [ \"signature\" ], \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"message\" ])); /* Suffix scope to identifiers, if given */ string suffix ( \"\" ); if ( scope_ ) { suffix = scope_ -> full_name (); /* Check if the base and extension types are in the same package */ if ( ! scope_ -> file () -> package (). compare ( descriptor_ -> file () -> package ())) suffix = StripPrefixString ( suffix , scope_ -> file () -> package () + \".\" ); /* Append to signature */ variables_ [ \"signature\" ] += \".[\" + suffix + \"]\" ; suffix = \"_\" + suffix ; } /* Prepare extension symbol */ variables_ [ \"extension\" ] = StringReplace ( suffix , \".\" , \"_\" , true ); LowerString ( & ( variables_ [ \"extension\" ])); }","title":"C++"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#c_2","text":"public static void Send ( Socket socket , byte [] buffer , int offset , int size , int timeout ) { int startTickCount = Environment . TickCount ; int sent = 0 ; do { if ( Environment . TickCount > startTickCount + timeout ) throw new Exception ( \"Timeout.\" ); try { sent += socket . Send ( buffer , offset + sent , size - sent , SocketFlags . None ); } catch ( SocketException ex ) { if ( ex . SocketErrorCode == SocketError . WouldBlock || ex . SocketErrorCode == SocketError . IOPending || ex . SocketErrorCode == SocketError . NoBufferSpaceAvailable ) { /* Socket buffer is probably full, wait and try again */ Thread . Sleep ( 30 ); } else { throw ex ; } } } while ( sent < size ); }","title":"C&#35;"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#clojure","text":"( clojure-version ) ( defn partition-when [ f ] ( fn [ rf ] ( let [ a ( java.util.ArrayList. ) fval ( volatile! false )] ( fn ([] ( rf )) ([ result ] ( let [ result ( if ( .isEmpty a ) result ( let [ v ( vec ( .toArray a ))] ;; Clear first ( .clear a ) ( unreduced ( rf result v ))))] ( rf result ))) ([ result input ] ( if-not ( and ( f input ) @ fval ) ( do ( vreset! fval true ) ( .add a input ) result ) ( let [ v ( vec ( .toArray a ))] ( .clear a ) ( let [ ret ( rf result v )] ( when-not ( reduced? ret ) ( .add a input )) ret )))))))) ( into [] ( partition-when # ( .startsWith % \">>\" )) [ \"1d\" \"33\" \">> 1\" \">> 2\" \"22\" \">> 3\" ])","title":"Clojure"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#diff","text":"Index: grunt.js =================================================================== --- grunt.js (revision 31200) +++ grunt.js (working copy) @@ -12,6 +12,7 @@ module.exports = function (grunt) { + console.log('hello world'); // Project configuration. grunt.initConfig({ lint: { @@ -19,10 +20,6 @@ 'packages/services.web/{!(test)/**/,}*.js', 'packages/error/**/*.js' ], - scripts: [ - 'grunt.js', - 'db/**/*.js' - ], browser: [ 'packages/web/server.js', 'packages/web/server/**/*.js',","title":"Diff"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#docker","text":"FROM ubuntu # Install vnc, xvfb in order to create a 'fake' display and firefox RUN apt-get update && apt-get install -y x11vnc xvfb firefox RUN mkdir ~/.vnc # Setup a password RUN x11vnc -storepasswd 1234 ~/.vnc/passwd # Autostart firefox (might not be the best way, but it does the trick) RUN bash -c 'echo \"firefox\" >> /.bashrc' EXPOSE 5900 CMD [ \"x11vnc\" , \"-forever\" , \"-usepw\" , \"-create\" ]","title":"Docker"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#elixir","text":"require Logger def accept ( port ) do { :ok , socket } = :gen_tcp . listen ( port , [ :binary , packet : :line , active : false , reuseaddr : true ]) Logger . info \"Accepting connections on port #{ port } \" loop_acceptor ( socket ) end defp loop_acceptor ( socket ) do { :ok , client } = :gen_tcp . accept ( socket ) serve ( client ) loop_acceptor ( socket ) end defp serve ( socket ) do socket |> read_line () |> write_line ( socket ) serve ( socket ) end defp read_line ( socket ) do { :ok , data } = :gen_tcp . recv ( socket , 0 ) data end defp write_line ( line , socket ) do :gen_tcp . send ( socket , line ) end","title":"Elixir"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#erlang","text":"circular ( Defs ) -> [ { { Type , Base }, Fields } || { { Type , Base }, Fields } <- Defs , Type == msg , circular ( Base , Defs ) ]. circular ( Base , Defs ) -> Fields = proplists : get_value ({ msg , Base }, Defs ), circular ( Defs , Fields , [ Base ]). circular (_ Defs , [], _ Path ) -> false ; circular ( Defs , [ Field | Fields ], Path ) -> case Field #field.type of { msg , Type } -> case lists : member ( Type , Path ) of false -> Children = proplists : get_value ({ msg , Type }, Defs ), case circular ( Defs , Children , [ Type | Path ]) of false -> circular ( Defs , Fields , Path ); true -> true end ; true -> Type == lists : last ( Path ) andalso ( length ( Path ) == 1 orelse not is_tree ( Path )) end ; _ -> circular ( Defs , Fields , Path ) end .","title":"Erlang"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#f","text":"/// Asynchronously download retangles from the server /// and decode the JSON format to F# Rectangle record let [< Js >] getRectangles () : Async < Rectangle [] > = async { let req = XMLHttpRequest () req . Open ( \"POST\" , \"/get\" , true ) let! resp = req . AsyncSend () return JSON . parse ( resp ) } /// Repeatedly update rectangles after 0.5 sec let [< Js >] updateLoop () = async { while true do do ! Async . Sleep ( 500 ) let! rects = getRectangles () cleanRectangles () rects |> Array . iter createRectangle }","title":"F&#35;"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#go","text":"package main import \"fmt\" func counter ( id int , channel chan int , closer bool ) { for i := 0 ; i < 10000000 ; i ++ { fmt . Println ( \"process\" , id , \" send\" , i ) channel <- 1 } if closer { close ( channel ) } } func main () { channel := make ( chan int ) go counter ( 1 , channel , false ) go counter ( 2 , channel , true ) x := 0 // receiving data from channel for i := range channel { fmt . Println ( \"receiving\" ) x += i } fmt . Println ( x ) }","title":"Go"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#html","text":"<!doctype html> < html class = \"no-js\" lang = \"\" > < head > < meta charset = \"utf-8\" > < meta http-equiv = \"x-ua-compatible\" content = \"ie=edge\" > < title > HTML5 Boilerplate </ title > < meta name = \"description\" content = \"\" > < meta name = \"viewport\" content = \"width=device-width, initial-scale=1\" > < link rel = \"apple-touch-icon\" href = \"apple-touch-icon.png\" > < link rel = \"stylesheet\" href = \"css/normalize.css\" > < link rel = \"stylesheet\" href = \"css/main.css\" > < script src = \"js/vendor/modernizr-2.8.3.min.js\" ></ script > </ head > < body > < p > Hello world! This is HTML5 Boilerplate. </ p > </ body > </ html >","title":"HTML"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#java","text":"import java.util.LinkedList ; import java.lang.reflect.Array ; public class UnsortedHashSet < E > { private static final double LOAD_FACTOR_LIMIT = 0.7 ; private int size ; private LinkedList < E >[] con ; public UnsortedHashSet () { con = ( LinkedList < E >[] )( new LinkedList [ 10 ] ); } public boolean add ( E obj ) { int oldSize = size ; int index = Math . abs ( obj . hashCode ()) % con . length ; if ( con [ index ] == null ) con [ index ] = new LinkedList < E > (); if ( ! con [ index ] . contains ( obj )) { con [ index ] . add ( obj ); size ++ ; } if ( 1.0 * size / con . length > LOAD_FACTOR_LIMIT ) resize (); return oldSize != size ; } private void resize () { UnsortedHashSet < E > temp = new UnsortedHashSet < E > (); temp . con = ( LinkedList < E >[] )( new LinkedList [ con . length * 2 + 1 ] ); for ( int i = 0 ; i < con . length ; i ++ ) { if ( con [ i ] != null ) for ( E e : con [ i ] ) temp . add ( e ); } con = temp . con ; } public int size () { return size ; } }","title":"Java"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#javascript","text":"var Math = require ( 'lib/math' ); var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; var e = exports . e = 2.71828182846 ; exports [ 'default' ] = function ( x ) { return Math . exp ( x ); }; module . exports = _extends ( exports [ 'default' ], exports );","title":"JavaScript"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#json","text":"{ \"name\" : \"mkdocs-material\" , \"version\" : \"0.2.4\" , \"description\" : \"A Material Design theme for MkDocs\" , \"homepage\" : \"http://squidfunk.github.io/mkdocs-material/\" , \"authors\" : [ \"squidfunk <martin.donath@squidfunk.com>\" ], \"license\" : \"MIT\" , \"main\" : \"Gulpfile.js\" , \"scripts\" : { \"start\" : \"./node_modules/.bin/gulp watch --mkdocs\" , \"build\" : \"./node_modules/.bin/gulp build --production\" } ... }","title":"JSON"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#julia","text":"using MXNet mlp = @mx . chain mx . Variable ( : data ) => mx . FullyConnected ( name =: fc1 , num_hidden = 128 ) => mx . Activation ( name =: relu1 , act_type =: relu ) => mx . FullyConnected ( name =: fc2 , num_hidden = 64 ) => mx . Activation ( name =: relu2 , act_type =: relu ) => mx . FullyConnected ( name =: fc3 , num_hidden = 10 ) => mx . SoftmaxOutput ( name =: softmax ) # data provider batch_size = 100 include ( Pkg . dir ( \"MXNet\" , \"examples\" , \"mnist\" , \"mnist-data.jl\" )) train_provider , eval_provider = get_mnist_providers ( batch_size ) # setup model model = mx . FeedForward ( mlp , context = mx . cpu ()) # optimization algorithm optimizer = mx . SGD ( lr = 0.1 , momentum = 0.9 ) # fit parameters mx . fit ( model , optimizer , train_provider , n_epoch = 20 , eval_data = eval_provider )","title":"Julia"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#lua","text":"local ffi = require ( \"ffi\" ) ffi . cdef [[ void Sleep(int ms); int poll(struct pollfd *fds, unsigned long nfds, int timeout); ]] local sleep if ffi . os == \"Windows\" then function sleep ( s ) ffi . C . Sleep ( s * 1000 ) end else function sleep ( s ) ffi . C . poll ( nil , 0 , s * 1000 ) end end for i = 1 , 160 do io.write ( \".\" ); io.flush () sleep ( 0.01 ) end io.write ( \" \\n \" )","title":"Lua"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#mysql","text":"SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ;","title":"MySQL"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#php","text":"<?php // src/AppBundle/Controller/LuckyController.php namespace AppBundle\\Controller ; use Sensio\\Bundle\\FrameworkExtraBundle\\Configuration\\Route ; use Symfony\\Component\\HttpFoundation\\Response ; class LuckyController { /** * @Route(\"/lucky/number\") */ public function numberAction () { $number = mt_rand ( 0 , 100 ); return new Response ( '<html><body>Lucky number: ' . $number . '</body></html>' ); } }","title":"PHP"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#protocol-buffers","text":"syntax = \"proto2\" ; package caffe ; // Specifies the shape (dimensions) of a Blob. message BlobShape { repeated int64 dim = 1 [ packed = true ]; } message BlobProto { optional BlobShape shape = 7 ; repeated float data = 5 [ packed = true ]; repeated float diff = 6 [ packed = true ]; // 4D dimensions -- deprecated. Use \"shape\" instead. optional int32 num = 1 [ default = 0 ]; optional int32 channels = 2 [ default = 0 ]; optional int32 height = 3 [ default = 0 ]; optional int32 width = 4 [ default = 0 ]; }","title":"Protocol Buffers"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#python","text":"\"\"\" A very simple MNIST classifier. See extensive documentation at http://tensorflow.org/tutorials/mnist/beginners/index.md \"\"\" from __future__ import absolute_import from __future__ import division from __future__ import print_function # Import data from tensorflow.examples.tutorials.mnist import input_data import tensorflow as tf flags = tf . app . flags FLAGS = flags . FLAGS flags . DEFINE_string ( 'data_dir' , '/tmp/data/' , 'Directory for storing data' ) mnist = input_data . read_data_sets ( FLAGS . data_dir , one_hot = True ) sess = tf . InteractiveSession () # Create the model x = tf . placeholder ( tf . float32 , [ None , 784 ]) W = tf . Variable ( tf . zeros ([ 784 , 10 ])) b = tf . Variable ( tf . zeros ([ 10 ])) y = tf . nn . softmax ( tf . matmul ( x , W ) + b )","title":"Python"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#ruby","text":"require 'finity/event' require 'finity/machine' require 'finity/state' require 'finity/transition' require 'finity/version' module Finity class InvalidCallback < StandardError ; end class MissingCallback < StandardError ; end class InvalidState < StandardError ; end # Class methods to be injected into the including class upon inclusion. module ClassMethods # Instantiate a new state machine for the including class by accepting a # block with state and event (and subsequent transition) definitions. def finity options = {}, & block @finity ||= Machine . new self , options , & block end # Return the names of all registered states. def states @finity . states . map { | name , _ | name } end # Return the names of all registered events. def events @finity . events . map { | name , _ | name } end end # Inject methods into the including class upon inclusion. def self . included base base . extend ClassMethods end end","title":"Ruby"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#xml","text":"<?xml version=\"1.0\" encoding=\"UTF-8\"?> <!DOCTYPE mainTag SYSTEM \"some.dtd\" [ENTITY % entity]> <?oxygen RNGSchema=\"some.rng\" type=\"xml\"?> <xs:main-Tag xmlns:xs= \"http://www.w3.org/2001/XMLSchema\" > <!-- This is a sample comment --> <childTag attribute= \"Quoted Value\" another-attribute= 'Single quoted value' a-third-attribute= '123' > <withTextContent> Some text content </withTextContent> <withEntityContent> Some text content with &lt; entities &gt; and mentioning uint8_t and int32_t </withEntityContent> <otherTag attribute= 'Single quoted Value' /> </childTag> <![CDATA[ some CData ]]> </main-Tag>","title":"XML"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#body-copy","text":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Cras arcu libero, mollis sed massa vel, ornare viverra ex . Mauris a ullamcorper lacus. Nullam urna elit, malesuada eget finibus ut, ullamcorper ac tortor. Vestibulum sodales pulvinar nisl, pharetra aliquet est. Quisque volutpat erat ac nisi accumsan tempor. Sed suscipit , orci non pretium pretium, quam mi gravida metus, vel venenatis justo est condimentum diam. Maecenas non ornare justo. Nam a ipsum eros. Nulla aliquam orci sit amet nisl posuere malesuada. Proin aliquet nulla velit, quis ultricies orci feugiat et. Ut tincidunt sollicitudin tincidunt. Aenean ullamcorper sit amet nulla at interdum.","title":"Body copy"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#headings","text":"","title":"Headings"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#the-3rd-level","text":"","title":"The 3rd level"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#the-4th-level","text":"","title":"The 4th level"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#the-5th-level","text":"","title":"The 5th level"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#the-6th-level","text":"","title":"The 6th level"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#headings-with-secondary-text","text":"","title":"Headings with secondary text"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#the-3rd-level-with-secondary-text","text":"","title":"The 3rd level with secondary text"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#the-4th-level-with-secondary-text","text":"","title":"The 4th level with secondary text"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#the-5th-level-with-secondary-text","text":"","title":"The 5th level with secondary text"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#the-6th-level-with-secondary-text","text":"","title":"The 6th level with secondary text"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#blockquotes","text":"Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Sed molestie imperdiet consectetur.","title":"Blockquotes"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#blockquote-nesting","text":"Sed aliquet , neque at rutrum mollis, neque nisi tincidunt nibh, vitae faucibus lacus nunc at lacus. Nunc scelerisque, quam id cursus sodales, lorem libero fermentum urna, ut efficitur elit ligula et nunc. Mauris dictum mi lacus, sit amet pellentesque urna vehicula fringilla. Ut sit amet placerat ante. Proin sed elementum nulla. Nunc vitae sem odio. Suspendisse ac eros arcu. Vivamus orci erat, volutpat a tempor et, rutrum. eu odio. Suspendisse rutrum facilisis risus , eu posuere neque commodo a. Interdum et malesuada fames ac ante ipsum primis in faucibus. Sed nec leo bibendum, sodales mauris ut, tincidunt massa.","title":"Blockquote nesting"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#other-content-blocks","text":"Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; Praesent at :::js return target , sodales nibh vel, tempor felis. Fusce vel lacinia lacus. Suspendisse rhoncus nunc non nisi iaculis ultrices. Donec consectetur mauris non neque imperdiet, eget volutpat libero.","title":"Other content blocks"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#lists","text":"","title":"Lists"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#unordered-lists","text":"Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris. Nulla et rhoncus turpis. Mauris ultricies elementum leo. Duis efficitur accumsan nibh eu mattis. Vivamus tempus velit eros, porttitor placerat nibh lacinia sed. Aenean in finibus diam.","title":"Unordered lists"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#ordered-lists","text":"Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales. Cum sociis natoque penatibus et magnis dis parturient montes, nascetur ridiculus mus. Aliquam ornare feugiat quam et egestas. Nunc id erat et quam pellentesque lacinia eu vel odio. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a ultricies libero efficitur sed. Mauris dictum mi lacus Ut sit amet placerat ante Suspendisse ac eros arcu Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a. Sed aliquet, neque at rutrum mollis, neque nisi tincidunt nibh. Pellentesque eget :::js var _extends ornare tellus, ut gravida mi. var _extends = function ( target ) { for ( var i = 1 ; i < arguments . length ; i ++ ) { var source = arguments [ i ]; for ( var key in source ) { target [ key ] = source [ key ]; } } return target ; }; Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis nulla. Vivamus a pharetra leo.","title":"Ordered lists"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#definition-lists","text":"Lorem ipsum dolor sit amet : Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Cras arcu libero : Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante, fringilla at aliquam ac, aliquet sed mauris.","title":"Definition lists"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#code-blocks","text":"","title":"Code blocks"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#inline","text":"Morbi eget dapibus felis . Vivamus venenatis porttitor tortor sit amet rutrum. Class aptent taciti sociosqu ad litora torquent per conubia nostra, per inceptos himenaeos. Pellentesque aliquet quam enim , eu volutpat urna rutrum a. Nam vehicula nunc :::js return target mauris, a ultricies libero efficitur sed. Sed molestie imperdiet consectetur. Vivamus a pharetra leo. Pellentesque eget ornare tellus, ut gravida mi. Fusce vel lacinia lacus.","title":"Inline"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#listing","text":"#!js hl_lines=\"8\" var _extends = function(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { target[key] = source[key]; } } return target; };","title":"Listing"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#horizontal-rules","text":"Aenean in finibus diam. Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor. Integer vehicula feugiat magna, a mollis tellus. Nam mollis ex ante, quis elementum eros tempor rutrum. Aenean efficitur lobortis lacinia. Nulla consectetur feugiat sodales.","title":"Horizontal rules"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#data-tables","text":"Sollicitudo / Pellentesi consectetur adipiscing elit arcu sed Vivamus a pharetra yes yes yes yes yes Ornare viverra ex yes yes yes yes yes Mauris a ullamcorper yes yes partial yes yes Nullam urna elit yes yes yes yes yes Malesuada eget finibus yes yes yes yes yes Ullamcorper yes yes yes yes yes Vestibulum sodales yes - yes - yes Pulvinar nisl yes yes yes - - Pharetra aliquet est yes yes yes yes yes Sed suscipit yes yes yes yes yes Orci non pretium yes partial - - - Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis. Nulla tempor lobortis orci, at elementum urna sodales vitae. In in vehicula nulla, quis ornare libero. Left Center Right Lorem dolor amet ipsum sit Vestibulum vitae orci quis ante viverra ultricies ut eget turpis. Sed eu lectus dapibus, eleifend nulla varius, lobortis turpis. In ac hendrerit nisl, sit amet laoreet nibh. Table with colgroups (Pandoc) Lorem ipsum dolor sit amet. Sed sagittis eleifend rutrum. Donec vitae suscipit est.","title":"Data tables"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#admonition","text":"Admonition is an extension included in the standard Markdown library that makes it possible to add block-styled side content to your documentation, for example summaries, notes, hints or warnings.","title":"Admonition"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#installation_1","text":"Add the following lines to your mkdocs.yml : markdown_extensions : - admonition","title":"Installation"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#usage_1","text":"Admonition blocks follow a simple syntax: every block is started with !!! , followed by a single keyword which is used as the type qualifier of the block. The content of the block then follows on the next line, indented by four spaces. Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Usage"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#changing-the-title","text":"By default, the block title will equal the type qualifier in titlecase. However, it can easily be changed by adding a quoted string after the type qualifier. Example: !!! note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Phasellus posuere in sem ut cursus Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Changing the title"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#removing-the-title","text":"Similar to setting a custom title , the icon and title can be omitted by providing an empty string after the type qualifier: Example: !!! note \"\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa.","title":"Removing the title"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#embedded-code-blocks","text":"Blocks can contain all kinds of text content, including headlines, lists, paragraphs and other blocks \u2013 except code blocks, because the parser from the standard Markdown library does not account for those. However, the PyMdown Extensions package adds an extension called SuperFences , which makes it possible to nest code blocks within other blocks, respectively Admonition blocks. Example: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. SELECT Employees . EmployeeID , Employees . Name , Employees . Salary , Manager . Name AS Manager FROM Employees LEFT JOIN Employees AS Manager ON Employees . ManagerID = Manager . EmployeeID WHERE Employees . EmployeeID = '087652' ; Nunc eu odio eleifend, blandit leo a, volutpat sapien. Phasellus posuere in sem ut cursus. Nullam sit amet tincidunt ipsum, sit amet elementum turpis. Etiam ipsum quam, mattis in purus vitae, lacinia fermentum enim.","title":"Embedded code blocks"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#collapsible-blocks","text":"The Details extension which is also part of the PyMdown Extensions package adds support for rendering collapsible Admonition blocks. This is useful for FAQs or content that is of secondary nature. Example: ??? note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: ??? note \"Phasellus posuere in sem ut cursus\" Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. By adding a + sign directly after the start marker, blocks can be rendered open by default.","title":"Collapsible blocks"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#types","text":"Admonition supports user-defined type qualifiers which may influence the style of the inserted block. Following is a list of type qualifiers provided by the Material theme, whereas the default type, and thus fallback for unknown type qualifiers, is note .","title":"Types"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#note","text":"Example: !!! note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Note Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: note seealso","title":"Note"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#abstract","text":"Example: !!! abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Abstract Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: abstract summary tldr","title":"Abstract"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#info","text":"Example: !!! info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Info Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: info todo","title":"Info"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#tip","text":"Example: !!! tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Tip Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: tip hint important","title":"Tip"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#success","text":"Example: !!! success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Success Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: success check done","title":"Success"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#question","text":"Example: !!! question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Question Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: question help faq","title":"Question"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#warning","text":"Example: !!! warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Warning Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: warning caution attention","title":"Warning"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#failure","text":"Example: !!! failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Failure Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: failure fail missing","title":"Failure"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#danger","text":"Example: !!! danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Danger Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: danger error","title":"Danger"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#bug","text":"Example: !!! bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Bug Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: bug","title":"Bug"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#example","text":"Example: !!! example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Example Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: example snippet","title":"Example"},{"location":"tab_blogs/web/mkdocs/basic_syntax/#quote","text":"Example: !!! quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Result: Quote Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nulla et euismod nulla. Curabitur feugiat, tortor non consequat finibus, justo purus auctor massa, nec semper lorem quam in massa. Qualifiers: quote cite","title":"Quote"},{"location":"tab_edu/edu_details/","text":"Education details Academic Class 10th Class 12th Cambridge Foundation School, New Delhi, India. Cambridge Foundation School, New Delhi, India.(2016) batch of 2014 Batch of 2016 Central Board Of Secondary Education(CBSE) Central Board Of Secondary Education(CBSE) CGPA 9.0 76.4% B.Tech, Computer Science Engineering JIMS Engineering Management Technical Campus(JEMTEC) batch 2016-20 (Ongoing) GGSIP University CGPA 7.1 Non Academic Certifications. Google Certified Associate Android Developer I recently received Associate Android Developer Certification from Google. More details can be found here. Scholarships. Winner of Edugrad Data Analytics Scholarship Reciepent of Google India Scholarship, First Round Reciepent of Facebook Pytorch Scholarship, First Round Courses. Java Core Programming. Coding Blocks, Dwarka. Android App Development Basics. Coding Blocks, Dwarka.","title":"Education Details"},{"location":"tab_edu/edu_details/#education-details","text":"","title":"Education details"},{"location":"tab_edu/edu_details/#academic","text":"Class 10th Class 12th Cambridge Foundation School, New Delhi, India. Cambridge Foundation School, New Delhi, India.(2016) batch of 2014 Batch of 2016 Central Board Of Secondary Education(CBSE) Central Board Of Secondary Education(CBSE) CGPA 9.0 76.4% B.Tech, Computer Science Engineering JIMS Engineering Management Technical Campus(JEMTEC) batch 2016-20 (Ongoing) GGSIP University CGPA 7.1","title":"Academic"},{"location":"tab_edu/edu_details/#non-academic","text":"","title":"Non Academic"},{"location":"tab_edu/edu_details/#certifications","text":"Google Certified Associate Android Developer I recently received Associate Android Developer Certification from Google. More details can be found here.","title":" Certifications."},{"location":"tab_edu/edu_details/#scholarships","text":"Winner of Edugrad Data Analytics Scholarship Reciepent of Google India Scholarship, First Round Reciepent of Facebook Pytorch Scholarship, First Round","title":" Scholarships."},{"location":"tab_edu/edu_details/#courses","text":"Java Core Programming. Coding Blocks, Dwarka. Android App Development Basics. Coding Blocks, Dwarka.","title":" Courses."},{"location":"tab_projects/project_summary/","text":"Portfolio 1. Company projects: I have worked as an android developer intern with Coding Blocks, a coding institute, Claro India, an IOT based Agro-tech company and Cloud blocks, a Home Automation company. Claro India. For claro India, I built 2 internal apps RMCRS-bluetooth and RMCRS-sms, which automated their usual workflow by automatically sending data to the server without manual interaction. CloudBlocks.in For Cloudblocks India, I worked with their main software product, their android app as an Android Developer Intern. I fixed bugs in the code and added new features. The live app can be found here : 2. Personal projects(Android): Water Manager : Water Intake Tracker and Reminder An open source app built with Latest Jetpack components,Water manager is a full fledged Intake tracker app that can remind users to drink water, log their data and provide meaningful analysis. Links: Playstore | Github Self Notes A UI focussed note taking app that can give pin-able notifications for each note. Uses latest Architecture Components and MVVM pattern. Links : Playstore B-Browser A single screen mobile browser. made while learning about android WebView. Links: Github #100DaysOfCode A utility reminder app to remind the user to code for 1 hr each day. Links: Github MyJIMS One of my first full fledged app from 2017-18. Its an app for showing my college details. It Also has a chat-based announcement portal which uses Firebase Auth and Firebase Realtime Database as backend server. 9Notes The first version of my note taking app. 2048 A puzzle game. Attendance tracker A simple way to track your subject wise Attendance manually. File Manager Full fledged file manager using storage access framework (SAF Api). 2. Personal projects(Non Android): \"Talk to Super jarvis\" Super Jarvis a trivia on Marvel Avengers made for Google assistant. It does not need any installation, it simply works when a person says \"OK Google, Talk To Super Jarvis\".I was awarded with a branded T-shirt from Google, for building this. Links : Actions Store Venturebeat article analysis The following project aims to display how the use of scrapy, matplotlib and NLTK library can be put together to get some meaningful analysis. Here we crawl around 600+ articles of december 2018 from a tech-news site Venturebeat.com , put them in a large text file, and then read that file using NLTK library to build a hashmap of unique words, filtering out the non usefult stopwords. Links : Actions Store","title":"Portfolio"},{"location":"tab_projects/project_summary/#portfolio","text":"","title":"Portfolio"},{"location":"tab_projects/project_summary/#1-company-projects","text":"I have worked as an android developer intern with Coding Blocks, a coding institute, Claro India, an IOT based Agro-tech company and Cloud blocks, a Home Automation company.","title":"1. Company projects:"},{"location":"tab_projects/project_summary/#claro-india","text":"For claro India, I built 2 internal apps RMCRS-bluetooth and RMCRS-sms, which automated their usual workflow by automatically sending data to the server without manual interaction.","title":"Claro India."},{"location":"tab_projects/project_summary/#cloudblocksin","text":"For Cloudblocks India, I worked with their main software product, their android app as an Android Developer Intern. I fixed bugs in the code and added new features. The live app can be found here :","title":"CloudBlocks.in"},{"location":"tab_projects/project_summary/#2-personal-projectsandroid","text":"","title":"2. Personal projects(Android):"},{"location":"tab_projects/project_summary/#water-manager-water-intake-tracker-and-reminder","text":"An open source app built with Latest Jetpack components,Water manager is a full fledged Intake tracker app that can remind users to drink water, log their data and provide meaningful analysis. Links: Playstore | Github","title":"Water Manager : Water Intake Tracker and Reminder"},{"location":"tab_projects/project_summary/#self-notes","text":"A UI focussed note taking app that can give pin-able notifications for each note. Uses latest Architecture Components and MVVM pattern. Links : Playstore","title":"Self Notes"},{"location":"tab_projects/project_summary/#b-browser","text":"A single screen mobile browser. made while learning about android WebView. Links: Github","title":"B-Browser"},{"location":"tab_projects/project_summary/#100daysofcode","text":"A utility reminder app to remind the user to code for 1 hr each day. Links: Github","title":"#100DaysOfCode"},{"location":"tab_projects/project_summary/#myjims","text":"One of my first full fledged app from 2017-18. Its an app for showing my college details. It Also has a chat-based announcement portal which uses Firebase Auth and Firebase Realtime Database as backend server.","title":"MyJIMS"},{"location":"tab_projects/project_summary/#9notes","text":"The first version of my note taking app.","title":"9Notes"},{"location":"tab_projects/project_summary/#2048","text":"A puzzle game.","title":"2048"},{"location":"tab_projects/project_summary/#attendance-tracker","text":"A simple way to track your subject wise Attendance manually.","title":"Attendance tracker"},{"location":"tab_projects/project_summary/#file-manager","text":"Full fledged file manager using storage access framework (SAF Api).","title":"File Manager"},{"location":"tab_projects/project_summary/#2-personal-projectsnon-android","text":"","title":"2. Personal projects(Non Android):"},{"location":"tab_projects/project_summary/#talk-to-super-jarvis","text":"Super Jarvis a trivia on Marvel Avengers made for Google assistant. It does not need any installation, it simply works when a person says \"OK Google, Talk To Super Jarvis\".I was awarded with a branded T-shirt from Google, for building this. Links : Actions Store","title":"\"Talk to Super jarvis\""},{"location":"tab_projects/project_summary/#venturebeat-article-analysis","text":"The following project aims to display how the use of scrapy, matplotlib and NLTK library can be put together to get some meaningful analysis. Here we crawl around 600+ articles of december 2018 from a tech-news site Venturebeat.com , put them in a large text file, and then read that file using NLTK library to build a hashmap of unique words, filtering out the non usefult stopwords. Links : Actions Store","title":"Venturebeat article analysis"},{"location":"tab_work_exp/work_exp/","text":"Work Experience [--image--] | ## Company name | my position | mmm,yy -mmm,yy (x months) | description","title":"Work Experience"},{"location":"tab_work_exp/work_exp/#work-experience","text":"[--image--] | ## Company name | my position | mmm,yy -mmm,yy (x months) | description","title":"Work Experience"}]}